!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
A	framework/base/mathutilities.h	/^      enum {N = 1+BinaryExponentHelper<A <= 1,A\/2>::N};$/;"	e	enum:ProtoMol::Private::BinaryExponentHelper::<anonymous>
A	framework/topology/LennardJonesParameters.h	/^    Real A,B;$/;"	m	struct:ProtoMol::LennardJonesParameters
A14	framework/topology/LennardJonesParameters.h	/^    Real A14,B14;$/;"	m	struct:ProtoMol::LennardJonesParameters
ABSTRACTENUMTYPE_H	framework/base/AbstractEnumType.h	3;"	d
ALL	framework/topology/topologyutilities.h	/^  enum waterOption {IGNORE_WATER, ONLY_WATER, ALL};$/;"	e	enum:ProtoMol::waterOption
AMBERREADER_H	framework/io/AMBERReader.h	3;"	d
AMBERReader	framework/io/AMBERReader.cpp	/^  AMBERReader::AMBERReader():     $/;"	f	class:ProtoMol::AMBERReader
AMBERReader	framework/io/AMBERReader.cpp	/^  AMBERReader::AMBERReader(const std::string& filename):$/;"	f	class:ProtoMol::AMBERReader
AMBERReader	framework/io/AMBERReader.h	/^  class AMBERReader : public Reader {$/;"	c	namespace:ProtoMol
AMU	framework/base/pmconstants.cpp	/^      const Real AMU              = 1.6605655e-27;  \/\/ [kg]$/;"	v
ANGLE	framework/base/ScalarStructure.h	/^      ANGLE,$/;"	e	enum:ProtoMol::ScalarStructure::Index
ANGLE	framework/io/PARReader.h	/^      ANGLE,$/;"	e	enum:ProtoMol::PARReader::PARRecordTypeEnum
ANGLEINFO_H	framework/topology/AngleInfo.h	3;"	d
ANGLESYSTEMFORCEBASE_H	framework/forces/AngleSystemForceBase.h	3;"	d
ANGLESYSTEMFORCE_H	framework/forces/AngleSystemForce.h	3;"	d
ANGLE_DELTAMU	framework/base/ScalarStructure.h	/^      ANGLE_DELTAMU,        \/\/\/< needed for iSG and oSG simulations$/;"	e	enum:ProtoMol::ScalarStructure::Index
ANGLE_H	framework/topology/Angle.h	3;"	d
ANGLE_NOTSET	framework/topology/AngleInfo.h	/^		     ANGLE_NOTSET =    10003,      $/;"	e	enum:ProtoMol::AngleInfo::AngleType
ANGLE_POINTER	framework/topology/AngleInfo.h	/^		     ANGLE_POINTER =   10002,$/;"	e	enum:ProtoMol::AngleInfo::AngleType
ANGLE_VALUE	framework/topology/AngleInfo.h	/^    enum AngleType { ANGLE_VALUE  =    10001,$/;"	e	enum:ProtoMol::AngleInfo::AngleType
AObserved	framework/frontend/OutputState.h	/^    bool AObserved;$/;"	m	class:ProtoMol::OutputState
ARRAYCELLSTRUCTURE_H	framework/topology/ArrayCellListStructure.h	3;"	d
ARRAY_FASTEST_H	framework/base/Array_Fastest.h	3;"	d
ARRAY_H	framework/base/Array.h	3;"	d
ARRAY_NOPARTIALSPECIALIZATION_H	framework/base/Array_NoPartialSpecialization.h	3;"	d
ATOMTYPE_H	framework/base/AtomType.h	3;"	d
ATOM_H	framework/base/Atom.h	3;"	d
AVOGADRO	framework/base/pmconstants.cpp	/^      const Real AVOGADRO         = 6.022045e+23;   \/\/ [1\/mol]$/;"	v
AbstractEnumType	framework/base/AbstractEnumType.h	/^    AbstractEnumType():myType(T::UNDEFINED){}$/;"	f	class:ProtoMol::AbstractEnumType
AbstractEnumType	framework/base/AbstractEnumType.h	/^    AbstractEnumType(Enum n):myType(n){}$/;"	f	class:ProtoMol::AbstractEnumType
AbstractEnumType	framework/base/AbstractEnumType.h	/^    AbstractEnumType(const char s[]):myType(getEnum(std::string(s))){}$/;"	f	class:ProtoMol::AbstractEnumType
AbstractEnumType	framework/base/AbstractEnumType.h	/^    AbstractEnumType(const std::string& s):myType(getEnum(s)){}$/;"	f	class:ProtoMol::AbstractEnumType
AbstractEnumType	framework/base/AbstractEnumType.h	/^  class AbstractEnumType : public T {$/;"	c	namespace:ProtoMol
Acceptor	framework/base/PSF.h	/^      Acceptor():number(0),atom1(0),atom2(0){}$/;"	f	struct:ProtoMol::PSF::Acceptor
Acceptor	framework/base/PSF.h	/^      Acceptor(int a, int b, int c):number(a),atom1(b),atom2(c){}$/;"	f	struct:ProtoMol::PSF::Acceptor
Acceptor	framework/base/PSF.h	/^    struct Acceptor {$/;"	s	class:ProtoMol::PSF
Aij	framework/integrators/ModifierShadow.cpp	/^    Real ModifierShadow::Aij( unsigned int i, unsigned int j ) {$/;"	f	class:ProtoMol::ModifierShadow
AliasMapType	framework/base/Configuration.h	/^    typedef std::map<std::string,std::string,ltstrNocase> AliasMapType;$/;"	t	class:ProtoMol::Configuration
Angle	framework/base/PAR.h	/^      Angle(){}  $/;"	f	struct:ProtoMol::PAR::Angle
Angle	framework/base/PAR.h	/^      Angle(int a, std::string b, std::string c, std::string d, Real e, Real f, bool g, Real h, Real i):$/;"	f	struct:ProtoMol::PAR::Angle
Angle	framework/base/PAR.h	/^    struct Angle{$/;"	s	class:ProtoMol::PAR
Angle	framework/base/PSF.h	/^      Angle():number(0),atom1(0),atom2(0),atom3(0){}$/;"	f	struct:ProtoMol::PSF::Angle
Angle	framework/base/PSF.h	/^      Angle(int a, int b, int c, int d):number(a),atom1(b),atom2(c),atom3(d){}$/;"	f	struct:ProtoMol::PSF::Angle
Angle	framework/base/PSF.h	/^    struct Angle {$/;"	s	class:ProtoMol::PSF
Angle	framework/topology/Angle.h	/^    Angle():atom1(-1),atom2(-1),atom3(-1),restAngle(0.0),forceConstant(0.0),$/;"	f	class:ProtoMol::Angle
Angle	framework/topology/Angle.h	/^  class Angle {$/;"	c	namespace:ProtoMol
AngleIndex	framework/integrators/BSplineMOLLYIntegrator.h	/^      AngleIndex(int a, int b, int c):angle(a),bond1(b),bond2(c){}$/;"	f	struct:ProtoMol::BSplineMOLLYIntegrator::AngleIndex
AngleIndex	framework/integrators/BSplineMOLLYIntegrator.h	/^    struct AngleIndex {$/;"	s	class:ProtoMol::BSplineMOLLYIntegrator
AngleInfo	framework/topology/AngleInfo.cpp	/^  AngleInfo::AngleInfo() {$/;"	f	class:ProtoMol::AngleInfo
AngleInfo	framework/topology/AngleInfo.h	/^  class AngleInfo {$/;"	c	namespace:ProtoMol
AngleSystemForce	framework/forces/AngleSystemForce.h	/^  class AngleSystemForce : public SystemForce, private AngleSystemForceBase {$/;"	c	namespace:ProtoMol
AngleSystemForceBase	framework/forces/AngleSystemForceBase.h	/^  class AngleSystemForceBase {$/;"	c	namespace:ProtoMol
AngleType	framework/topology/AngleInfo.h	/^    enum AngleType { ANGLE_VALUE  =    10001,$/;"	g	class:ProtoMol::AngleInfo
Array	framework/base/Array_Fastest.h	/^    Array<T,N>()$/;"	f	class:ProtoMol::Array
Array	framework/base/Array_Fastest.h	/^    Array<T,N>(const Array<T,N> & A)$/;"	f	class:ProtoMol::Array
Array	framework/base/Array_Fastest.h	/^  class Array$/;"	c	namespace:ProtoMol
Array	framework/base/Array_Fastest.h	/^  class Array<T,0>$/;"	c	namespace:ProtoMol
Array	framework/base/Array_Fastest.h	/^  class Array<T,1>$/;"	c	namespace:ProtoMol
Array	framework/base/Array_NoPartialSpecialization.h	/^    Array<T,N>()$/;"	f	class:ProtoMol::Array
Array	framework/base/Array_NoPartialSpecialization.h	/^    Array<T,N>(const Array<T,N> & A)$/;"	f	class:ProtoMol::Array
Array	framework/base/Array_NoPartialSpecialization.h	/^    explicit Array<T,N>(const ArraySize<N> & Dimensions, const T & Init=T())$/;"	f	class:ProtoMol::Array
Array	framework/base/Array_NoPartialSpecialization.h	/^    explicit Array<T,N>(const unsigned int * Dimensions, const T & Init=T())$/;"	f	class:ProtoMol::Array
Array	framework/base/Array_NoPartialSpecialization.h	/^  class Array$/;"	c	namespace:ProtoMol
ArrayCellListStructure	framework/topology/ArrayCellListStructure.cpp	/^  ArrayCellListStructure::ArrayCellListStructure():valid(false),$/;"	f	class:ProtoMol::ArrayCellListStructure
ArrayCellListStructure	framework/topology/ArrayCellListStructure.h	/^  class ArrayCellListStructure {$/;"	c	namespace:ProtoMol
ArraySize	framework/base/Array_Fastest.h	/^  class ArraySize$/;"	c	namespace:ProtoMol
ArraySize	framework/base/Array_NoPartialSpecialization.h	/^    ArraySize<N>(std::vector<unsigned int> & v)$/;"	f	class:ProtoMol::ArraySize
ArraySize	framework/base/Array_NoPartialSpecialization.h	/^  class ArraySize$/;"	c	namespace:ProtoMol
ArraySizes	framework/base/Array_Fastest.h	/^    explicit ArraySizes(size_t dim) $/;"	f	class:ProtoMol::ArraySizes
ArraySizes	framework/base/Array_Fastest.h	/^  class ArraySizes$/;"	c	namespace:ProtoMol
ArraySizes	framework/base/Array_NoPartialSpecialization.h	/^    explicit ArraySizes(unsigned int dim) $/;"	f	class:ProtoMol::ArraySizes
ArraySizes	framework/base/Array_NoPartialSpecialization.h	/^  class ArraySizes$/;"	c	namespace:ProtoMol
Atom	framework/base/Atom.h	/^    Atom():type(-1),$/;"	f	struct:ProtoMol::Atom
Atom	framework/base/Atom.h	/^  struct Atom {$/;"	s	namespace:ProtoMol
Atom	framework/base/PDB.cpp	/^  PDB::Atom::Atom():elementType(""),	      $/;"	f	class:ProtoMol::PDB::Atom
Atom	framework/base/PDB.cpp	/^  PDB::Atom::Atom(std::string etype,  $/;"	f	class:ProtoMol::PDB::Atom
Atom	framework/base/PDB.h	/^    struct Atom{$/;"	s	struct:ProtoMol::PDB
Atom	framework/base/PSF.h	/^      Atom():number(0),seg_id(""),residue_sequence(0),residue_name(""),$/;"	f	struct:ProtoMol::PSF::Atom
Atom	framework/base/PSF.h	/^      Atom(int a,std::string b, int c, std::string d, std::string e, std::string f, Real g, Real h, unsigned int i):$/;"	f	struct:ProtoMol::PSF::Atom
Atom	framework/base/PSF.h	/^    struct Atom {$/;"	s	class:ProtoMol::PSF
AtomType	framework/base/AtomType.h	/^    AtomType():name(""),mass(0.0),charge(0.0),symbolName("") {}$/;"	f	struct:ProtoMol::AtomType
AtomType	framework/base/AtomType.h	/^  struct AtomType {$/;"	s	namespace:ProtoMol
B	framework/topology/LennardJonesParameters.h	/^    Real A,B;$/;"	m	struct:ProtoMol::LennardJonesParameters
B14	framework/topology/LennardJonesParameters.h	/^    Real A14,B14;$/;"	m	struct:ProtoMol::LennardJonesParameters
BANKLENNARDJONESPARAMETERTABLE_H	framework/topology/BankLennardJonesParameterTable.h	3;"	d
BBKINTEGRATOR_H	framework/integrators/BBKIntegrator.h	3;"	d
BBKIntegrator	framework/integrators/BBKIntegrator.cpp	/^  BBKIntegrator::BBKIntegrator():$/;"	f	class:ProtoMol::BBKIntegrator
BBKIntegrator	framework/integrators/BBKIntegrator.cpp	/^  BBKIntegrator::BBKIntegrator(Real timestep,$/;"	f	class:ProtoMol::BBKIntegrator
BBKIntegrator	framework/integrators/BBKIntegrator.h	/^  class BBKIntegrator: public STSIntegrator {$/;"	c	namespace:ProtoMol
BERENDSEN	framework/integrators/PaulTrapIntegrator.h	/^      BERENDSEN,$/;"	e	enum:ProtoMol::ThermostatEnum::Enum
BERENDSEN_GLOBAL	framework/integrators/PaulTrapIntegrator.h	/^      BERENDSEN_GLOBAL,$/;"	e	enum:ProtoMol::ThermostatEnum::Enum
BERENDSEN_IND	framework/integrators/PaulTrapIntegrator.h	/^      BERENDSEN_IND,$/;"	e	enum:ProtoMol::ThermostatEnum::Enum
BERENDSEN_SHELL	framework/integrators/PaulTrapIntegrator.h	/^      BERENDSEN_SHELL,$/;"	e	enum:ProtoMol::ThermostatEnum::Enum
BERENDSEN_ZERO	framework/integrators/PaulTrapIntegrator.h	/^      BERENDSEN_ZERO,$/;"	e	enum:ProtoMol::ThermostatEnum::Enum
BITS	framework/base/Real.h	16;"	d
BITSPERBYTE	framework/base/Real.h	15;"	d
BOLTZMANN	framework/base/pmconstants.cpp	/^      const Real BOLTZMANN        = 1.380662e-23;   \/\/ [J\/K]$/;"	v
BOLTZMANN	framework/base/pmconstants.cpp	/^    const Real BOLTZMANN           = 0.001987191;$/;"	v
BOND	framework/base/ScalarStructure.h	/^      BOND,$/;"	e	enum:ProtoMol::ScalarStructure::Index
BOND	framework/io/PARReader.h	/^      BOND,$/;"	e	enum:ProtoMol::PARReader::PARRecordTypeEnum
BONDSYSTEMFORCEBASE_H	framework/forces/BondSystemForceBase.h	3;"	d
BONDSYSTEMFORCE_H	framework/forces/BondSystemForce.h	3;"	d
BOND_DELTAMU	framework/base/ScalarStructure.h	/^      BOND_DELTAMU,         \/\/\/< needed for iSG and oSG simulations$/;"	e	enum:ProtoMol::ScalarStructure::Index
BOND_H	framework/topology/Bond.h	3;"	d
BOOL	framework/base/ValueType.h	/^      BOOL,$/;"	e	enum:ProtoMol::ValueEnum::Enum
BORDER	framework/base/MultiGrid.h	/^  static const int BORDER = 2;$/;"	v
BORDER_TOLERANCE	framework/base/MultiGrid.h	/^  static const Real BORDER_TOLERANCE = 0.0001;$/;"	v
BObserved	framework/frontend/OutputState.h	/^    bool BObserved;$/;"	m	class:ProtoMol::OutputState
BSPLINEMOLLYINTEGRATOR_H	framework/integrators/BSplineMOLLYIntegrator.h	3;"	d
BSPLINETYPE_H	framework/base/BSplineType.h	3;"	d
BSPLINE_H	framework/base/BSpline.h	3;"	d
BSpline	framework/base/BSpline.cpp	/^  BSpline::BSpline():myInterOrder(0),theta(NULL),dTheta(NULL){$/;"	f	class:ProtoMol::BSpline
BSpline	framework/base/BSpline.cpp	/^  BSpline::BSpline(const BSpline& bspline){$/;"	f	class:ProtoMol::BSpline
BSpline	framework/base/BSpline.cpp	/^  BSpline::BSpline(unsigned int order):myInterOrder(order),$/;"	f	class:ProtoMol::BSpline
BSpline	framework/base/BSpline.cpp	/^  BSpline::BSpline(unsigned int order, Real w):myInterOrder(order),$/;"	f	class:ProtoMol::BSpline
BSpline	framework/base/BSpline.h	/^  class BSpline {$/;"	c	namespace:ProtoMol
BSplineEnum	framework/base/BSplineType.h	/^  class BSplineEnum  {$/;"	c	namespace:ProtoMol
BSplineMOLLYIntegrator	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  BSplineMOLLYIntegrator::BSplineMOLLYIntegrator() : MOLLYIntegrator(),$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
BSplineMOLLYIntegrator	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  BSplineMOLLYIntegrator::BSplineMOLLYIntegrator(int cycles,$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
BSplineMOLLYIntegrator	framework/integrators/BSplineMOLLYIntegrator.h	/^  class BSplineMOLLYIntegrator: public MOLLYIntegrator {$/;"	c	namespace:ProtoMol
BSplineType	framework/base/BSplineType.h	/^  typedef AbstractEnumType<BSplineEnum> BSplineType;$/;"	t	namespace:ProtoMol
BUILDCELLLIST_H	framework/topology/buildCellLists.h	3;"	d
BankLennardJonesParameterTable	framework/topology/BankLennardJonesParameterTable.h	/^    BankLennardJonesParameterTable(){};$/;"	f	struct:ProtoMol::BankLennardJonesParameterTable
BankLennardJonesParameterTable	framework/topology/BankLennardJonesParameterTable.h	/^  struct BankLennardJonesParameterTable {$/;"	s	namespace:ProtoMol
BinaryExponent	framework/base/mathutilities.h	/^  template <int P> struct BinaryExponent {$/;"	s	namespace:ProtoMol
BinaryExponentHelper	framework/base/mathutilities.h	/^    template<bool cmp, int A> struct BinaryExponentHelper {$/;"	s	namespace:ProtoMol::Private
BinaryExponentHelper	framework/base/mathutilities.h	/^    template<int A> struct BinaryExponentHelper<false,A> {$/;"	s	namespace:ProtoMol::Private
Bond	framework/base/PAR.h	/^      Bond(){}$/;"	f	struct:ProtoMol::PAR::Bond
Bond	framework/base/PAR.h	/^      Bond(int a, std::string b, std::string c, Real d, Real e):number(a),atom1(b),atom2(c),forceConstant(d),distance(e){}$/;"	f	struct:ProtoMol::PAR::Bond
Bond	framework/base/PAR.h	/^    struct Bond{$/;"	s	class:ProtoMol::PAR
Bond	framework/base/PSF.h	/^      Bond():number(0),atom1(0),atom2(0){}$/;"	f	struct:ProtoMol::PSF::Bond
Bond	framework/base/PSF.h	/^      Bond(int a, int b, int c):number(a),atom1(b),atom2(c){}$/;"	f	struct:ProtoMol::PSF::Bond
Bond	framework/base/PSF.h	/^    struct Bond {$/;"	s	class:ProtoMol::PSF
Bond	framework/topology/Bond.h	/^    Bond():atom1(-1),atom2(-1),springConstant(0.0),restLength(0.0),$/;"	f	class:ProtoMol::Bond
Bond	framework/topology/Bond.h	/^    Bond(int a, int b, Real c, Real d):atom1(a),atom2(b),springConstant(c),restLength(d){}$/;"	f	class:ProtoMol::Bond
Bond	framework/topology/Bond.h	/^  class Bond {$/;"	c	namespace:ProtoMol
BondIndex	framework/integrators/BSplineMOLLYIntegrator.h	/^      BondIndex(int a, int b):b1(std::min(a,b)),b2(std::max(a,b)){}$/;"	f	struct:ProtoMol::BSplineMOLLYIntegrator::BondIndex
BondIndex	framework/integrators/BSplineMOLLYIntegrator.h	/^    struct BondIndex {$/;"	s	class:ProtoMol::BSplineMOLLYIntegrator
BondSystemForce	framework/forces/BondSystemForce.h	/^  class BondSystemForce : public SystemForce, private BondSystemForceBase{$/;"	c	namespace:ProtoMol
BondSystemForceBase	framework/forces/BondSystemForceBase.h	/^  class BondSystemForceBase {$/;"	c	namespace:ProtoMol
BoundaryConditions	framework/forces/NonbondedCutoffForce.h	/^    typedef typename TOneAtomPair::BoundaryConditions BoundaryConditions;$/;"	t	class:ProtoMol::NonbondedCutoffForce
BoundaryConditions	framework/forces/NonbondedCutoffMollyForce.h	/^    typedef typename TOneAtomPair::BoundaryConditions BoundaryConditions;$/;"	t	class:ProtoMol::NonbondedCutoffMollyForce
BoundaryConditions	framework/forces/NonbondedCutoffSystemForce.h	/^    typedef typename TOneAtomPair::BoundaryConditions BoundaryConditions;$/;"	t	class:ProtoMol::NonbondedCutoffSystemForce
BoundaryConditions	framework/forces/OneAtomPair.h	/^    typedef TBoundaryConditions BoundaryConditions;$/;"	t	class:ProtoMol::OneAtomPair
BoundaryConditions	framework/forces/OneAtomPairFull.h	/^    typedef TBoundaryConditions BoundaryConditions;$/;"	t	class:ProtoMol::OneAtomPairFull
BoundaryConditions	framework/forces/OneAtomPairTwo.h	/^    typedef TBoundaryConditions BoundaryConditions;$/;"	t	class:ProtoMol::OneAtomPairTwo
BoundaryConditions	framework/forces/OneAtomPairTwoFull.h	/^    typedef TBoundaryConditions BoundaryConditions;$/;"	t	class:ProtoMol::OneAtomPairTwoFull
BoundaryConditions	framework/forces/OneMollyPair.h	/^    typedef TBoundaryConditions BoundaryConditions;$/;"	t	class:ProtoMol::OneMollyPair
BoundaryConditions	framework/forces/OneMollyPairTwo.h	/^    typedef TBoundaryConditions BoundaryConditions;$/;"	t	class:ProtoMol::OneMollyPairTwo
BoundaryConditions	framework/topology/SemiGenericTopology.h	/^    typedef TBoundaryConditions BoundaryConditions;$/;"	t	class:ProtoMol::SemiGenericTopology
C	framework/base/pmconstants.cpp	/^      const Real C                = 299792458.0;    \/\/ [m\/s]$/;"	v
C1	framework/forces/CoulombForce.h	/^    class C1 {$/;"	c	class:ProtoMol::CoulombForce
C1SWITCHINGFUNCTIONBASE_H	framework/topology/C1SwitchingFunctionBase.h	3;"	d
C1SWITCHINGFUNCTION_H	framework/topology/C1SwitchingFunction.h	3;"	d
C1SwitchingFunction	framework/topology/C1SwitchingFunction.cpp	/^  C1SwitchingFunction::C1SwitchingFunction():myCutoff(0.0),$/;"	f	class:ProtoMol::C1SwitchingFunction
C1SwitchingFunction	framework/topology/C1SwitchingFunction.cpp	/^  C1SwitchingFunction::C1SwitchingFunction(Real cutoff):myCutoff(cutoff),$/;"	f	class:ProtoMol::C1SwitchingFunction
C1SwitchingFunction	framework/topology/C1SwitchingFunction.h	/^  class C1SwitchingFunction : private C1SwitchingFunctionBase {$/;"	c	namespace:ProtoMol
C1SwitchingFunctionBase	framework/topology/C1SwitchingFunctionBase.h	/^  class C1SwitchingFunctionBase {$/;"	c	namespace:ProtoMol
C2	framework/forces/CoulombForce.h	/^    class C2 {$/;"	c	class:ProtoMol::CoulombForce
C2SWITCHINGFUNCTIONBASE_H	framework/topology/C2SwitchingFunctionBase.h	3;"	d
C2SWITCHINGFUNCTION_H	framework/topology/C2SwitchingFunction.h	3;"	d
C2SwitchingFunction	framework/topology/C2SwitchingFunction.cpp	/^  C2SwitchingFunction::C2SwitchingFunction():mySwitchon(-1.0),myCutoff(0.0){}$/;"	f	class:ProtoMol::C2SwitchingFunction
C2SwitchingFunction	framework/topology/C2SwitchingFunction.cpp	/^  C2SwitchingFunction::C2SwitchingFunction(Real switchon,Real cutoff):mySwitchon(switchon),$/;"	f	class:ProtoMol::C2SwitchingFunction
C2SwitchingFunction	framework/topology/C2SwitchingFunction.h	/^  class C2SwitchingFunction : private C2SwitchingFunctionBase {$/;"	c	namespace:ProtoMol
C2SwitchingFunctionBase	framework/topology/C2SwitchingFunctionBase.h	/^  class C2SwitchingFunctionBase {$/;"	c	namespace:ProtoMol
C3	framework/forces/CoulombForce.h	/^    class C3 {$/;"	c	class:ProtoMol::CoulombForce
C4	framework/forces/CoulombForce.h	/^    class C4 {$/;"	c	class:ProtoMol::CoulombForce
CELLLISTENUMERATOR_H	framework/topology/CellListEnumerator.h	3;"	d
CELLLISTENUMERATOR_PERDIOCBOUNDARIES_H	framework/topology/CellListEnumerator_periodicBoundaries.h	3;"	d
CELLLISTENUMERATOR_STANDARD_H	framework/topology/CellListEnumerator_standard.h	3;"	d
CHARMM19	framework/base/PAR.h	/^      CHARMM19$/;"	e	enum:ProtoMol::PAR::CharmmTypeEnum
CHARMM28	framework/base/PAR.h	/^      CHARMM28,$/;"	e	enum:ProtoMol::PAR::CharmmTypeEnum
CHDIR	framework/base/systemutilities.cpp	22;"	d	file:
CHDIR	framework/base/systemutilities.cpp	9;"	d	file:
CMPCNCNSWITCHINGFUNCTIONBASE_H	framework/topology/CmpCnCnSwitchingFunctionBase.h	3;"	d
CMPCNCNSWITCHINGFUNCTION_H	framework/topology/CmpCnCnSwitchingFunction.h	3;"	d
COMMUNICATION	framework/base/TimerStatistic.h	/^      COMMUNICATION,$/;"	e	enum:ProtoMol::TimerStatistic::Enum
COMPAREFORCE_H	framework/forces/CompareForce.h	3;"	d
COMPLEMENTSWITCHINGFUNCTIONBASE_H	framework/topology/ComplementSwitchingFunctionBase.h	3;"	d
COMPLEMENTSWITCHINGFUNCTION_H	framework/topology/ComplementSwitchingFunction.h	3;"	d
CONFIGURATIONREADER_H	framework/io/ConfigurationReader.h	3;"	d
CONFIGURATION_H	framework/base/Configuration.h	3;"	d
CONSTANTS_H	framework/base/pmconstants.h	3;"	d
CONSTRAINTVALUETYPE_H	framework/base/ConstraintValueType.h	3;"	d
COULOMB	framework/base/ScalarStructure.h	/^      COULOMB = FIRST,$/;"	e	enum:ProtoMol::ScalarStructure::Index
COULOMBEWALDREALFORCE_H	framework/forces/CoulombEwaldRealForce.h	3;"	d
COULOMBEWALDREALTABLEFORCEBASE_H	framework/forces/CoulombEwaldRealTableForceBase.h	3;"	d
COULOMBEWALDREALTABLEFORCE_H	framework/forces/CoulombEwaldRealTableForce.h	3;"	d
COULOMBFORCE_H	framework/forces/CoulombForce.h	3;"	d
COULOMBMULTIGRIDDIRECTFORCEBASE_H	framework/forces/CoulombMultiGridDirectForceBase.h	3;"	d
COULOMBMULTIGRIDDIRECTFORCE_H	framework/forces/CoulombMultiGridDirectForce.h	3;"	d
COULOMBMULTIGRIDDIRECTTABLEFORCEBASE_H	framework/forces/CoulombMultiGridDirectTableForceBase.h	3;"	d
COULOMBMULTIGRIDDIRECTTABLEFORCE_H	framework/forces/CoulombMultiGridDirectTableForce.h	3;"	d
COULOMBTABLEFORCEBASE_H	framework/forces/CoulombTableForceBase.h	3;"	d
COULOMBTABLEFORCE_H	framework/forces/CoulombTableForce.h	3;"	d
COULOMB_DELTAMU	framework/base/ScalarStructure.h	/^      COULOMB_DELTAMU,      \/\/\/< needed for iSG and oSG simulations$/;"	e	enum:ProtoMol::ScalarStructure::Index
COULOMB_FACTOR	framework/base/pmconstants.cpp	/^      const Real COULOMB_FACTOR   = C*C*1e-7;       \/\/ [Vm\/C]$/;"	v
CQFLUCTUATION	framework/base/ScalarStructure.h	/^      CQFLUCTUATION,        \/\/\/< needed for iSG and oSG simulations$/;"	e	enum:ProtoMol::ScalarStructure::Index
CRDREADER_H	framework/io/CRDReader.h	3;"	d
CRDReader	framework/io/CRDReader.cpp	/^  CRDReader::CRDReader():$/;"	f	class:ProtoMol::CRDReader
CRDReader	framework/io/CRDReader.cpp	/^  CRDReader::CRDReader(const std::string& filename):$/;"	f	class:ProtoMol::CRDReader
CRDReader	framework/io/CRDReader.h	/^  class CRDReader : public Reader {$/;"	c	namespace:ProtoMol
CUBICCELLLOCATION_H	framework/topology/CubicCellLocation.h	3;"	d
CUBICCELLMANAGER_H	framework/topology/CubicCellManager.h	3;"	d
CUTOFF	framework/forces/CoulombEwaldRealForce.h	/^    enum {CUTOFF=0};$/;"	e	enum:ProtoMol::CoulombEwaldRealForce::<anonymous>
CUTOFF	framework/forces/CoulombEwaldRealTableForce.h	/^    enum {CUTOFF=1};$/;"	e	enum:ProtoMol::CoulombEwaldRealTableForce::<anonymous>
CUTOFF	framework/forces/CoulombForce.h	/^    enum {CUTOFF=0};$/;"	e	enum:ProtoMol::CoulombForce::<anonymous>
CUTOFF	framework/forces/CoulombMultiGridDirectForce.h	/^    enum {CUTOFF=0};$/;"	e	enum:ProtoMol::CoulombMultiGridDirectForce::<anonymous>
CUTOFF	framework/forces/CoulombMultiGridDirectTableForce.h	/^    enum {CUTOFF=1};$/;"	e	enum:ProtoMol::CoulombMultiGridDirectTableForce::<anonymous>
CUTOFF	framework/forces/CoulombTableForce.h	/^    enum {CUTOFF=1};$/;"	e	enum:ProtoMol::CoulombTableForce::<anonymous>
CUTOFF	framework/forces/GravitationForce.h	/^    enum {CUTOFF=0};$/;"	e	enum:ProtoMol::GravitationForce::<anonymous>
CUTOFF	framework/forces/LennardJonesForce.h	/^    enum {CUTOFF=0};$/;"	e	enum:ProtoMol::LennardJonesForce::<anonymous>
CUTOFF	framework/forces/LennardJonesTableForce.h	/^    enum {CUTOFF=1};$/;"	e	enum:ProtoMol::LennardJonesTableForce::<anonymous>
CUTOFF	framework/forces/MagneticDipoleForce.h	/^    enum {CUTOFF=0};$/;"	e	enum:ProtoMol::MagneticDipoleForce::<anonymous>
CUTOFF	framework/topology/C1SwitchingFunction.h	/^    enum {CUTOFF=1};$/;"	e	enum:ProtoMol::C1SwitchingFunction::<anonymous>
CUTOFF	framework/topology/C2SwitchingFunction.h	/^    enum {CUTOFF=1};$/;"	e	enum:ProtoMol::C2SwitchingFunction::<anonymous>
CUTOFF	framework/topology/CmpCnCnSwitchingFunction.h	/^    enum {CUTOFF=1};$/;"	e	enum:ProtoMol::CmpCnCnSwitchingFunction::<anonymous>
CUTOFF	framework/topology/CnSwitchingFunction.h	/^    enum {CUTOFF=1};$/;"	e	enum:ProtoMol::CnSwitchingFunction::<anonymous>
CUTOFF	framework/topology/ComplementSwitchingFunction.h	/^    enum {CUTOFF=0};$/;"	e	enum:ProtoMol::ComplementSwitchingFunction::<anonymous>
CUTOFF	framework/topology/CutoffSwitchingFunction.h	/^    enum {CUTOFF=1};$/;"	e	enum:ProtoMol::CutoffSwitchingFunction::<anonymous>
CUTOFF	framework/topology/RangeSwitchingFunction.h	/^    enum {CUTOFF=TOriginalSwitchingFunction::CUTOFF};$/;"	e	enum:ProtoMol::RangeSwitchingFunction::<anonymous>
CUTOFF	framework/topology/ShiftSwitchingFunction.h	/^    enum {CUTOFF=1};$/;"	e	enum:ProtoMol::ShiftSwitchingFunction::<anonymous>
CUTOFF	framework/topology/UniversalSwitchingFunction.h	/^    enum {CUTOFF=0};$/;"	e	enum:ProtoMol::UniversalSwitchingFunction::<anonymous>
CUTOFFSWITCHINGFUNCTIONBASE_H	framework/topology/CutoffSwitchingFunctionBase.h	3;"	d
CUTOFFSWITCHINGFUNCTION_H	framework/topology/CutoffSwitchingFunction.h	3;"	d
CYCLES_H	framework/base/Cycles.h	3;"	d
Cell	framework/topology/CubicCellManager.h	/^    typedef CubicCellLocation Cell;$/;"	t	class:ProtoMol::CubicCellManager
CellListEnumerator	framework/topology/CellListEnumerator.h	/^  class CellListEnumerator {};$/;"	c	namespace:ProtoMol
CellListEnumerator	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    CellListEnumerator():myCutoff(-1.0),$/;"	f	class:ProtoMol::CellListEnumerator
CellListEnumerator	framework/topology/CellListEnumerator_periodicBoundaries.h	/^  class CellListEnumerator<PeriodicBoundaryConditions,CubicCellManager> {$/;"	c	namespace:ProtoMol
CellListEnumerator	framework/topology/CellListEnumerator_standard.h	/^    CellListEnumerator():myCutoff(-1.0),$/;"	f	class:ProtoMol::CellListEnumerator
CellListEnumerator	framework/topology/CellListEnumerator_standard.h	/^  class CellListEnumerator<VacuumBoundaryConditions,CubicCellManager> {$/;"	c	namespace:ProtoMol
CellListStructure	framework/topology/CubicCellManager.h	/^    typedef ArrayCellListStructure CellListStructure;$/;"	t	class:ProtoMol::CubicCellManager
CellManager	framework/topology/Topology.h	/^    typedef TCellManager CellManager;$/;"	t	class:ProtoMol::Topology
CellPair	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    struct CellPair {int first; int second;};$/;"	s	class:ProtoMol::CellListEnumerator
CellPair	framework/topology/CellListEnumerator_standard.h	/^    struct CellPair {int first; int second;};$/;"	s	class:ProtoMol::CellListEnumerator
CellPairType	framework/forces/NonbondedCutoffForce.h	/^    typedef typename RealTopologyType::Enumerator::CellPair CellPairType;$/;"	t	class:ProtoMol::NonbondedCutoffForce
CellPairType	framework/forces/NonbondedCutoffMollyForce.h	/^    typedef typename RealTopologyType::Enumerator::CellPair CellPairType;$/;"	t	class:ProtoMol::NonbondedCutoffMollyForce
CellPairType	framework/forces/NonbondedCutoffSystemForce.h	/^    typedef typename RealTopologyType::Enumerator::CellPair CellPairType;$/;"	t	class:ProtoMol::NonbondedCutoffSystemForce
CellPairType	framework/forces/NonbondedFullEwaldSystemForce.h	/^    typedef typename RealTopologyType::Enumerator::CellPair CellPairType;$/;"	t	class:ProtoMol::NonbondedFullEwaldSystemForce
CellPairType	framework/forces/NonbondedMultiGridSystemForce.h	/^    typedef typename RealTopologyType::Enumerator::CellPair CellPairType;$/;"	t	class:ProtoMol::NonbondedMultiGridSystemForce
CellPairType	framework/forces/NonbondedPMEwaldSystemForce.h	/^    typedef typename RealTopologyType::Enumerator::CellPair CellPairType;$/;"	t	class:ProtoMol::NonbondedPMEwaldSystemForce
CharmmTypeEnum	framework/base/PAR.h	/^    enum CharmmTypeEnum {$/;"	g	class:ProtoMol::PAR
CmpCnCnSwitchingFunction	framework/topology/CmpCnCnSwitchingFunction.cpp	/^	CmpCnCnSwitchingFunction::CmpCnCnSwitchingFunction():mySwitchon(-1.0),myCutoff(0.0),myCompoff(0.0),myOrder(0.0){}$/;"	f	class:ProtoMol::CmpCnCnSwitchingFunction
CmpCnCnSwitchingFunction	framework/topology/CmpCnCnSwitchingFunction.cpp	/^  CmpCnCnSwitchingFunction::CmpCnCnSwitchingFunction(Real switchon,Real cutoff,Real switchoff,Real order):$/;"	f	class:ProtoMol::CmpCnCnSwitchingFunction
CmpCnCnSwitchingFunction	framework/topology/CmpCnCnSwitchingFunction.h	/^  class CmpCnCnSwitchingFunction : private CmpCnCnSwitchingFunctionBase {$/;"	c	namespace:ProtoMol
CmpCnCnSwitchingFunctionBase	framework/topology/CmpCnCnSwitchingFunctionBase.h	/^  class CmpCnCnSwitchingFunctionBase {$/;"	c	namespace:ProtoMol
CnSWITCHINGFUNCTIONBASE_H	framework/topology/CnSwitchingFunctionBase.h	3;"	d
CnSWITCHINGFUNCTION_H	framework/topology/CnSwitchingFunction.h	3;"	d
CnSwitchingFunction	framework/topology/CnSwitchingFunction.cpp	/^    CnSwitchingFunction::CnSwitchingFunction( Real switchon,Real cutoff,Real$/;"	f	class:ProtoMol::CnSwitchingFunction
CnSwitchingFunction	framework/topology/CnSwitchingFunction.cpp	/^    CnSwitchingFunction::CnSwitchingFunction():mySwitchon(-1.0),myCutoff(0.0),myOrder(0.0),mySwitchoff(0.0){}$/;"	f	class:ProtoMol::CnSwitchingFunction
CnSwitchingFunction	framework/topology/CnSwitchingFunction.h	/^  class CnSwitchingFunction : private CnSwitchingFunctionBase {$/;"	c	namespace:ProtoMol
CnSwitchingFunctionBase	framework/topology/CnSwitchingFunctionBase.h	/^  class CnSwitchingFunctionBase {$/;"	c	namespace:ProtoMol
CompareError	framework/forces/CompareForce.h	/^      CompareError():absF2(0.0),rFavg(0.0),rFmax(0.0),rPE(0.0){}$/;"	f	struct:ProtoMol::CompareForce::CompareError
CompareError	framework/forces/CompareForce.h	/^      CompareError(Real a,Real b,Real c,Real d):absF2(a),rFavg(b),rFmax(c),rPE(d){}$/;"	f	struct:ProtoMol::CompareForce::CompareError
CompareError	framework/forces/CompareForce.h	/^    struct CompareError {$/;"	s	class:ProtoMol::CompareForce
CompareForce	framework/forces/CompareForce.cpp	/^  CompareForce::CompareForce(Force* actualForce, CompareForce* compareForce):myForces(new Vector3DBlock),$/;"	f	class:ProtoMol::CompareForce
CompareForce	framework/forces/CompareForce.h	/^  class CompareForce : virtual public Force {$/;"	c	namespace:ProtoMol
ComplementSwitchingFunction	framework/topology/ComplementSwitchingFunction.h	/^    ComplementSwitchingFunction(){}$/;"	f	class:ProtoMol::ComplementSwitchingFunction
ComplementSwitchingFunction	framework/topology/ComplementSwitchingFunction.h	/^    ComplementSwitchingFunction(const TOriginalSwitchingFunction sw) : myOrigFunc(sw){};$/;"	f	class:ProtoMol::ComplementSwitchingFunction
ComplementSwitchingFunction	framework/topology/ComplementSwitchingFunction.h	/^  class ComplementSwitchingFunction : private ComplementSwitchingFunctionBase {$/;"	c	namespace:ProtoMol
ComplementSwitchingFunctionBase	framework/topology/ComplementSwitchingFunctionBase.h	/^  class ComplementSwitchingFunctionBase {$/;"	c	namespace:ProtoMol
Configuration	framework/base/Configuration.h	/^  class Configuration {$/;"	c	namespace:ProtoMol
ConfigurationReader	framework/io/ConfigurationReader.cpp	/^  ConfigurationReader::ConfigurationReader():Reader(),myConfig(NULL){}$/;"	f	class:ProtoMol::ConfigurationReader
ConfigurationReader	framework/io/ConfigurationReader.cpp	/^  ConfigurationReader::ConfigurationReader(const std::string& filename):Reader(filename),myConfig(NULL){}$/;"	f	class:ProtoMol::ConfigurationReader
ConfigurationReader	framework/io/ConfigurationReader.h	/^  class ConfigurationReader : public Reader {$/;"	c	namespace:ProtoMol
Constant	framework/base/pmconstants.cpp	/^  namespace Constant {$/;"	n	namespace:ProtoMol	file:
Constant	framework/base/pmconstants.h	/^  namespace Constant {$/;"	n	namespace:ProtoMol
Constraint	framework/frontend/InputValue.h	/^    typedef typename ConstraintValueEnum::Enum2Type<constraint> Constraint;$/;"	t	class:ProtoMol::InputValue
Constraint	framework/topology/Bond.h	/^      Constraint():atom1(-1),atom2(-1),restLength(0.0){}$/;"	f	struct:ProtoMol::Bond::Constraint
Constraint	framework/topology/Bond.h	/^      Constraint(int a, int b, Real c):atom1(a),atom2(b),restLength(c){}$/;"	f	struct:ProtoMol::Bond::Constraint
Constraint	framework/topology/Bond.h	/^    struct Constraint {$/;"	s	class:ProtoMol::Bond
ConstraintValueEnum	framework/base/ConstraintValueType.h	/^  class ConstraintValueEnum {$/;"	c	namespace:ProtoMol
ConstraintValueType	framework/base/ConstraintValueType.h	/^  typedef AbstractEnumType<ConstraintValueEnum> ConstraintValueType;$/;"	t	namespace:ProtoMol
Container	framework/frontend/OutputCollection.h	/^    typedef std::list<Output*> Container;$/;"	t	class:ProtoMol::OutputCollection
Conv	framework/base/LookUpTableBase.h	/^    typedef union { TReal f; TInt i; } Conv;$/;"	t	class:ProtoMol::LookUpTableBase
CoulombEwaldRealForce	framework/forces/CoulombEwaldRealForce.cpp	/^  CoulombEwaldRealForce::CoulombEwaldRealForce():myAlpha(-1.0){}$/;"	f	class:ProtoMol::CoulombEwaldRealForce
CoulombEwaldRealForce	framework/forces/CoulombEwaldRealForce.cpp	/^  CoulombEwaldRealForce::CoulombEwaldRealForce(Real a):myAlpha(a),$/;"	f	class:ProtoMol::CoulombEwaldRealForce
CoulombEwaldRealForce	framework/forces/CoulombEwaldRealForce.h	/^  class CoulombEwaldRealForce {$/;"	c	namespace:ProtoMol
CoulombEwaldRealTableForce	framework/forces/CoulombEwaldRealTableForce.h	/^    CoulombEwaldRealTableForce():LookUpTableBase<CoulombEwaldRealTableForceBase::LookUpValues,$/;"	f	class:ProtoMol::CoulombEwaldRealTableForce
CoulombEwaldRealTableForce	framework/forces/CoulombEwaldRealTableForce.h	/^    CoulombEwaldRealTableForce(TSwitchingFunction swf, $/;"	f	class:ProtoMol::CoulombEwaldRealTableForce
CoulombEwaldRealTableForce	framework/forces/CoulombEwaldRealTableForce.h	/^  class CoulombEwaldRealTableForce : public LookUpTableBase<CoulombEwaldRealTableForceBase::LookUpValues,PRE,TReal>, $/;"	c	namespace:ProtoMol
CoulombEwaldRealTableForceBase	framework/forces/CoulombEwaldRealTableForceBase.h	/^  class CoulombEwaldRealTableForceBase {$/;"	c	namespace:ProtoMol
CoulombForce	framework/forces/CoulombForce.h	/^  class CoulombForce {$/;"	c	namespace:ProtoMol
CoulombMultiGridDirectForce	framework/forces/CoulombMultiGridDirectForce.h	/^    CoulombMultiGridDirectForce():myS(0.0){}$/;"	f	class:ProtoMol::CoulombMultiGridDirectForce
CoulombMultiGridDirectForce	framework/forces/CoulombMultiGridDirectForce.h	/^    CoulombMultiGridDirectForce(Real s):myS(s),myRS(1.0\/s){}$/;"	f	class:ProtoMol::CoulombMultiGridDirectForce
CoulombMultiGridDirectForce	framework/forces/CoulombMultiGridDirectForce.h	/^  class CoulombMultiGridDirectForce : private CoulombMultiGridDirectForceBase {$/;"	c	namespace:ProtoMol
CoulombMultiGridDirectForceBase	framework/forces/CoulombMultiGridDirectForceBase.h	/^  class CoulombMultiGridDirectForceBase {$/;"	c	namespace:ProtoMol
CoulombMultiGridDirectTableForce	framework/forces/CoulombMultiGridDirectTableForce.h	/^    CoulombMultiGridDirectTableForce():LookUpTableBase<CoulombMultiGridDirectTableForceBase::LookUpValues<TKernel>,$/;"	f	class:ProtoMol::CoulombMultiGridDirectTableForce
CoulombMultiGridDirectTableForce	framework/forces/CoulombMultiGridDirectTableForce.h	/^    CoulombMultiGridDirectTableForce(Real rc, $/;"	f	class:ProtoMol::CoulombMultiGridDirectTableForce
CoulombMultiGridDirectTableForce	framework/forces/CoulombMultiGridDirectTableForce.h	/^  class CoulombMultiGridDirectTableForce : public LookUpTableBase<CoulombMultiGridDirectTableForceBase::LookUpValues<TKernel>,PRE,TReal>, $/;"	c	namespace:ProtoMol
CoulombMultiGridDirectTableForceBase	framework/forces/CoulombMultiGridDirectTableForceBase.h	/^  class CoulombMultiGridDirectTableForceBase {$/;"	c	namespace:ProtoMol
CoulombTableForce	framework/forces/CoulombTableForce.h	/^    CoulombTableForce():LookUpTableBase<CoulombTableForceBase::LookUpValues,$/;"	f	class:ProtoMol::CoulombTableForce
CoulombTableForce	framework/forces/CoulombTableForce.h	/^    CoulombTableForce(TSwitchingFunction swf):LookUpTableBase<CoulombTableForceBase::LookUpValues,$/;"	f	class:ProtoMol::CoulombTableForce
CoulombTableForce	framework/forces/CoulombTableForce.h	/^    CoulombTableForce(TSwitchingFunction swf, $/;"	f	class:ProtoMol::CoulombTableForce
CoulombTableForce	framework/forces/CoulombTableForce.h	/^  class CoulombTableForce : public LookUpTableBase<CoulombTableForceBase::LookUpValues,PRE,TReal>, $/;"	c	namespace:ProtoMol
CoulombTableForceBase	framework/forces/CoulombTableForceBase.h	/^  class CoulombTableForceBase {$/;"	c	namespace:ProtoMol
CubicCellLocation	framework/topology/CubicCellLocation.h	/^    CubicCellLocation(int a, int b, int c) : x(a),y(b),z(c){}$/;"	f	class:ProtoMol::CubicCellLocation
CubicCellLocation	framework/topology/CubicCellLocation.h	/^    CubicCellLocation(void):x(0),y(0),z(0){}$/;"	f	class:ProtoMol::CubicCellLocation
CubicCellLocation	framework/topology/CubicCellLocation.h	/^  class CubicCellLocation {$/;"	c	namespace:ProtoMol
CubicCellManager	framework/topology/CubicCellManager.cpp	/^  CubicCellManager::CubicCellManager(Real r):myCellSize(r),$/;"	f	class:ProtoMol::CubicCellManager
CubicCellManager	framework/topology/CubicCellManager.h	/^    CubicCellManager():myCellSize(0.0){}$/;"	f	class:ProtoMol::CubicCellManager
CubicCellManager	framework/topology/CubicCellManager.h	/^  class CubicCellManager {$/;"	c	namespace:ProtoMol
Cutoff	framework/forces/oneAtomContraints.h	/^  template<> struct Cutoff<true> {$/;"	s	namespace:ProtoMol
Cutoff	framework/forces/oneAtomContraints.h	/^  template<bool flag> struct Cutoff {$/;"	s	namespace:ProtoMol
CutoffSwitchingFunction	framework/topology/CutoffSwitchingFunction.cpp	/^  CutoffSwitchingFunction::CutoffSwitchingFunction():myCutoff(0.0),myCutoff2(0.0){}$/;"	f	class:ProtoMol::CutoffSwitchingFunction
CutoffSwitchingFunction	framework/topology/CutoffSwitchingFunction.cpp	/^  CutoffSwitchingFunction::CutoffSwitchingFunction(Real cutoff):myCutoff(cutoff),myCutoff2(cutoff*cutoff){}$/;"	f	class:ProtoMol::CutoffSwitchingFunction
CutoffSwitchingFunction	framework/topology/CutoffSwitchingFunction.h	/^  class CutoffSwitchingFunction : private CutoffSwitchingFunctionBase {$/;"	c	namespace:ProtoMol
CutoffSwitchingFunctionBase	framework/topology/CutoffSwitchingFunctionBase.h	/^  class CutoffSwitchingFunctionBase {$/;"	c	namespace:ProtoMol
Cycles	framework/base/Cycles.h	/^    Cycles():myRunningFlag(false){}$/;"	f	class:ProtoMol::Cycles
Cycles	framework/base/Cycles.h	/^  class Cycles {$/;"	c	namespace:ProtoMol
DCD	tools/bccAnalyzer.cpp	/^	     DCD,$/;"	e	enum:Format::Type	file:
DCDTRAJECTORYREADER_H	framework/io/DCDTrajectoryReader.h	3;"	d
DCDTRAJECTORYWRITER_H	framework/io/DCDTrajectoryWriter.h	3;"	d
DCDTrajectoryReader	framework/io/DCDTrajectoryReader.cpp	/^  DCDTrajectoryReader::DCDTrajectoryReader():Reader(std::ios::binary),myCoords(NULL),mySwapEndian(false),myFirst(true){}$/;"	f	class:ProtoMol::DCDTrajectoryReader
DCDTrajectoryReader	framework/io/DCDTrajectoryReader.cpp	/^  DCDTrajectoryReader::DCDTrajectoryReader(const std::string& filename):Reader(std::ios::binary,filename),myCoords(NULL),mySwapEndian(false),myFirst(true){}$/;"	f	class:ProtoMol::DCDTrajectoryReader
DCDTrajectoryReader	framework/io/DCDTrajectoryReader.h	/^  class DCDTrajectoryReader : public Reader {$/;"	c	namespace:ProtoMol
DCDTrajectoryWriter	framework/io/DCDTrajectoryWriter.cpp	/^  DCDTrajectoryWriter::DCDTrajectoryWriter(Real timestep, unsigned int firststep, bool isLittleEndian):$/;"	f	class:ProtoMol::DCDTrajectoryWriter
DCDTrajectoryWriter	framework/io/DCDTrajectoryWriter.cpp	/^  DCDTrajectoryWriter::DCDTrajectoryWriter(const char* filename, Real timestep, unsigned int firststep, bool isLittleEndian):$/;"	f	class:ProtoMol::DCDTrajectoryWriter
DCDTrajectoryWriter	framework/io/DCDTrajectoryWriter.cpp	/^  DCDTrajectoryWriter::DCDTrajectoryWriter(const string& filename, Real timestep, unsigned int firststep, bool isLittleEndian):$/;"	f	class:ProtoMol::DCDTrajectoryWriter
DCDTrajectoryWriter	framework/io/DCDTrajectoryWriter.h	/^  class DCDTrajectoryWriter : public Writer {$/;"	c	namespace:ProtoMol
DEBUG	tools/rem/sequential/main.cc	20;"	d	file:
DEBUG_OUTPUTDIHEDRALS	framework/frontend/OutputDihedrals.cpp	26;"	d	file:
DEBUG_OUTPUTDIHEDRALS	framework/frontend/OutputState.cpp	26;"	d	file:
DELTATIME	framework/base/ScalarStructure.h	/^      DELTATIME,            \/\/\/< needed for iSG and oSG simulations$/;"	e	enum:ProtoMol::ScalarStructure::Index
DIHEDRAL	framework/base/ScalarStructure.h	/^      DIHEDRAL,$/;"	e	enum:ProtoMol::ScalarStructure::Index
DIHEDRAL	framework/io/PARReader.h	/^      DIHEDRAL,$/;"	e	enum:ProtoMol::PARReader::PARRecordTypeEnum
DIHEDRALHMCINTEGRATOR_H	framework/integrators/DihedralHMCIntegrator.h	3;"	d
DIHEDRALSYSTEMFORCEBASE_H	framework/forces/DihedralSystemForceBase.h	3;"	d
DIHEDRALSYSTEMFORCE_H	framework/forces/DihedralSystemForce.h	3;"	d
DIHEDRAL_DELTAMU	framework/base/ScalarStructure.h	/^      DIHEDRAL_DELTAMU,     \/\/\/< needed for iSG and oSG simulations$/;"	e	enum:ProtoMol::ScalarStructure::Index
DIST_R2	framework/forces/CoulombEwaldRealForce.h	/^    enum {DIST_R2=1};$/;"	e	enum:ProtoMol::CoulombEwaldRealForce::<anonymous>
DIST_R2	framework/forces/CoulombEwaldRealTableForce.h	/^    enum {DIST_R2=0};$/;"	e	enum:ProtoMol::CoulombEwaldRealTableForce::<anonymous>
DIST_R2	framework/forces/CoulombForce.h	/^    enum {DIST_R2=1};$/;"	e	enum:ProtoMol::CoulombForce::<anonymous>
DIST_R2	framework/forces/CoulombMultiGridDirectForce.h	/^    enum {DIST_R2=0};$/;"	e	enum:ProtoMol::CoulombMultiGridDirectForce::<anonymous>
DIST_R2	framework/forces/CoulombMultiGridDirectTableForce.h	/^    enum {DIST_R2=0};$/;"	e	enum:ProtoMol::CoulombMultiGridDirectTableForce::<anonymous>
DIST_R2	framework/forces/CoulombTableForce.h	/^    enum {DIST_R2=0};$/;"	e	enum:ProtoMol::CoulombTableForce::<anonymous>
DIST_R2	framework/forces/GravitationForce.h	/^    enum {DIST_R2=1};$/;"	e	enum:ProtoMol::GravitationForce::<anonymous>
DIST_R2	framework/forces/LennardJonesForce.h	/^    enum {DIST_R2=1};$/;"	e	enum:ProtoMol::LennardJonesForce::<anonymous>
DIST_R2	framework/forces/LennardJonesTableForce.h	/^    enum {DIST_R2=0};$/;"	e	enum:ProtoMol::LennardJonesTableForce::<anonymous>
DIST_R2	framework/forces/MagneticDipoleForce.h	/^    enum {DIST_R2=1};$/;"	e	enum:ProtoMol::MagneticDipoleForce::<anonymous>
DLMCINTEGRATOR_H	framework/integrators/DLMCIntegrator.h	3;"	d
DLMCIntegrator	framework/integrators/DLMCIntegrator.cpp	/^  DLMCIntegrator::DLMCIntegrator()    $/;"	f	class:ProtoMol::DLMCIntegrator
DLMCIntegrator	framework/integrators/DLMCIntegrator.cpp	/^  DLMCIntegrator::DLMCIntegrator(int cycles,$/;"	f	class:ProtoMol::DLMCIntegrator
DLMCIntegrator	framework/integrators/DLMCIntegrator.h	/^  class DLMCIntegrator: public MCIntegrator {$/;"	c	namespace:ProtoMol
DMDLEAPFROGINTEGRATOR_H	framework/integrators/DMDLeapfrogIntegrator.h	3;"	d
DMDLeapfrogIntegrator	framework/integrators/DMDLeapfrogIntegrator.cpp	/^  DMDLeapfrogIntegrator::DMDLeapfrogIntegrator()$/;"	f	class:ProtoMol::DMDLeapfrogIntegrator
DMDLeapfrogIntegrator	framework/integrators/DMDLeapfrogIntegrator.cpp	/^  DMDLeapfrogIntegrator::DMDLeapfrogIntegrator(Real timestep,$/;"	f	class:ProtoMol::DMDLeapfrogIntegrator
DMDLeapfrogIntegrator	framework/integrators/DMDLeapfrogIntegrator.h	/^  class DMDLeapfrogIntegrator: public STSIntegrator {$/;"	c	namespace:ProtoMol
DONE	framework/parallel/Parallel.h	/^      DONE,        \/\/\/< next() always false, when slave has nothing more to compute$/;"	e	enum:ProtoMol::Parallel::WorkState
DYNAMIC	framework/parallel/ParallelType.h	/^      DYNAMIC,         \/\/\/< Dynamic load balancing, similar to master-slave but with working master$/;"	e	enum:ProtoMol::ParallelEnum::Enum
DebugPostConstraint	framework/forces/oneAtomContraints.h	/^  struct DebugPostConstraint {$/;"	s	namespace:ProtoMol
DebugPreConstraint	framework/forces/oneAtomContraints.h	/^  struct DebugPreConstraint {$/;"	s	namespace:ProtoMol
DeltaK	framework/topology/Angle.h	/^    Real DeltaK, DeltaTheta0, Delta_ubK, Delta_ubR0;$/;"	m	class:ProtoMol::Angle
DeltaK	framework/topology/Bond.h	/^    Real DeltaK, DeltaR0;$/;"	m	class:ProtoMol::Bond
DeltaK	framework/topology/Torsion.h	/^    std::vector< Real > DeltaK, DeltaPhase;$/;"	m	class:ProtoMol::Torsion
DeltaPhase	framework/topology/Torsion.h	/^    std::vector< Real > DeltaK, DeltaPhase;$/;"	m	class:ProtoMol::Torsion
DeltaR0	framework/topology/Bond.h	/^    Real DeltaK, DeltaR0;$/;"	m	class:ProtoMol::Bond
DeltaTheta0	framework/topology/Angle.h	/^    Real DeltaK, DeltaTheta0, Delta_ubK, Delta_ubR0;$/;"	m	class:ProtoMol::Angle
Delta_ubK	framework/topology/Angle.h	/^    Real DeltaK, DeltaTheta0, Delta_ubK, Delta_ubR0;$/;"	m	class:ProtoMol::Angle
Delta_ubR0	framework/topology/Angle.h	/^    Real DeltaK, DeltaTheta0, Delta_ubK, Delta_ubR0;$/;"	m	class:ProtoMol::Angle
Details	framework/frontend/ForceFactoryDetails.h	/^    typedef ForceFactoryDetails Details;$/;"	t	class:ProtoMol::FactoryTraits
Details	framework/frontend/IntegratorFactoryDetails.h	/^    typedef IntegratorFactoryDetails Details;$/;"	t	class:ProtoMol::FactoryTraits
Details	framework/frontend/OutputFactoryDetails.h	/^    typedef OutputFactoryDetails Details;$/;"	t	class:ProtoMol::FactoryTraits
Details	framework/frontend/TopologyFactoryDetails.h	/^    typedef TopologyFactoryDetails Details;$/;"	t	class:ProtoMol::FactoryTraits
Dihedral	framework/base/PAR.h	/^      Dihedral(){}$/;"	f	struct:ProtoMol::PAR::Dihedral
Dihedral	framework/base/PAR.h	/^      Dihedral(int a, std::string b, std::string c, std::string d, std::string e, $/;"	f	struct:ProtoMol::PAR::Dihedral
Dihedral	framework/base/PAR.h	/^      Dihedral(int a, std::string b, std::string c, std::string d, std::string e, Real f, int g, Real h):$/;"	f	struct:ProtoMol::PAR::Dihedral
Dihedral	framework/base/PAR.h	/^    struct Dihedral{$/;"	s	class:ProtoMol::PAR
Dihedral	framework/base/PSF.h	/^      Dihedral():number(0),atom1(0),atom2(0),atom3(0),atom4(0){}$/;"	f	struct:ProtoMol::PSF::Dihedral
Dihedral	framework/base/PSF.h	/^      Dihedral(int a, int b, int c, int d, int e):number(a),atom1(b),atom2(c),atom3(d),atom4(e){}$/;"	f	struct:ProtoMol::PSF::Dihedral
Dihedral	framework/base/PSF.h	/^    struct Dihedral {$/;"	s	class:ProtoMol::PSF
DihedralHMCIntegrator	framework/integrators/DihedralHMCIntegrator.cpp	/^  DihedralHMCIntegrator::DihedralHMCIntegrator()    $/;"	f	class:ProtoMol::DihedralHMCIntegrator
DihedralHMCIntegrator	framework/integrators/DihedralHMCIntegrator.cpp	/^  DihedralHMCIntegrator::DihedralHMCIntegrator(int cycles,$/;"	f	class:ProtoMol::DihedralHMCIntegrator
DihedralHMCIntegrator	framework/integrators/DihedralHMCIntegrator.h	/^  class DihedralHMCIntegrator: public MTSIntegrator {$/;"	c	namespace:ProtoMol
DihedralSystemForce	framework/forces/DihedralSystemForce.h	/^  class DihedralSystemForce: public MTorsionSystemForce<TBoundaryConditions>, private DihedralSystemForceBase{$/;"	c	namespace:ProtoMol
DihedralSystemForceBase	framework/forces/DihedralSystemForceBase.h	/^  class DihedralSystemForceBase {$/;"	c	namespace:ProtoMol
Donor	framework/base/PSF.h	/^      Donor():number(0),atom1(0),atom2(0){}$/;"	f	struct:ProtoMol::PSF::Donor
Donor	framework/base/PSF.h	/^      Donor(int a, int b, int c):number(a),atom1(b),atom2(c){}$/;"	f	struct:ProtoMol::PSF::Donor
Donor	framework/base/PSF.h	/^    struct Donor {$/;"	s	class:ProtoMol::PSF
E	framework/base/LookUpTableBase.h	/^    enum{E=BinaryExponent<std::numeric_limits<TReal>::max_exponent-std::numeric_limits<TReal>::min_exponent>::N};$/;"	e	enum:ProtoMol::LookUpTableBase::<anonymous>
E1	framework/base/mathutilities.cpp	/^  const Real E1 = 0.254829592;		\/\/ Polynomial Constants used in	      $/;"	v
E2	framework/base/mathutilities.cpp	/^  const Real E2 =-0.284496736;		\/\/ Evaluation of the complementary    $/;"	v
E3	framework/base/mathutilities.cpp	/^  const Real E3 = 1.421413741;		\/\/ Error function.  		      $/;"	v
E4	framework/base/mathutilities.cpp	/^  const Real E4 =-1.453152027;		\/\/ Approximation used is that of      $/;"	v
E5	framework/base/mathutilities.cpp	/^  const Real E5 = 1.061405429;		\/\/ Abramowitz & Stegun p299.	      $/;"	v
ELECTRICFIELDFORCEBASE_H	framework/forces/ElectricFieldSystemForceBase.h	3;"	d
ELECTRICFIELDFORCE_H	framework/forces/ElectricFieldSystemForce.h	3;"	d
ELECTRON_CHARGE	framework/base/pmconstants.cpp	/^      const Real ELECTRON_CHARGE  = 1.6021892e-19;  \/\/ [C]$/;"	v
EMPTY	framework/base/ConstraintValueType.h	/^      EMPTY,$/;"	e	enum:ProtoMol::ConstraintValueEnum::Enum
ENERGYSTRUCTURE_H	framework/base/ScalarStructure.h	3;"	d
ENTRIES	framework/forces/CoulombEwaldRealTableForceBase.h	/^      enum {ENTRIES=1};$/;"	e	enum:ProtoMol::CoulombEwaldRealTableForceBase::LookUpValues::<anonymous>
ENTRIES	framework/forces/CoulombMultiGridDirectTableForceBase.h	/^      enum {ENTRIES=1};$/;"	e	enum:ProtoMol::CoulombMultiGridDirectTableForceBase::LookUpValues::<anonymous>
ENTRIES	framework/forces/CoulombTableForceBase.h	/^      enum {ENTRIES=1};$/;"	e	enum:ProtoMol::CoulombTableForceBase::LookUpValues::<anonymous>
ENTRIES	framework/forces/LennardJonesTableForceBase.h	/^      enum {ENTRIES=2};$/;"	e	enum:ProtoMol::LennardJonesTableForceBase::LookUpValues::<anonymous>
EPOCHFILETIME	framework/base/Timer.cpp	233;"	d	file:
EPOCHFILETIME	framework/base/Timer.cpp	235;"	d	file:
EPSILON	framework/base/pmconstants.cpp	/^    const Real EPSILON        = 1.0e-14;$/;"	v
EPS_GOURAUD_THRESHOLD	framework/base/pmconstants.cpp	/^    const Real EPS_GOURAUD_THRESHOLD = 0.1;$/;"	v
EPS_SMOOTH_LINE_FACTOR	framework/base/pmconstants.cpp	/^    const Real EPS_SMOOTH_LINE_FACTOR = 0.06;$/;"	v
EQUILIBRIUMMOLLYINTEGRATOR_H	framework/integrators/EquilibriumMOLLYIntegrator.h	3;"	d
EXCLUSIONTABLE_H	framework/topology/ExclusionTable.h	3;"	d
EXCLUSIONTYPE_H	framework/topology/ExclusionType.h	3;"	d
EXCLUSION_FULL	framework/topology/ExclusionTable.h	/^    EXCLUSION_FULL=2      \/\/\/< do exclude$/;"	e	enum:ProtoMol::ExclusionClass
EXCLUSION_MODIFIED	framework/topology/ExclusionTable.h	/^    EXCLUSION_MODIFIED=1, \/\/\/< do not exlcude, but modify$/;"	e	enum:ProtoMol::ExclusionClass
EXCLUSION_NONE	framework/topology/ExclusionTable.h	/^    EXCLUSION_NONE=0,     \/\/\/< do not exclude$/;"	e	enum:ProtoMol::ExclusionClass
EXTENDEDCOMPAREFORCE_H	framework/forces/ExtendedCompareForce.h	3;"	d
EXTENDEDFORCE_H	framework/forces/ExtendedForce.h	3;"	d
EXTENDEDTIMEFORCE_H	framework/forces/ExtendedTimeForce.h	3;"	d
EXTERNALGRAVITATIONSYSTEMFORCE_H	framework/forces/ExternalGravitationSystemForce.h	3;"	d
EXTERNALMAGNETICFIELDEXTENDEDFORCE_H	framework/forces/ExternalMagneticFieldExtendedForce.h	3;"	d
Eangle	framework/imd/imd.h	/^      float Eangle;$/;"	m	struct:ProtoMol::IMD::<anonymous>
Ebond	framework/imd/imd.h	/^      float Ebond;$/;"	m	struct:ProtoMol::IMD::<anonymous>
Edihe	framework/imd/imd.h	/^      float Edihe;$/;"	m	struct:ProtoMol::IMD::<anonymous>
Eelec	framework/imd/imd.h	/^      float Eelec;$/;"	m	struct:ProtoMol::IMD::<anonymous>
Eimpr	framework/imd/imd.h	/^      float Eimpr;$/;"	m	struct:ProtoMol::IMD::<anonymous>
ElectricFieldSystemForce	framework/forces/ElectricFieldSystemForce.h	/^	  ElectricFieldSystemForce<TBoundaryConditions,TSwitchingFunction,TConstraint>::ElectricFieldSystemForce():SystemForce(),myOrigin(Vector3D(0.0,0.0,0.0)),myE(0.0),myA(0.0),myC(0.0){}$/;"	f	class:ProtoMol::ElectricFieldSystemForce
ElectricFieldSystemForce	framework/forces/ElectricFieldSystemForce.h	/^  ElectricFieldSystemForce<TBoundaryConditions,TSwitchingFunction,TConstraint>::ElectricFieldSystemForce(TSwitchingFunction sF, Vector3D origin, Real e, Real a):SystemForce(),switchingFunction(sF),myOrigin(origin),myE(e),myA(a),myC(Constant::SQRTCOULOMBCONSTANT*e),mySquaredCutoff(sF.cutoffSquared()){}$/;"	f	class:ProtoMol::ElectricFieldSystemForce
ElectricFieldSystemForce	framework/forces/ElectricFieldSystemForce.h	/^  class ElectricFieldSystemForce : public SystemForce, private ElectricFieldSystemForceBase {$/;"	c	namespace:ProtoMol
ElectricFieldSystemForceBase	framework/forces/ElectricFieldSystemForceBase.h	/^  class ElectricFieldSystemForceBase {$/;"	c	namespace:ProtoMol
Empty	framework/base/ConstraintValueType.h	/^    typedef Enum2Type<EMPTY> Empty;$/;"	t	class:ProtoMol::ConstraintValueEnum
Endian	framework/base/systemutilities.cpp	/^  struct Endian {$/;"	s	namespace:ProtoMol	file:
Enum	framework/base/AbstractEnumType.h	/^    typedef typename T::Enum Enum;$/;"	t	class:ProtoMol::AbstractEnumType
Enum	framework/base/BSplineType.h	/^    enum Enum {$/;"	g	class:ProtoMol::BSplineEnum
Enum	framework/base/ConstraintValueType.h	/^    enum Enum {$/;"	g	class:ProtoMol::ConstraintValueEnum
Enum	framework/base/TimerStatistic.h	/^    enum Enum {$/;"	g	class:ProtoMol::TimerStatistic
Enum	framework/base/ValueType.h	/^    enum Enum {$/;"	g	class:ProtoMol::ValueEnum
Enum	framework/frontend/InputPosVelType.h	/^    enum Enum {$/;"	g	class:ProtoMol::InputPosVelEnum
Enum	framework/integrators/PaulTrapIntegrator.h	/^    enum Enum {$/;"	g	class:ProtoMol::ThermostatEnum
Enum	framework/parallel/ParallelType.h	/^    enum Enum {$/;"	g	class:ProtoMol::ParallelEnum
Enum	framework/topology/ExclusionType.h	/^    enum Enum {$/;"	g	class:ProtoMol::ExclusionEnum
Enum2Type	framework/base/ConstraintValueType.h	/^    struct Enum2Type{$/;"	s	class:ProtoMol::ConstraintValueEnum
Enum2ValueTraits	framework/base/ValueType.h	/^  struct Enum2ValueTraits<ValueType::BOOL>{$/;"	s	namespace:ProtoMol
Enum2ValueTraits	framework/base/ValueType.h	/^  struct Enum2ValueTraits<ValueType::FORCE>{$/;"	s	namespace:ProtoMol
Enum2ValueTraits	framework/base/ValueType.h	/^  struct Enum2ValueTraits<ValueType::INT>{$/;"	s	namespace:ProtoMol
Enum2ValueTraits	framework/base/ValueType.h	/^  struct Enum2ValueTraits<ValueType::INTEGRATOR>{$/;"	s	namespace:ProtoMol
Enum2ValueTraits	framework/base/ValueType.h	/^  struct Enum2ValueTraits<ValueType::REAL>{$/;"	s	namespace:ProtoMol
Enum2ValueTraits	framework/base/ValueType.h	/^  struct Enum2ValueTraits<ValueType::STRING>{$/;"	s	namespace:ProtoMol
Enum2ValueTraits	framework/base/ValueType.h	/^  struct Enum2ValueTraits<ValueType::UINT>{$/;"	s	namespace:ProtoMol
Enum2ValueTraits	framework/base/ValueType.h	/^  struct Enum2ValueTraits<ValueType::VECTOR3D>{$/;"	s	namespace:ProtoMol
Enum2ValueTraits	framework/base/ValueType.h	/^  struct Enum2ValueTraits<ValueType::VECTOR>{$/;"	s	namespace:ProtoMol
Enum2ValueType	framework/base/ValueType.h	/^      explicit Enum2ValueType(char const* c):str(std::string(c)){}     $/;"	f	struct:ProtoMol::ValueEnum::Enum2ValueType
Enum2ValueType	framework/base/ValueType.h	/^      explicit Enum2ValueType(std::string s):str(s){}$/;"	f	struct:ProtoMol::ValueEnum::Enum2ValueType
Enum2ValueType	framework/base/ValueType.h	/^    struct Enum2ValueType{$/;"	s	class:ProtoMol::ValueEnum
Enumerator	framework/topology/Topology.h	/^    typedef CellListEnumerator<TBoundaryConditions, TCellManager> Enumerator;$/;"	t	class:ProtoMol::Topology
EnumeratorType	framework/forces/NonbondedCutoffForce.h	/^    typedef typename RealTopologyType::Enumerator EnumeratorType;$/;"	t	class:ProtoMol::NonbondedCutoffForce
EnumeratorType	framework/forces/NonbondedCutoffMollyForce.h	/^    typedef typename RealTopologyType::Enumerator EnumeratorType;$/;"	t	class:ProtoMol::NonbondedCutoffMollyForce
EnumeratorType	framework/forces/NonbondedCutoffSystemForce.h	/^    typedef typename RealTopologyType::Enumerator EnumeratorType;$/;"	t	class:ProtoMol::NonbondedCutoffSystemForce
EnumeratorType	framework/forces/NonbondedFullEwaldSystemForce.h	/^    typedef typename RealTopologyType::Enumerator EnumeratorType;$/;"	t	class:ProtoMol::NonbondedFullEwaldSystemForce
EnumeratorType	framework/forces/NonbondedMultiGridSystemForce.h	/^    typedef typename RealTopologyType::Enumerator EnumeratorType;$/;"	t	class:ProtoMol::NonbondedMultiGridSystemForce
EnumeratorType	framework/forces/NonbondedPMEwaldSystemForce.h	/^    typedef typename RealTopologyType::Enumerator EnumeratorType;$/;"	t	class:ProtoMol::NonbondedPMEwaldSystemForce
Epot	framework/imd/imd.h	/^      float Epot;$/;"	m	struct:ProtoMol::IMD::<anonymous>
Epsilon_vel	framework/base/XSC.h	/^    Real Vol, Epsilon_vel;$/;"	m	struct:ProtoMol::XSC
EquilibriumMOLLYIntegrator	framework/integrators/EquilibriumMOLLYIntegrator.cpp	/^  EquilibriumMOLLYIntegrator::EquilibriumMOLLYIntegrator (int cycles,$/;"	f	class:ProtoMol::EquilibriumMOLLYIntegrator
EquilibriumMOLLYIntegrator	framework/integrators/EquilibriumMOLLYIntegrator.cpp	/^  EquilibriumMOLLYIntegrator::EquilibriumMOLLYIntegrator():MOLLYIntegrator(),myAveragedPositions(NULL){}$/;"	f	class:ProtoMol::EquilibriumMOLLYIntegrator
EquilibriumMOLLYIntegrator	framework/integrators/EquilibriumMOLLYIntegrator.h	/^  class EquilibriumMOLLYIntegrator: public MOLLYIntegrator {$/;"	c	namespace:ProtoMol
Eta	framework/base/XSC.h	/^    Real Eta, EtaVol, Eta_vel, EtaVol_vel, EtaLambda, EtaLambda_vel;$/;"	m	struct:ProtoMol::XSC
EtaLambda	framework/base/XSC.h	/^    Real Eta, EtaVol, Eta_vel, EtaVol_vel, EtaLambda, EtaLambda_vel;$/;"	m	struct:ProtoMol::XSC
EtaLambda_vel	framework/base/XSC.h	/^    Real Eta, EtaVol, Eta_vel, EtaVol_vel, EtaLambda, EtaLambda_vel;$/;"	m	struct:ProtoMol::XSC
EtaVol	framework/base/XSC.h	/^    Real Eta, EtaVol, Eta_vel, EtaVol_vel, EtaLambda, EtaLambda_vel;$/;"	m	struct:ProtoMol::XSC
EtaVol_vel	framework/base/XSC.h	/^    Real Eta, EtaVol, Eta_vel, EtaVol_vel, EtaLambda, EtaLambda_vel;$/;"	m	struct:ProtoMol::XSC
Eta_vel	framework/base/XSC.h	/^    Real Eta, EtaVol, Eta_vel, EtaVol_vel, EtaLambda, EtaLambda_vel;$/;"	m	struct:ProtoMol::XSC
Etot	framework/imd/imd.h	/^      float Etot;$/;"	m	struct:ProtoMol::IMD::<anonymous>
Evdw	framework/imd/imd.h	/^      float Evdw;$/;"	m	struct:ProtoMol::IMD::<anonymous>
ExclusionClass	framework/topology/ExclusionTable.h	/^  enum ExclusionClass {$/;"	g	namespace:ProtoMol
ExclusionEnum	framework/topology/ExclusionType.h	/^  class ExclusionEnum {$/;"	c	namespace:ProtoMol
ExclusionPair	framework/topology/ExclusionTable.cpp	/^  ExclusionPair::ExclusionPair():a1(-1),a2(-1),excl(EXCLUSION_NONE){}$/;"	f	class:ProtoMol::ExclusionPair
ExclusionPair	framework/topology/ExclusionTable.cpp	/^  ExclusionPair::ExclusionPair(int a,int b):a1(a),a2(b),excl(EXCLUSION_NONE){}$/;"	f	class:ProtoMol::ExclusionPair
ExclusionPair	framework/topology/ExclusionTable.cpp	/^  ExclusionPair::ExclusionPair(int a,int b, ExclusionClass c):a1(a),a2(b),excl(c){}$/;"	f	class:ProtoMol::ExclusionPair
ExclusionPair	framework/topology/ExclusionTable.h	/^  struct ExclusionPair {$/;"	s	namespace:ProtoMol
ExclusionTable	framework/topology/ExclusionTable.cpp	/^  ExclusionTable::ExclusionTable():lowDeltas(NULL),anyExclsForThisDelta(NULL),myMaxDelta(0),myCurrentSize(0),myFastDeltaMax(0){}$/;"	f	class:ProtoMol::ExclusionTable
ExclusionTable	framework/topology/ExclusionTable.h	/^  class ExclusionTable {$/;"	c	namespace:ProtoMol
ExclusionType	framework/topology/ExclusionType.h	/^  typedef AbstractEnumType<ExclusionEnum> ExclusionType;$/;"	t	namespace:ProtoMol
ExtendedCompareForce	framework/forces/ExtendedCompareForce.cpp	/^  ExtendedCompareForce::ExtendedCompareForce(Force* actualForce, CompareForce* compareForce):CompareForce(actualForce,compareForce){}$/;"	f	class:ProtoMol::ExtendedCompareForce
ExtendedCompareForce	framework/forces/ExtendedCompareForce.h	/^  class ExtendedCompareForce : public CompareForce, public ExtendedForce {$/;"	c	namespace:ProtoMol
ExtendedForce	framework/forces/ExtendedForce.h	/^    ExtendedForce():Force(){}$/;"	f	class:ProtoMol::ExtendedForce
ExtendedForce	framework/forces/ExtendedForce.h	/^  class ExtendedForce : virtual public Force {$/;"	c	namespace:ProtoMol
ExtendedTimeForce	framework/forces/ExtendedTimeForce.cpp	/^  ExtendedTimeForce::ExtendedTimeForce(Force* actualForce):TimeForce(actualForce){}$/;"	f	class:ProtoMol::ExtendedTimeForce
ExtendedTimeForce	framework/forces/ExtendedTimeForce.h	/^  class ExtendedTimeForce : public TimeForce, public ExtendedForce {$/;"	c	namespace:ProtoMol
ExternalGravitationSystemForce	framework/forces/ExternalGravitationSystemForce.cpp	/^  ExternalGravitationSystemForce::ExternalGravitationSystemForce():SystemForce(),myG(Vector3D(0.0,0.0,0.0)){}$/;"	f	class:ProtoMol::ExternalGravitationSystemForce
ExternalGravitationSystemForce	framework/forces/ExternalGravitationSystemForce.cpp	/^  ExternalGravitationSystemForce::ExternalGravitationSystemForce(const Vector3D& g):SystemForce(),myG(g){}$/;"	f	class:ProtoMol::ExternalGravitationSystemForce
ExternalGravitationSystemForce	framework/forces/ExternalGravitationSystemForce.h	/^  class ExternalGravitationSystemForce : public SystemForce {$/;"	c	namespace:ProtoMol
ExternalMagneticFieldExtendedForce	framework/forces/ExternalMagneticFieldExtendedForce.cpp	/^  ExternalMagneticFieldExtendedForce::ExternalMagneticFieldExtendedForce():ExtendedForce(),myB(Vector3D(0.0,0.0,0.0)){}$/;"	f	class:ProtoMol::ExternalMagneticFieldExtendedForce
ExternalMagneticFieldExtendedForce	framework/forces/ExternalMagneticFieldExtendedForce.cpp	/^  ExternalMagneticFieldExtendedForce::ExternalMagneticFieldExtendedForce(const Vector3D& b ):ExtendedForce(),myB(b){}$/;"	f	class:ProtoMol::ExternalMagneticFieldExtendedForce
ExternalMagneticFieldExtendedForce	framework/forces/ExternalMagneticFieldExtendedForce.h	/^  class ExternalMagneticFieldExtendedForce : public ExtendedForce {$/;"	c	namespace:ProtoMol
FACTORY_H	framework/frontend/Factory.h	3;"	d
FASTDELTAMAX	framework/base/pmconstants.cpp	/^    const int FASTDELTAMAX=32;$/;"	v
FFTCOMPLEX_H	framework/base/FFTComplex.h	3;"	d
FFTComplex	framework/base/FFTComplex.cpp	/^  FFTComplex::FFTComplex():myFFTInternal(NULL){$/;"	f	class:ProtoMol::FFTComplex
FFTComplex	framework/base/FFTComplex.h	/^  class FFTComplex {$/;"	c	namespace:ProtoMol
FFTComplexMPIFinalize	framework/base/FFTComplex.cpp	/^  void FFTComplex::FFTComplexMPIFinalize(){$/;"	f	class:ProtoMol::FFTComplex
FFTComplexMPIFinalize	framework/base/FFTComplex.cpp	/^  void FFTComplex::FFTComplexMPIFinalize(){}    $/;"	f	class:ProtoMol::FFTComplex
FFTComplexMPIInit	framework/base/FFTComplex.cpp	/^  void FFTComplex::FFTComplexMPIInit(int master){$/;"	f	class:ProtoMol::FFTComplex
FFTComplexMPIInit	framework/base/FFTComplex.cpp	/^  void FFTComplex::FFTComplexMPIInit(int){}$/;"	f	class:ProtoMol::FFTComplex
FFTInternal	framework/base/FFTComplex.cpp	/^    FFTInternal():myNX(0),myNY(0),myNZ(0),myArray(NULL),myFFTCoeff(NULL){}$/;"	f	class:ProtoMol::FFTInternal
FFTInternal	framework/base/FFTComplex.cpp	/^  class FFTInternal {$/;"	c	namespace:ProtoMol	file:
FILE_H	framework/io/File.h	3;"	d
FIRST	framework/base/BSplineType.h	/^      FIRST = 0,       \/\/ Only internal purpose$/;"	e	enum:ProtoMol::BSplineEnum::Enum
FIRST	framework/base/ConstraintValueType.h	/^      FIRST = 0,       \/\/ Used internally only$/;"	e	enum:ProtoMol::ConstraintValueEnum::Enum
FIRST	framework/base/ScalarStructure.h	/^      FIRST = 0,       \/\/ Only internal purpose$/;"	e	enum:ProtoMol::ScalarStructure::Index
FIRST	framework/base/TimerStatistic.h	/^      FIRST = 0,       \/\/ Only internal purpose$/;"	e	enum:ProtoMol::TimerStatistic::Enum
FIRST	framework/base/ValueType.h	/^      FIRST = 0,        \/\/ Used internally only$/;"	e	enum:ProtoMol::ValueEnum::Enum
FIRST	framework/frontend/InputPosVelType.h	/^      FIRST = 0,       \/\/ Used internally only$/;"	e	enum:ProtoMol::InputPosVelEnum::Enum
FIRST	framework/integrators/PaulTrapIntegrator.h	/^      FIRST = 0,       \/\/ Only internal purpose$/;"	e	enum:ProtoMol::ThermostatEnum::Enum
FIRST	framework/parallel/ParallelType.h	/^      FIRST = 0,       \/\/ Only internal purpose$/;"	e	enum:ProtoMol::ParallelEnum::Enum
FIRST	framework/topology/ExclusionType.h	/^      FIRST = 0, \/\/ Used internally only$/;"	e	enum:ProtoMol::ExclusionEnum::Enum
FORCE	framework/base/ValueType.h	/^      FORCE,$/;"	e	enum:ProtoMol::ValueEnum::Enum
FORCEFACTORYDETAILS_H	framework/frontend/ForceFactoryDetails.h	3;"	d
FORCEFACTORY_H	framework/frontend/ForceFactory.h	3;"	d
FORCEGROUP_H	framework/forces/ForceGroup.h	3;"	d
FORCES	framework/base/TimerStatistic.h	/^      FORCES,$/;"	e	enum:ProtoMol::TimerStatistic::Enum
FORCE_H	framework/forces/Force.h	3;"	d
FRICTIONEXTENDEDFORCE_H	framework/forces/FrictionExtendedForce.h	3;"	d
FSTREAM_READ_1BY1	framework/io/File.cpp	7;"	d	file:
F_OK	framework/base/systemutilities.cpp	15;"	d	file:
Factory	framework/frontend/Factory.h	/^    Factory():FactoryTraits<Type>::Details(){$/;"	f	class:ProtoMol::Factory
Factory	framework/frontend/Factory.h	/^    Factory(const Factory&){}$/;"	f	class:ProtoMol::Factory
Factory	framework/frontend/Factory.h	/^  class Factory : public FactoryTraits<Type>::Details{    $/;"	c	namespace:ProtoMol
FactoryBase	framework/frontend/Factory.h	/^    FactoryBase():myCache(false){$/;"	f	class:ProtoMol::FactoryBase
FactoryBase	framework/frontend/Factory.h	/^    FactoryBase(const FactoryBase&){}$/;"	f	class:ProtoMol::FactoryBase
FactoryBase	framework/frontend/Factory.h	/^  class FactoryBase {$/;"	c	namespace:ProtoMol
FactoryTraits	framework/frontend/ForceFactoryDetails.h	/^  class FactoryTraits<Force> {$/;"	c	namespace:ProtoMol
FactoryTraits	framework/frontend/IntegratorFactoryDetails.h	/^  class FactoryTraits<Integrator> {$/;"	c	namespace:ProtoMol
FactoryTraits	framework/frontend/OutputFactoryDetails.h	/^  class FactoryTraits<Output> {$/;"	c	namespace:ProtoMol
FactoryTraits	framework/frontend/TopologyFactoryDetails.h	/^  class FactoryTraits<GenericTopology> {$/;"	c	namespace:ProtoMol
File	framework/io/File.cpp	/^  File::File(std::ios::openmode mode):myMode(mode),myFilename(""),myComment(""){}$/;"	f	class:ProtoMol::File
File	framework/io/File.cpp	/^  File::File(std::ios::openmode mode,const string& filename):myMode(mode),myFilename(filename),myComment(""){}$/;"	f	class:ProtoMol::File
File	framework/io/File.h	/^    File(){} \/\/ Force to use one of the constructors below$/;"	f	class:ProtoMol::File
File	framework/io/File.h	/^  class File {$/;"	c	namespace:ProtoMol
Float	framework/base/typeSelection.h	/^    template<unsigned int size> struct Float {$/;"	s	namespace:ProtoMol::TypeSelection
Force	framework/base/ValueType.h	/^    typedef Enum2ValueType<FORCE> Force;$/;"	t	class:ProtoMol::ValueEnum
Force	framework/forces/Force.h	/^    Force(){}$/;"	f	class:ProtoMol::Force
Force	framework/forces/Force.h	/^  class Force : public Makeable{$/;"	c	namespace:ProtoMol
ForceFactory	framework/frontend/ForceFactory.h	/^  typedef Factory<Force> ForceFactory;$/;"	t	namespace:ProtoMol
ForceFactoryDetails	framework/frontend/ForceFactoryDetails.cpp	/^  ForceFactoryDetails::ForceFactoryDetails():FactoryBase<Force>(),myLastCompareForce(NULL){$/;"	f	class:ProtoMol::ForceFactoryDetails
ForceFactoryDetails	framework/frontend/ForceFactoryDetails.cpp	/^  ForceFactoryDetails::ForceFactoryDetails(const ForceFactoryDetails&){}$/;"	f	class:ProtoMol::ForceFactoryDetails
ForceFactoryDetails	framework/frontend/ForceFactoryDetails.h	/^  class ForceFactoryDetails : public FactoryBase <Force> {$/;"	c	namespace:ProtoMol
ForceGroup	framework/forces/ForceGroup.cpp	/^  ForceGroup::ForceGroup() {}$/;"	f	class:ProtoMol::ForceGroup
ForceGroup	framework/forces/ForceGroup.h	/^  class ForceGroup {$/;"	c	namespace:ProtoMol
ForceType	framework/frontend/ForceFactoryDetails.h	/^    struct ForceType {$/;"	s	class:ProtoMol::ForceFactoryDetails
Format	tools/bccAnalyzer.cpp	/^struct Format{$/;"	s	file:
FrictionExtendedForce	framework/forces/FrictionExtendedForce.cpp	/^  FrictionExtendedForce::FrictionExtendedForce():ExtendedForce(),myF(0.0), myRnd(Vector3D(0.0,0.0,0.0)){}$/;"	f	class:ProtoMol::FrictionExtendedForce
FrictionExtendedForce	framework/forces/FrictionExtendedForce.cpp	/^  FrictionExtendedForce::FrictionExtendedForce(Real f, const Vector3D& random):ExtendedForce(),myF(f), myRnd(random){}$/;"	f	class:ProtoMol::FrictionExtendedForce
FrictionExtendedForce	framework/forces/FrictionExtendedForce.h	/^  class FrictionExtendedForce : public ExtendedForce {$/;"	c	namespace:ProtoMol
GENERICTOPOLOGY_H	framework/topology/GenericTopology.h	3;"	d
GRAVITATIONFORCE_H	framework/forces/GravitationForce.h	3;"	d
GRID_H	framework/base/Grid.h	3;"	d
GenericTopology	framework/topology/GenericTopology.cpp	/^  GenericTopology::GenericTopology():Makeable(),$/;"	f	class:ProtoMol::GenericTopology
GenericTopology	framework/topology/GenericTopology.cpp	/^  GenericTopology::GenericTopology(Real c, const ExclusionType& e):Makeable(),$/;"	f	class:ProtoMol::GenericTopology
GenericTopology	framework/topology/GenericTopology.h	/^  class GenericTopology : public Makeable{$/;"	c	namespace:ProtoMol
GetRefArray	framework/base/Array_Fastest.h	/^    RefArray<T,N> GetRefArray() $/;"	f	class:ProtoMol::Array
GetRefArray	framework/base/Array_Fastest.h	/^    const RefArray<T,N> GetRefArray() const $/;"	f	class:ProtoMol::Array
GetRefArray	framework/base/Array_NoPartialSpecialization.h	/^    RefArray<N> GetRefArray() $/;"	f	class:ProtoMol::Array
GetRefArray	framework/base/Array_NoPartialSpecialization.h	/^    const RefArray<N> GetRefArray() const $/;"	f	class:ProtoMol::Array
GravitationForce	framework/forces/GravitationForce.h	/^    GravitationForce():myG(0.0){}$/;"	f	class:ProtoMol::GravitationForce
GravitationForce	framework/forces/GravitationForce.h	/^    GravitationForce(Real g):myG(g){}$/;"	f	class:ProtoMol::GravitationForce
GravitationForce	framework/forces/GravitationForce.h	/^  class GravitationForce {$/;"	c	namespace:ProtoMol
Grid	framework/base/Grid.h	/^  Grid<TInterpolation>::Grid(): $/;"	f	class:ProtoMol::Grid
Grid	framework/base/Grid.h	/^  class Grid {$/;"	c	namespace:ProtoMol
H	framework/base/ReducedHessAngle.h	/^    Matrix3by3 H[3][3];$/;"	m	class:ProtoMol::ReducedHessAngle
HAPTICSYSTEMFORCEBASE_H	framework/imd/HapticSystemForceBase.h	3;"	d
HAPTICSYSTEMFORCE_H	framework/imd/HapticSystemForce.h	3;"	d
HARMDIHEDRALSYSTEMFORCEBASE_H	framework/forces/HarmDihedralSystemForceBase.h	3;"	d
HARMDIHEDRALSYSTEMFORCE_H	framework/forces/HarmDihedralSystemForce.h	3;"	d
HAVE_INTTYPES_H	protomol_config.h	20;"	d
HAVE_LIBICE	protomol_config.h	48;"	d
HAVE_LIBPNG	protomol_config.h	51;"	d
HAVE_LIBSM	protomol_config.h	54;"	d
HAVE_LIBX11	protomol_config.h	60;"	d
HAVE_LIBXEXT	protomol_config.h	63;"	d
HAVE_LIBXI	protomol_config.h	66;"	d
HAVE_LIBXMU	protomol_config.h	69;"	d
HAVE_LIBXT	protomol_config.h	72;"	d
HAVE_MEMORY_H	protomol_config.h	75;"	d
HAVE_STDINT_H	protomol_config.h	81;"	d
HAVE_STDLIB_H	protomol_config.h	84;"	d
HAVE_STRINGS_H	protomol_config.h	87;"	d
HAVE_STRING_H	protomol_config.h	90;"	d
HAVE_SYS_STAT_H	protomol_config.h	93;"	d
HAVE_SYS_TIME_H	protomol_config.h	96;"	d
HAVE_SYS_TYPES_H	protomol_config.h	99;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	118;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	140;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	165;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	185;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	211;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	230;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	241;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	261;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	279;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	294;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	325;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	342;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	361;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	377;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	394;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	413;"	d
HAVE_TICK_COUNTER	framework/base/Cycles.h	429;"	d
HAVE_UNISTD_H	protomol_config.h	105;"	d
HBOND	framework/io/PARReader.h	/^      HBOND$/;"	e	enum:ProtoMol::PARReader::PARRecordTypeEnum
HBondConstraint	framework/forces/oneAtomContraints.h	/^  struct HBondConstraint {$/;"	s	namespace:ProtoMol
HEADERSIZE	framework/imd/imd.cpp	15;"	d	file:
HELPTEXTFACTORY_H	framework/frontend/HelpTextFactory.h	3;"	d
HERMITE_H	framework/base/Hermite.h	3;"	d
HIBITI	framework/base/Real.h	17;"	d
HMCINTEGRATOR_H	framework/integrators/HMCIntegrator.h	3;"	d
HMCIntegrator	framework/integrators/HMCIntegrator.cpp	/^    HMCIntegrator::HMCIntegrator()    $/;"	f	class:ProtoMol::HMCIntegrator
HMCIntegrator	framework/integrators/HMCIntegrator.cpp	/^    HMCIntegrator::HMCIntegrator(int cycles,$/;"	f	class:ProtoMol::HMCIntegrator
HMCIntegrator	framework/integrators/HMCIntegrator.h	/^  class HMCIntegrator: public MCIntegrator {$/;"	c	namespace:ProtoMol
HapticSystemForce	framework/imd/HapticSystemForce.cpp	/^  HapticSystemForce::HapticSystemForce():SystemForce(),$/;"	f	class:ProtoMol::HapticSystemForce
HapticSystemForce	framework/imd/HapticSystemForce.cpp	/^  HapticSystemForce::HapticSystemForce(int port, int trate, int timeout, $/;"	f	class:ProtoMol::HapticSystemForce
HapticSystemForce	framework/imd/HapticSystemForce.h	/^  class HapticSystemForce : public SystemForce {$/;"	c	namespace:ProtoMol
HapticSystemForceBase	framework/imd/HapticSystemForceBase.h	/^class HapticSystemForceBase {$/;"	c
HarmDihedralSystemForce	framework/forces/HarmDihedralSystemForce.h	/^    HarmDihedralSystemForce( Real kbias, int dihedral, Real dihedralReference, bool other) : k(kbias),myDihedral(dihedral),$/;"	f	class:ProtoMol::HarmDihedralSystemForce
HarmDihedralSystemForce	framework/forces/HarmDihedralSystemForce.h	/^    HarmDihedralSystemForce(): k(1), myDihedral(0), myDihedralReference(0.0),$/;"	f	class:ProtoMol::HarmDihedralSystemForce
HarmDihedralSystemForce	framework/forces/HarmDihedralSystemForce.h	/^  class HarmDihedralSystemForce: public MTorsionSystemForce<TBoundaryConditions>, private HarmDihedralSystemForceBase {$/;"	c	namespace:ProtoMol
HarmDihedralSystemForceBase	framework/forces/HarmDihedralSystemForceBase.h	/^  class HarmDihedralSystemForceBase {$/;"	c	namespace:ProtoMol
Hbond	framework/base/PAR.h	/^      Hbond(){}$/;"	f	struct:ProtoMol::PAR::Hbond
Hbond	framework/base/PAR.h	/^      Hbond(int a, std::string b, std::string c, Real d, Real e):number(a),atom1(b),atom2(c),emin(d),rmin(e){}$/;"	f	struct:ProtoMol::PAR::Hbond
Hbond	framework/base/PAR.h	/^    struct Hbond{$/;"	s	class:ProtoMol::PAR
HelpText	framework/frontend/HelpTextFactory.h	/^  struct HelpText {$/;"	s	namespace:ProtoMol
HelpTextFactory	framework/frontend/HelpTextFactory.cpp	/^  HelpTextFactory::HelpTextFactory(){}$/;"	f	class:ProtoMol::HelpTextFactory
HelpTextFactory	framework/frontend/HelpTextFactory.cpp	/^  HelpTextFactory::HelpTextFactory(const HelpTextFactory&){}$/;"	f	class:ProtoMol::HelpTextFactory
HelpTextFactory	framework/frontend/HelpTextFactory.h	/^  class HelpTextFactory {    $/;"	c	namespace:ProtoMol
HelpTextMapType	framework/frontend/HelpTextFactory.h	/^    typedef std::map<std::string,HelpText,ltstrNocase> HelpTextMapType;$/;"	t	class:ProtoMol::HelpTextFactory
Hermite	framework/base/Hermite.cpp	/^  Hermite::Hermite():myInterOrder(0),$/;"	f	class:ProtoMol::Hermite
Hermite	framework/base/Hermite.cpp	/^  Hermite::Hermite(const Hermite& Hermite){$/;"	f	class:ProtoMol::Hermite
Hermite	framework/base/Hermite.cpp	/^  Hermite::Hermite(unsigned int order):myInterOrder(order),$/;"	f	class:ProtoMol::Hermite
Hermite	framework/base/Hermite.cpp	/^  Hermite::Hermite(unsigned int order, Real w):myInterOrder(order),$/;"	f	class:ProtoMol::Hermite
Hermite	framework/base/Hermite.h	/^  class Hermite {$/;"	c	namespace:ProtoMol
Hessian	framework/forces/ReducedHessTraits.h	/^    typedef ReducedHessCoulomb Hessian;$/;"	t	struct:ProtoMol::ReducedHessTraits
Hessian	framework/forces/ReducedHessTraits.h	/^    typedef ReducedHessLennardJones Hessian;$/;"	t	struct:ProtoMol::ReducedHessTraits
Holder	framework/base/Value.h	/^      Holder(const Holder& rhs):holder(rhs.holder),ok(rhs.ok){}$/;"	f	class:ProtoMol::Value::Holder
Holder	framework/base/Value.h	/^      Holder(const typename ValueTrait::RepType& v, bool def=true):holder(def?v:ValueTrait::init()),ok(ValueTrait::check(Constraint(),v) && def){}$/;"	f	class:ProtoMol::Value::Holder
Holder	framework/base/Value.h	/^    class Holder : public PlaceHolder {$/;"	c	class:ProtoMol::Value
HydrogenBond	framework/integrators/EquilibriumMOLLYIntegrator.h	/^    struct HydrogenBond {$/;"	s	class:ProtoMol::EquilibriumMOLLYIntegrator
IDLE	framework/base/TimerStatistic.h	/^      IDLE,$/;"	e	enum:ProtoMol::TimerStatistic::Enum
IGNORE_WATER	framework/topology/topologyutilities.h	/^  enum waterOption {IGNORE_WATER, ONLY_WATER, ALL};$/;"	e	enum:ProtoMol::waterOption
IMD	framework/imd/imd.cpp	/^  namespace IMD {$/;"	n	namespace:ProtoMol	file:
IMD	framework/imd/imd.h	/^  namespace IMD {$/;"	n	namespace:ProtoMol
IMD	framework/imd/vmdsock.cpp	/^  namespace IMD {$/;"	n	namespace:ProtoMol	file:
IMD	framework/imd/vmdsock.h	/^  namespace IMD {$/;"	n	namespace:ProtoMol
IMDELF	framework/imd/IMDElf.h	3;"	d
IMDElf	framework/imd/IMDElf.cpp	/^  IMDElf::IMDElf():trate(1),timeout(1000),wait_imd(0),sock(NULL),clientsock(NULL){}$/;"	f	class:ProtoMol::IMDElf
IMDElf	framework/imd/IMDElf.h	/^  class IMDElf {$/;"	c	namespace:ProtoMol
IMDEnergies	framework/imd/imd.h	/^    } IMDEnergies;$/;"	t	namespace:ProtoMol::IMD
IMDType	framework/imd/imd.h	/^    enum IMDType {$/;"	g	namespace:ProtoMol::IMD
IMDVERSION	framework/imd/imd.cpp	16;"	d	file:
IMD_DISCONNECT	framework/imd/imd.h	/^      IMD_DISCONNECT,$/;"	e	enum:ProtoMol::IMD::IMDType
IMD_ENERGIES	framework/imd/imd.h	/^      IMD_ENERGIES, $/;"	e	enum:ProtoMol::IMD::IMDType
IMD_FCOORDS	framework/imd/imd.h	/^      IMD_FCOORDS,   $/;"	e	enum:ProtoMol::IMD::IMDType
IMD_GO	framework/imd/imd.h	/^      IMD_GO,$/;"	e	enum:ProtoMol::IMD::IMDType
IMD_H	framework/imd/imd.h	3;"	d
IMD_HANDSHAKE	framework/imd/imd.h	/^      IMD_HANDSHAKE, $/;"	e	enum:ProtoMol::IMD::IMDType
IMD_IOERROR	framework/imd/imd.h	/^      IMD_IOERROR$/;"	e	enum:ProtoMol::IMD::IMDType
IMD_KILL	framework/imd/imd.h	/^      IMD_KILL,      $/;"	e	enum:ProtoMol::IMD::IMDType
IMD_MDCOMM	framework/imd/imd.h	/^      IMD_MDCOMM,    $/;"	e	enum:ProtoMol::IMD::IMDType
IMD_PAUSE	framework/imd/imd.h	/^      IMD_PAUSE,$/;"	e	enum:ProtoMol::IMD::IMDType
IMD_TRATE	framework/imd/imd.h	/^      IMD_TRATE,$/;"	e	enum:ProtoMol::IMD::IMDType
IMDheader	framework/imd/imd.cpp	/^    } IMDheader;$/;"	t	namespace:ProtoMol::IMD	file:
IMPROPER	framework/base/ScalarStructure.h	/^      IMPROPER,$/;"	e	enum:ProtoMol::ScalarStructure::Index
IMPROPER	framework/io/PARReader.h	/^      IMPROPER,$/;"	e	enum:ProtoMol::PARReader::PARRecordTypeEnum
IMPROPERSYSTEMFORCEBASE_H	framework/forces/ImproperSystemForceBase.h	3;"	d
IMPROPERSYSTEMFORCE_H	framework/forces/ImproperSystemForce.h	3;"	d
IMPROPER_DELTAMU	framework/base/ScalarStructure.h	/^      IMPROPER_DELTAMU,     \/\/\/< needed for iSG and oSG simulations$/;"	e	enum:ProtoMol::ScalarStructure::Index
IMPULSEINTEGRATOR_H	framework/integrators/ImpulseIntegrator.h	3;"	d
INCR_SIZE	framework/base/Stack.h	/^    static const unsigned int INCR_SIZE=50;$/;"	m	class:ProtoMol::Stack
INLINE_ELAPSED	framework/base/Cycles.h	104;"	d
INPUTPOSVELTYPE_H	framework/frontend/InputPosVelType.h	3;"	d
INPUTPOSVEL_H	framework/frontend/InputPosVel.h	3;"	d
INPUTVALUEDEFINITIONS_H	framework/frontend/inputValueDefinitions.h	3;"	d
INPUTVALUE_H	framework/frontend/InputValue.h	3;"	d
INT	framework/base/ValueType.h	/^      INT,$/;"	e	enum:ProtoMol::ValueEnum::Enum
INT32_TYPE	protomol_config.h	111;"	d
INT32_TYPE	protomol_config_windows.h	4;"	d
INT32_TYPE	protomol_config_windows.h	6;"	d
INTEGRATOR	framework/base/ScalarStructure.h	/^      INTEGRATOR,$/;"	e	enum:ProtoMol::ScalarStructure::Index
INTEGRATOR	framework/base/TimerStatistic.h	/^      INTEGRATOR,$/;"	e	enum:ProtoMol::TimerStatistic::Enum
INTEGRATOR	framework/base/ValueType.h	/^      INTEGRATOR,       \/\/ Extended types start here, which act like a STRING      $/;"	e	enum:ProtoMol::ValueEnum::Enum
INTEGRATORDEFINITION_H	framework/integrators/IntegratorDefinition.h	3;"	d
INTEGRATORFACTORYDETAILS_H	framework/frontend/IntegratorFactoryDetails.h	3;"	d
INTEGRATORFACTORY_H	framework/frontend/IntegratorFactory.h	3;"	d
INTEGRATOR_H	framework/integrators/Integrator.h	3;"	d
INV_TIMEFACTOR	framework/base/pmconstants.cpp	/^    const Real INV_TIMEFACTOR = 0.02045482828087295; \/\/  1 \/ TIMEFACTOR$/;"	v
ISLITTLEENDIAN	framework/base/systemutilities.cpp	/^  const bool ISLITTLEENDIAN = Endian::isLittleEndian();$/;"	v
IVMDSOCK_H	framework/imd/vmdsock.h	3;"	d
Improper	framework/base/PAR.h	/^      Improper(){}$/;"	f	struct:ProtoMol::PAR::Improper
Improper	framework/base/PAR.h	/^      Improper(int a, std::string b, std::string c, std::string d, std::string e, Real f, int g, Real h):$/;"	f	struct:ProtoMol::PAR::Improper
Improper	framework/base/PAR.h	/^    struct Improper{$/;"	s	class:ProtoMol::PAR
Improper	framework/base/PSF.h	/^      Improper():number(0),atom1(0),atom2(0),atom3(0),atom4(0){}$/;"	f	struct:ProtoMol::PSF::Improper
Improper	framework/base/PSF.h	/^      Improper(int a, int b, int c, int d, int e):number(a),atom1(b),atom2(c),atom3(d),atom4(e){}$/;"	f	struct:ProtoMol::PSF::Improper
Improper	framework/base/PSF.h	/^    struct Improper {$/;"	s	class:ProtoMol::PSF
ImproperSystemForce	framework/forces/ImproperSystemForce.h	/^  class ImproperSystemForce: public MTorsionSystemForce<TBoundaryConditions>, private ImproperSystemForceBase {$/;"	c	namespace:ProtoMol
ImproperSystemForceBase	framework/forces/ImproperSystemForceBase.h	/^  class ImproperSystemForceBase {$/;"	c	namespace:ProtoMol
ImpulseIntegrator	framework/integrators/ImpulseIntegrator.cpp	/^  ImpulseIntegrator::ImpulseIntegrator():MTSIntegrator(){}$/;"	f	class:ProtoMol::ImpulseIntegrator
ImpulseIntegrator	framework/integrators/ImpulseIntegrator.cpp	/^  ImpulseIntegrator::ImpulseIntegrator(int cycles, $/;"	f	class:ProtoMol::ImpulseIntegrator
ImpulseIntegrator	framework/integrators/ImpulseIntegrator.h	/^  class ImpulseIntegrator : public MTSIntegrator {$/;"	c	namespace:ProtoMol
Index	framework/base/ScalarStructure.h	/^    enum Index {$/;"	g	class:ProtoMol::ScalarStructure
Init	framework/base/Array_Fastest.h	/^    bool resize(const size_t (&Dimensions)[N], const T & Init=T(), bool PreserveElems=false)$/;"	m	class:ProtoMol::Array
Init	framework/base/Array_Fastest.h	/^    explicit Array<T,N>(const size_t (&Dimensions)[N], const T & Init=T())$/;"	m	class:ProtoMol::Array
InputPosVel	framework/frontend/InputPosVel.cpp	/^  InputPosVel::InputPosVel():myFilename(""),myOk(true),myType(InputPosVelType::UNDEFINED){}$/;"	f	class:ProtoMol::InputPosVel
InputPosVel	framework/frontend/InputPosVel.cpp	/^  InputPosVel::InputPosVel(const string& filename):myFilename(filename),myOk(isAccessible(filename)),myType(InputPosVelType::UNDEFINED){}$/;"	f	class:ProtoMol::InputPosVel
InputPosVel	framework/frontend/InputPosVel.h	/^  class InputPosVel {$/;"	c	namespace:ProtoMol
InputPosVelEnum	framework/frontend/InputPosVelType.h	/^  class InputPosVelEnum {$/;"	c	namespace:ProtoMol
InputPosVelType	framework/frontend/InputPosVelType.h	/^  typedef AbstractEnumType<InputPosVelEnum> InputPosVelType;$/;"	t	namespace:ProtoMol
InputValue	framework/frontend/InputValue.h	/^    InputValue():myValue(typename Type::Type(),Constraint(),Value::undefined){}$/;"	f	class:ProtoMol::InputValue
InputValue	framework/frontend/InputValue.h	/^    explicit InputValue(const T& v):myValue(Type(),Constraint(),v,true){}$/;"	f	class:ProtoMol::InputValue
InputValue	framework/frontend/InputValue.h	/^    explicit InputValue(const char* v):myValue(Type(),Constraint(),std::string(v),true){}$/;"	f	class:ProtoMol::InputValue
InputValue	framework/frontend/InputValue.h	/^  class InputValue : public TBase {$/;"	c	namespace:ProtoMol
Int	framework/base/typeSelection.h	/^    template<unsigned int size> struct Int {$/;"	s	namespace:ProtoMol::TypeSelection
Int3D	framework/base/Grid.h	/^    struct Int3D {int x; int y; int z;};$/;"	s	class:ProtoMol::Grid
Int3D	framework/base/MultiGrid.h	/^    struct Int3D  {int x, y, z;};$/;"	s	class:ProtoMol::MultiGrid
Integrator	framework/base/ValueType.h	/^    typedef Enum2ValueType<INTEGRATOR> Integrator;$/;"	t	class:ProtoMol::ValueEnum
Integrator	framework/integrators/Integrator.cpp	/^  Integrator::Integrator():$/;"	f	class:ProtoMol::Integrator
Integrator	framework/integrators/Integrator.cpp	/^  Integrator::Integrator(ForceGroup* forceGroup):$/;"	f	class:ProtoMol::Integrator
Integrator	framework/integrators/Integrator.h	/^  class Integrator : public Makeable {$/;"	c	namespace:ProtoMol
IntegratorDefinition	framework/integrators/IntegratorDefinition.h	/^    IntegratorDefinition(){}$/;"	f	struct:ProtoMol::IntegratorDefinition
IntegratorDefinition	framework/integrators/IntegratorDefinition.h	/^    IntegratorDefinition(const MakeableDefinition& i,const std::vector<MakeableDefinition>& f):$/;"	f	struct:ProtoMol::IntegratorDefinition
IntegratorDefinition	framework/integrators/IntegratorDefinition.h	/^  struct IntegratorDefinition {$/;"	s	namespace:ProtoMol
IntegratorFactory	framework/frontend/IntegratorFactory.h	/^  typedef Factory<Integrator> IntegratorFactory;$/;"	t	namespace:ProtoMol
IntegratorFactoryDetails	framework/frontend/IntegratorFactoryDetails.cpp	/^  IntegratorFactoryDetails::IntegratorFactoryDetails():FactoryBase<Integrator>(){$/;"	f	class:ProtoMol::IntegratorFactoryDetails
IntegratorFactoryDetails	framework/frontend/IntegratorFactoryDetails.cpp	/^  IntegratorFactoryDetails::IntegratorFactoryDetails(const IntegratorFactoryDetails&){}$/;"	f	class:ProtoMol::IntegratorFactoryDetails
IntegratorFactoryDetails	framework/frontend/IntegratorFactoryDetails.h	/^  class IntegratorFactoryDetails : public FactoryBase <Integrator> {$/;"	c	namespace:ProtoMol
IntegratorInput	framework/frontend/IntegratorFactoryDetails.h	/^      IntegratorInput():prototype(NULL){}$/;"	f	struct:ProtoMol::IntegratorFactoryDetails::IntegratorInput
IntegratorInput	framework/frontend/IntegratorFactoryDetails.h	/^    struct IntegratorInput {$/;"	s	class:ProtoMol::IntegratorFactoryDetails
Interpolation3D	framework/base/Grid.h	/^      Interpolation3D(){};$/;"	f	struct:ProtoMol::Grid::Interpolation3D
Interpolation3D	framework/base/Grid.h	/^      Interpolation3D(unsigned int order):x(order),y(order),z(order){}$/;"	f	struct:ProtoMol::Grid::Interpolation3D
Interpolation3D	framework/base/Grid.h	/^    struct Interpolation3D {$/;"	s	class:ProtoMol::Grid
Interpolation3D	framework/base/MultiGrid.h	/^      Interpolation3D(){};$/;"	f	struct:ProtoMol::MultiGrid::Interpolation3D
Interpolation3D	framework/base/MultiGrid.h	/^      Interpolation3D(unsigned int order):x(order),y(order),z(order){};$/;"	f	struct:ProtoMol::MultiGrid::Interpolation3D
Interpolation3D	framework/base/MultiGrid.h	/^    struct Interpolation3D {$/;"	s	class:ProtoMol::MultiGrid
KCAL	framework/base/pmconstants.cpp	/^      const Real KCAL             = 1.0\/4184.0;     \/\/ [J]$/;"	v
LAGRANGE_H	framework/base/Lagrange.h	3;"	d
LAMBDA_TEMPERATURE	framework/base/ScalarStructure.h	/^      LAMBDA_TEMPERATURE,   \/\/\/< needed for iSG and oSG simulations$/;"	e	enum:ProtoMol::ScalarStructure::Index
LANGEVINIMPULSEINTEGRATOR_H	framework/integrators/LangevinImpulseIntegrator.h	3;"	d
LAST	framework/base/BSplineType.h	/^      LAST             \/\/ Only internal purpose$/;"	e	enum:ProtoMol::BSplineEnum::Enum
LAST	framework/base/ConstraintValueType.h	/^      LAST              \/\/ Used internally only$/;"	e	enum:ProtoMol::ConstraintValueEnum::Enum
LAST	framework/base/ScalarStructure.h	/^      LAST             \/\/ Only internal purpose    $/;"	e	enum:ProtoMol::ScalarStructure::Index
LAST	framework/base/TimerStatistic.h	/^      LAST             \/\/ Only internal purpose$/;"	e	enum:ProtoMol::TimerStatistic::Enum
LAST	framework/base/ValueType.h	/^      LAST              \/\/ Used internally only$/;"	e	enum:ProtoMol::ValueEnum::Enum
LAST	framework/frontend/InputPosVelType.h	/^      LAST              \/\/ Used internally only$/;"	e	enum:ProtoMol::InputPosVelEnum::Enum
LAST	framework/integrators/PaulTrapIntegrator.h	/^      LAST             \/\/ Only internal purpose$/;"	e	enum:ProtoMol::ThermostatEnum::Enum
LAST	framework/parallel/ParallelType.h	/^      LAST             \/\/ Only internal purpose$/;"	e	enum:ProtoMol::ParallelEnum::Enum
LAST	framework/topology/ExclusionType.h	/^      LAST \/\/ Used internally only$/;"	e	enum:ProtoMol::ExclusionEnum::Enum
LASTREDUCE	framework/base/ScalarStructure.h	/^      LASTREDUCE,           \/\/\/< Last value to be reduced in parallel environment, only internal purpose$/;"	e	enum:ProtoMol::ScalarStructure::Index
LEAPFROGINTEGRATOR_H	framework/integrators/LeapfrogIntegrator.h	3;"	d
LENGTH_AA	framework/base/pmconstants.cpp	/^      const Real LENGTH_AA        = 1e+10;          \/\/ [AA]$/;"	v
LENNARDJONES	framework/base/ScalarStructure.h	/^      LENNARDJONES,$/;"	e	enum:ProtoMol::ScalarStructure::Index
LENNARDJONESFORCE_H	framework/forces/LennardJonesForce.h	3;"	d
LENNARDJONESPARAMETERS_H	framework/topology/LennardJonesParameters.h	3;"	d
LENNARDJONESPARAMETERTABLE_H	framework/topology/LennardJonesParameterTable.h	3;"	d
LENNARDJONESTABLEFORCEBASE_H	framework/forces/LennardJonesTableForceBase.h	3;"	d
LENNARDJONESTABLEFORCE_H	framework/forces/LennardJonesTableForce.h	3;"	d
LENNARDJONES_DELTAMU	framework/base/ScalarStructure.h	/^      LENNARDJONES_DELTAMU, \/\/\/< needed for iSG and oSG simulations$/;"	e	enum:ProtoMol::ScalarStructure::Index
LIMIT	framework/base/Vector3DBlock.h	/^    enum {LIMIT = 30};$/;"	e	enum:ProtoMol::Vector3DBlock::<anonymous>
LONG	framework/base/BSplineType.h	/^      LONG,$/;"	e	enum:ProtoMol::BSplineEnum::Enum
LOOKUPTABLEBASE_H	framework/base/LookUpTableBase.h	3;"	d
L_ALT_LOC	framework/base/PDB.h	/^	L_ALT_LOC          = 1-(17 - 17),$/;"	e	enum:ProtoMol::PDB::Atom::Length
L_ATOM_NAME	framework/base/PDB.h	/^	L_ATOM_NAME        = 1-(13 - 16),$/;"	e	enum:ProtoMol::PDB::Atom::Length
L_CHAIN_ID	framework/base/PDB.h	/^	L_CHAIN_ID         = 1-(22 - 22),$/;"	e	enum:ProtoMol::PDB::Atom::Length
L_CHAIN_ID	framework/base/PDB.h	/^	L_CHAIN_ID         = 1-(22 - 22),$/;"	e	enum:ProtoMol::PDB::Ter::Length
L_CHARGE	framework/base/PDB.h	/^	L_CHARGE           = 1-(79 - 80)$/;"	e	enum:ProtoMol::PDB::Atom::Length
L_ELEMENT_SYMBOL	framework/base/PDB.h	/^	L_ELEMENT_SYMBOL   = 1-(77 - 78),$/;"	e	enum:ProtoMol::PDB::Atom::Length
L_I_CODE	framework/base/PDB.h	/^	L_I_CODE           = 1-(27 - 27)$/;"	e	enum:ProtoMol::PDB::Ter::Length
L_I_CODE	framework/base/PDB.h	/^	L_I_CODE           = 1-(27 - 27),$/;"	e	enum:ProtoMol::PDB::Atom::Length
L_OCCUP	framework/base/PDB.h	/^	L_OCCUP            = 1-(55 - 60),$/;"	e	enum:ProtoMol::PDB::Atom::Length
L_RECORD_NAME	framework/base/PDB.h	/^	L_RECORD_NAME      = 1-( 1 -  6),$/;"	e	enum:ProtoMol::PDB::Atom::Length
L_RECORD_NAME	framework/base/PDB.h	/^	L_RECORD_NAME      = 1-( 1 -  6),$/;"	e	enum:ProtoMol::PDB::Ter::Length
L_RES_NAME	framework/base/PDB.h	/^	L_RES_NAME         = 1-(18 - 20),$/;"	e	enum:ProtoMol::PDB::Atom::Length
L_RES_NAME	framework/base/PDB.h	/^	L_RES_NAME         = 1-(18 - 20),$/;"	e	enum:ProtoMol::PDB::Ter::Length
L_RES_SEQ	framework/base/PDB.h	/^	L_RES_SEQ          = 1-(23 - 26),$/;"	e	enum:ProtoMol::PDB::Atom::Length
L_RES_SEQ	framework/base/PDB.h	/^	L_RES_SEQ          = 1-(23 - 26),$/;"	e	enum:ProtoMol::PDB::Ter::Length
L_SEG_ID	framework/base/PDB.h	/^	L_SEG_ID           = 1-(73 - 76),$/;"	e	enum:ProtoMol::PDB::Atom::Length
L_SERIAL	framework/base/PDB.h	/^	L_SERIAL           = 1-( 7 - 11),$/;"	e	enum:ProtoMol::PDB::Atom::Length
L_SERIAL	framework/base/PDB.h	/^	L_SERIAL           = 1-( 7 - 11),$/;"	e	enum:ProtoMol::PDB::Ter::Length
L_TEMP_FACT	framework/base/PDB.h	/^	L_TEMP_FACT        = 1-(61 - 66),$/;"	e	enum:ProtoMol::PDB::Atom::Length
L_X	framework/base/PDB.h	/^	L_X                = 1-(31 - 38),$/;"	e	enum:ProtoMol::PDB::Atom::Length
L_Y	framework/base/PDB.h	/^	L_Y                = 1-(39 - 46),$/;"	e	enum:ProtoMol::PDB::Atom::Length
L_Z	framework/base/PDB.h	/^	L_Z                = 1-(47 - 54),$/;"	e	enum:ProtoMol::PDB::Atom::Length
Lagrange	framework/base/Lagrange.cpp	/^  Lagrange::Lagrange():myInterOrder(0),$/;"	f	class:ProtoMol::Lagrange
Lagrange	framework/base/Lagrange.cpp	/^  Lagrange::Lagrange(const Lagrange& Lagrange){$/;"	f	class:ProtoMol::Lagrange
Lagrange	framework/base/Lagrange.cpp	/^  Lagrange::Lagrange(unsigned int order):myInterOrder(order),$/;"	f	class:ProtoMol::Lagrange
Lagrange	framework/base/Lagrange.cpp	/^  Lagrange::Lagrange(unsigned int order, Real w):myInterOrder(order),$/;"	f	class:ProtoMol::Lagrange
Lagrange	framework/base/Lagrange.h	/^  class Lagrange {$/;"	c	namespace:ProtoMol
Lambda	framework/base/XSC.h	/^    Real Lambda, Lambda_vel;$/;"	m	struct:ProtoMol::XSC
Lambda_vel	framework/base/XSC.h	/^    Real Lambda, Lambda_vel;$/;"	m	struct:ProtoMol::XSC
LangevinImpulseIntegrator	framework/integrators/LangevinImpulseIntegrator.cpp	/^  LangevinImpulseIntegrator::LangevinImpulseIntegrator():$/;"	f	class:ProtoMol::LangevinImpulseIntegrator
LangevinImpulseIntegrator	framework/integrators/LangevinImpulseIntegrator.cpp	/^  LangevinImpulseIntegrator::LangevinImpulseIntegrator(Real timestep,$/;"	f	class:ProtoMol::LangevinImpulseIntegrator
LangevinImpulseIntegrator	framework/integrators/LangevinImpulseIntegrator.h	/^  class LangevinImpulseIntegrator: public STSIntegrator {$/;"	c	namespace:ProtoMol
LeapfrogIntegrator	framework/integrators/LeapfrogIntegrator.cpp	/^  LeapfrogIntegrator::LeapfrogIntegrator() : STSIntegrator() {}$/;"	f	class:ProtoMol::LeapfrogIntegrator
LeapfrogIntegrator	framework/integrators/LeapfrogIntegrator.cpp	/^  LeapfrogIntegrator::LeapfrogIntegrator(Real timestep,$/;"	f	class:ProtoMol::LeapfrogIntegrator
LeapfrogIntegrator	framework/integrators/LeapfrogIntegrator.h	/^  class LeapfrogIntegrator : public STSIntegrator {$/;"	c	namespace:ProtoMol
Length	framework/base/PDB.h	/^      enum Length{$/;"	g	struct:ProtoMol::PDB::Atom
Length	framework/base/PDB.h	/^      enum Length{$/;"	g	struct:ProtoMol::PDB::Ter
LennardJonesForce	framework/forces/LennardJonesForce.h	/^  class LennardJonesForce {$/;"	c	namespace:ProtoMol
LennardJonesParameterTable	framework/topology/LennardJonesParameterTable.cpp	/^  LennardJonesParameterTable::LennardJonesParameterTable():myCurrentSize(0),myData(NULL){}$/;"	f	class:ProtoMol::LennardJonesParameterTable
LennardJonesParameterTable	framework/topology/LennardJonesParameterTable.h	/^  class LennardJonesParameterTable {$/;"	c	namespace:ProtoMol
LennardJonesParameters	framework/topology/LennardJonesParameters.h	/^    LennardJonesParameters():A(0.0),B(0.0),A14(0.0),B14(0.0){};$/;"	f	struct:ProtoMol::LennardJonesParameters
LennardJonesParameters	framework/topology/LennardJonesParameters.h	/^    LennardJonesParameters(Real a, Real b):A(a),B(b),A14(0.0),B14(0.0){};$/;"	f	struct:ProtoMol::LennardJonesParameters
LennardJonesParameters	framework/topology/LennardJonesParameters.h	/^    LennardJonesParameters(Real a, Real b, Real a14, Real b14):A(a),B(b),A14(a14),B14(b14){};$/;"	f	struct:ProtoMol::LennardJonesParameters
LennardJonesParameters	framework/topology/LennardJonesParameters.h	/^  struct LennardJonesParameters {$/;"	s	namespace:ProtoMol
LennardJonesTableForce	framework/forces/LennardJonesTableForce.h	/^    LennardJonesTableForce():LookUpTableBase<LennardJonesTableForceBase::LookUpValues,$/;"	f	class:ProtoMol::LennardJonesTableForce
LennardJonesTableForce	framework/forces/LennardJonesTableForce.h	/^    LennardJonesTableForce(TSwitchingFunction swf):LookUpTableBase<LennardJonesTableForceBase::LookUpValues,$/;"	f	class:ProtoMol::LennardJonesTableForce
LennardJonesTableForce	framework/forces/LennardJonesTableForce.h	/^    LennardJonesTableForce(TSwitchingFunction swf, $/;"	f	class:ProtoMol::LennardJonesTableForce
LennardJonesTableForce	framework/forces/LennardJonesTableForce.h	/^  class LennardJonesTableForce : public LookUpTableBase<LennardJonesTableForceBase::LookUpValues,PRE,TReal>, $/;"	c	namespace:ProtoMol
LennardJonesTableForceBase	framework/forces/LennardJonesTableForceBase.h	/^  class LennardJonesTableForceBase {$/;"	c	namespace:ProtoMol
LookUpTableBase	framework/base/LookUpTableBase.h	/^    LookUpTableBase():myTable(NULL),$/;"	f	class:ProtoMol::LookUpTableBase
LookUpTableBase	framework/base/LookUpTableBase.h	/^    LookUpTableBase(TReal from, $/;"	f	class:ProtoMol::LookUpTableBase
LookUpTableBase	framework/base/LookUpTableBase.h	/^    LookUpTableBase(const LookUpTableBase& rhs){$/;"	f	class:ProtoMol::LookUpTableBase
LookUpTableBase	framework/base/LookUpTableBase.h	/^  class LookUpTableBase {$/;"	c	namespace:ProtoMol
LookUpValues	framework/forces/CoulombEwaldRealTableForceBase.h	/^      LookUpValues(Real a):myAlpha(a){}$/;"	f	class:ProtoMol::CoulombEwaldRealTableForceBase::LookUpValues
LookUpValues	framework/forces/CoulombEwaldRealTableForceBase.h	/^    class LookUpValues {$/;"	c	class:ProtoMol::CoulombEwaldRealTableForceBase
LookUpValues	framework/forces/CoulombMultiGridDirectTableForceBase.h	/^      LookUpValues(Real a):myS(a){}$/;"	f	class:ProtoMol::CoulombMultiGridDirectTableForceBase::LookUpValues
LookUpValues	framework/forces/CoulombMultiGridDirectTableForceBase.h	/^    class LookUpValues {$/;"	c	class:ProtoMol::CoulombMultiGridDirectTableForceBase
LookUpValues	framework/forces/CoulombTableForceBase.h	/^    class LookUpValues {$/;"	c	class:ProtoMol::CoulombTableForceBase
LookUpValues	framework/forces/LennardJonesTableForceBase.h	/^    class LookUpValues {$/;"	c	class:ProtoMol::LennardJonesTableForceBase
M	framework/base/LookUpTableBase.h	/^    enum{M=(sizeof(TReal)*8-1-E)};$/;"	e	enum:ProtoMol::LookUpTableBase::<anonymous>
MAGNETICDIPOLEFORCE_H	framework/forces/MagneticDipoleForce.h	3;"	d
MAKABLEDEFINITION_H	framework/base/MakeableDefinition.h	3;"	d
MAKEABLE_H	framework/base/Makeable.h	3;"	d
MASTER	framework/parallel/Parallel.h	/^      MASTER       \/\/\/< master$/;"	e	enum:ProtoMol::Parallel::WorkState
MASTERSLAVE	framework/parallel/ParallelType.h	/^      MASTERSLAVE,     \/\/\/< Master-slave$/;"	e	enum:ProtoMol::ParallelEnum::Enum
MATHUTILITIES_H	framework/base/mathutilities.h	3;"	d
MATRIX3by3_H	framework/base/Matrix3by3.h	3;"	d
MAXDOUBLE	framework/base/Real.h	19;"	d
MAXEQNCM	framework/topology/CmpCnCnSwitchingFunction.h	20;"	d
MAXEQNN	framework/topology/CnSwitchingFunction.h	20;"	d
MAXINT	framework/base/Real.h	18;"	d
MAXREAL	framework/base/pmconstants.cpp	/^    const Real MAXREAL        = MAXDOUBLE; $/;"	v
MAXREAL	framework/base/pmconstants.cpp	/^    const Real MAXREAL        = MAXFLOAT; $/;"	v
MAX_INT	framework/base/pmconstants.cpp	/^    const int  MAX_INT        = MAXINT;$/;"	v
MAX_INT_2	framework/base/pmconstants.cpp	/^    const int  MAX_INT_2      = MAXINT\/2;$/;"	v
MCINTEGRATOR_H	framework/integrators/MCIntegrator.h	3;"	d
MCIntegrator	framework/integrators/MCIntegrator.cpp	/^  MCIntegrator::MCIntegrator()    $/;"	f	class:ProtoMol::MCIntegrator
MCIntegrator	framework/integrators/MCIntegrator.cpp	/^  MCIntegrator::MCIntegrator(int cycles,$/;"	f	class:ProtoMol::MCIntegrator
MCIntegrator	framework/integrators/MCIntegrator.h	/^  class MCIntegrator: public MTSIntegrator {$/;"	c	namespace:ProtoMol
METAFORCE_H	framework/forces/MetaForce.h	3;"	d
MINDOUBLE	framework/base/Real.h	20;"	d
MINREAL	framework/base/pmconstants.cpp	/^    const Real MINREAL        = MINDOUBLE;$/;"	v
MINREAL	framework/base/pmconstants.cpp	/^    const Real MINREAL        = MINFLOAT;$/;"	v
MODIFIERAVERAGING_H	framework/integrators/ModifierAveraging.h	3;"	d
MODIFIERFRICTION_H	framework/integrators/ModifierFriction.h	3;"	d
MODIFIERINCREMENTTIMESTEP_H	framework/integrators/ModifierIncrementTimestep.h	3;"	d
MODIFIERMETARATTLESHAKE_H	framework/integrators/ModifierMetaRattleShake.h	3;"	d
MODIFIERMETARATTLE_H	framework/integrators/ModifierMetaRattle.h	3;"	d
MODIFIERMETASHAKE_H	framework/integrators/ModifierMetaShake.h	3;"	d
MODIFIERMOLLIFICATION_H	framework/integrators/ModifierMollification.h	3;"	d
MODIFIERNPTRATTLE_H	framework/integrators/ModifierNPTRattle.h	3;"	d
MODIFIERNPTSHAKE_H	framework/integrators/ModifierNPTShake.h	3;"	d
MODIFIERNVTRATTLE_H	framework/integrators/ModifierNVTRattle.h	3;"	d
MODIFIERNVTSHAKE_H	framework/integrators/ModifierNVTShake.h	3;"	d
MODIFIERPOSTFORCEBAROSTAT_H	framework/integrators/ModifierPostForceBarostat.h	3;"	d
MODIFIERPOSTFORCETHERMOSTAT_H	framework/integrators/ModifierPostForceThermostat.h	3;"	d
MODIFIERPREFORCEBAROSTAT_H	framework/integrators/ModifierPreForceBarostat.h	3;"	d
MODIFIERPREFORCETHERMOSTAT_H	framework/integrators/ModifierPreForceThermostat.h	3;"	d
MODIFIERRATTLE_H	framework/integrators/ModifierRattle.h	3;"	d
MODIFIERREMOVEANGULARMOMENTUM_H	framework/integrators/ModifierRemoveAngularMomentum.h	3;"	d
MODIFIERREMOVELINEARMOMENTUM_H	framework/integrators/ModifierRemoveLinearMomentum.h	3;"	d
MODIFIERSHADOW_H	framework/integrators/ModifierShadow.h	2;"	d
MODIFIERSHAKE_H	framework/integrators/ModifierShake.h	3;"	d
MODIFIER_H	framework/integrators/Modifier.h	3;"	d
MODIFY	framework/topology/C1SwitchingFunction.h	/^    enum {MODIFY=1};$/;"	e	enum:ProtoMol::C1SwitchingFunction::<anonymous>
MODIFY	framework/topology/C2SwitchingFunction.h	/^    enum {MODIFY=1};$/;"	e	enum:ProtoMol::C2SwitchingFunction::<anonymous>
MODIFY	framework/topology/CmpCnCnSwitchingFunction.h	/^    enum {MODIFY=1};$/;"	e	enum:ProtoMol::CmpCnCnSwitchingFunction::<anonymous>
MODIFY	framework/topology/CnSwitchingFunction.h	/^    enum {MODIFY=1};$/;"	e	enum:ProtoMol::CnSwitchingFunction::<anonymous>
MODIFY	framework/topology/ComplementSwitchingFunction.h	/^    enum {MODIFY=1};$/;"	e	enum:ProtoMol::ComplementSwitchingFunction::<anonymous>
MODIFY	framework/topology/CutoffSwitchingFunction.h	/^    enum {MODIFY=0};$/;"	e	enum:ProtoMol::CutoffSwitchingFunction::<anonymous>
MODIFY	framework/topology/RangeSwitchingFunction.h	/^    enum {MODIFY=1};$/;"	e	enum:ProtoMol::RangeSwitchingFunction::<anonymous>
MODIFY	framework/topology/ShiftSwitchingFunction.h	/^    enum {MODIFY=1};$/;"	e	enum:ProtoMol::ShiftSwitchingFunction::<anonymous>
MODIFY	framework/topology/UniversalSwitchingFunction.h	/^    enum {MODIFY=0};$/;"	e	enum:ProtoMol::UniversalSwitchingFunction::<anonymous>
MOLECULE_H	framework/base/Molecule.h	3;"	d
MOLLYFORCE_H	framework/forces/MollyForce.h	3;"	d
MOLLYINTEGRATOR_H	framework/integrators/MOLLYIntegrator.h	3;"	d
MOLLYIntegrator	framework/integrators/MOLLYIntegrator.cpp	/^  MOLLYIntegrator::MOLLYIntegrator (int cycles,$/;"	f	class:ProtoMol::MOLLYIntegrator
MOLLYIntegrator	framework/integrators/MOLLYIntegrator.cpp	/^  MOLLYIntegrator::MOLLYIntegrator():MTSIntegrator(),mySwapPositions(NULL){}$/;"	f	class:ProtoMol::MOLLYIntegrator
MOLLYIntegrator	framework/integrators/MOLLYIntegrator.h	/^  class MOLLYIntegrator : public MTSIntegrator {$/;"	c	namespace:ProtoMol
MOLVIRIALXX	framework/base/ScalarStructure.h	/^      MOLVIRIALXX,$/;"	e	enum:ProtoMol::ScalarStructure::Index
MOLVIRIALXY	framework/base/ScalarStructure.h	/^      MOLVIRIALXY,$/;"	e	enum:ProtoMol::ScalarStructure::Index
MOLVIRIALXZ	framework/base/ScalarStructure.h	/^      MOLVIRIALXZ,$/;"	e	enum:ProtoMol::ScalarStructure::Index
MOLVIRIALYX	framework/base/ScalarStructure.h	/^      MOLVIRIALYX,$/;"	e	enum:ProtoMol::ScalarStructure::Index
MOLVIRIALYY	framework/base/ScalarStructure.h	/^      MOLVIRIALYY,$/;"	e	enum:ProtoMol::ScalarStructure::Index
MOLVIRIALYZ	framework/base/ScalarStructure.h	/^      MOLVIRIALYZ,$/;"	e	enum:ProtoMol::ScalarStructure::Index
MOLVIRIALZX	framework/base/ScalarStructure.h	/^      MOLVIRIALZX,$/;"	e	enum:ProtoMol::ScalarStructure::Index
MOLVIRIALZY	framework/base/ScalarStructure.h	/^      MOLVIRIALZY,$/;"	e	enum:ProtoMol::ScalarStructure::Index
MOLVIRIALZZ	framework/base/ScalarStructure.h	/^      MOLVIRIALZZ,$/;"	e	enum:ProtoMol::ScalarStructure::Index
MPITypeTraits	framework/parallel/Parallel-FD.cpp	/^  struct MPITypeTraits<Real>$/;"	s	namespace:ProtoMol	file:
MPITypeTraits	framework/parallel/Parallel-FD.cpp	/^  struct MPITypeTraits<int>$/;"	s	namespace:ProtoMol	file:
MPITypeTraits	framework/parallel/Parallel.cpp	/^  struct MPITypeTraits<Real>$/;"	s	namespace:ProtoMol	file:
MPITypeTraits	framework/parallel/Parallel.cpp	/^  struct MPITypeTraits<int>$/;"	s	namespace:ProtoMol	file:
MTORSIONSYSTEMFORCE_H	framework/forces/MTorsionSystemForce.h	3;"	d
MTSINTEGRATOR_H	framework/integrators/MTSIntegrator.h	3;"	d
MTSIntegrator	framework/integrators/MTSIntegrator.cpp	/^  MTSIntegrator::MTSIntegrator (int cycles,$/;"	f	class:ProtoMol::MTSIntegrator
MTSIntegrator	framework/integrators/MTSIntegrator.cpp	/^  MTSIntegrator::MTSIntegrator():StandardIntegrator(),myNextIntegrator(NULL),myCycleLength(0){}$/;"	f	class:ProtoMol::MTSIntegrator
MTSIntegrator	framework/integrators/MTSIntegrator.h	/^  class MTSIntegrator: public StandardIntegrator {$/;"	c	namespace:ProtoMol
MTorsionSystemForce	framework/forces/MTorsionSystemForce.h	/^  class MTorsionSystemForce: public SystemForce {$/;"	c	namespace:ProtoMol
MULTIGRID_H	framework/base/MultiGrid.h	3;"	d
MY_MPI_REAL	framework/base/FFTComplex.cpp	285;"	d	file:
MY_MPI_REAL	framework/base/FFTComplex.cpp	289;"	d	file:
MY_MPI_REAL	framework/parallel/Parallel-FD.cpp	33;"	d	file:
MY_MPI_REAL	framework/parallel/Parallel-FD.cpp	37;"	d	file:
MY_MPI_REAL	framework/parallel/Parallel.cpp	29;"	d	file:
MY_MPI_REAL	framework/parallel/Parallel.cpp	33;"	d	file:
M_2PI	framework/base/Real.h	25;"	d
M_PI	framework/base/Real.h	23;"	d
M_PI_2	framework/base/Real.h	24;"	d
MagneticDipoleForce	framework/forces/MagneticDipoleForce.cpp	/^  MagneticDipoleForce::MagneticDipoleForce():myChi(0.0),myR(0.0),myOmega(0.0),myPhi(0.0),myHx(0.0),myHy(0.0),myHz(0.0),myD(0.0){}$/;"	f	class:ProtoMol::MagneticDipoleForce
MagneticDipoleForce	framework/forces/MagneticDipoleForce.cpp	/^  MagneticDipoleForce::MagneticDipoleForce(Real chi, Real radius, Real omega, Real phi, Real Hx,Real Hy, Real Hz, Real D):$/;"	f	class:ProtoMol::MagneticDipoleForce
MagneticDipoleForce	framework/forces/MagneticDipoleForce.h	/^  class MagneticDipoleForce {$/;"	c	namespace:ProtoMol
MagneticDipoleMirrorSystemForce	framework/forces/MagneticDipoleMirrorSystemForce.h	/^    MagneticDipoleMirrorSystemForce():myChi(0.0), myR(0.0), myD(0.0), myHx(0.0), myHy(0.0), myHz(0.0){}$/;"	f	class:ProtoMol::MagneticDipoleMirrorSystemForce
MagneticDipoleMirrorSystemForce	framework/forces/MagneticDipoleMirrorSystemForce.h	/^    MagneticDipoleMirrorSystemForce(Real chi, Real r, Real Hx, Real Hy, Real Hz, Real d):$/;"	f	class:ProtoMol::MagneticDipoleMirrorSystemForce
MagneticDipoleMirrorSystemForce	framework/forces/MagneticDipoleMirrorSystemForce.h	/^  class MagneticDipoleMirrorSystemForce : public SystemForce, private MagneticDipoleMirrorSystemForceBase {$/;"	c	namespace:ProtoMol
MagneticDipoleMirrorSystemForceBASE_H	framework/forces/MagneticDipoleMirrorSystemForceBase.h	3;"	d
MagneticDipoleMirrorSystemForceBase	framework/forces/MagneticDipoleMirrorSystemForceBase.h	/^  class MagneticDipoleMirrorSystemForceBase {$/;"	c	namespace:ProtoMol
MagneticDipoleMirrorSystemForce_H	framework/forces/MagneticDipoleMirrorSystemForce.h	3;"	d
Makeable	framework/base/Makeable.h	/^  class Makeable{$/;"	c	namespace:ProtoMol
MakeableDefinition	framework/base/MakeableDefinition.h	/^    MakeableDefinition(){}$/;"	f	struct:ProtoMol::MakeableDefinition
MakeableDefinition	framework/base/MakeableDefinition.h	/^    MakeableDefinition(const std::string& i,const std::vector<Parameter>& p):id(i),parameters(p){}$/;"	f	struct:ProtoMol::MakeableDefinition
MakeableDefinition	framework/base/MakeableDefinition.h	/^  struct MakeableDefinition {$/;"	s	namespace:ProtoMol
Matrix3by3	framework/base/Matrix3by3.cpp	/^  Matrix3by3::Matrix3by3()$/;"	f	class:ProtoMol::Matrix3by3
Matrix3by3	framework/base/Matrix3by3.cpp	/^  Matrix3by3::Matrix3by3(Real x00, Real x01, Real x02,$/;"	f	class:ProtoMol::Matrix3by3
Matrix3by3	framework/base/Matrix3by3.cpp	/^  Matrix3by3::Matrix3by3(const Vector3D &a, const Vector3D &b)$/;"	f	class:ProtoMol::Matrix3by3
Matrix3by3	framework/base/Matrix3by3.cpp	/^  Matrix3by3::Matrix3by3(const Vector3D& v1, const Vector3D& v2, $/;"	f	class:ProtoMol::Matrix3by3
Matrix3by3	framework/base/Matrix3by3.cpp	/^  Matrix3by3::Matrix3by3(double mat[9])$/;"	f	class:ProtoMol::Matrix3by3
Matrix3by3	framework/base/Matrix3by3.cpp	/^  Matrix3by3::Matrix3by3(float mat[9])$/;"	f	class:ProtoMol::Matrix3by3
Matrix3by3	framework/base/Matrix3by3.h	/^  class Matrix3by3 {$/;"	c	namespace:ProtoMol
MetaForce	framework/forces/MetaForce.h	/^    MetaForce():Force(){}$/;"	f	class:ProtoMol::MetaForce
MetaForce	framework/forces/MetaForce.h	/^  class MetaForce : public Force {$/;"	c	namespace:ProtoMol
Modifier	framework/integrators/Modifier.h	/^    Modifier(int order=0):myOrder(order),$/;"	f	class:ProtoMol::Modifier
Modifier	framework/integrators/Modifier.h	/^  class Modifier {$/;"	c	namespace:ProtoMol
ModifierAveraging	framework/integrators/ModifierAveraging.h	/^    ModifierAveraging(MOLLYIntegrator* i):Modifier(),myTheIntegrator(i){}$/;"	f	class:ProtoMol::ModifierAveraging
ModifierAveraging	framework/integrators/ModifierAveraging.h	/^  class ModifierAveraging : public Modifier {$/;"	c	namespace:ProtoMol
ModifierFriction	framework/integrators/ModifierFriction.h	/^    ModifierFriction(NoseNVTLeapfrogIntegrator* i):Modifier(Constant::MAX_INT-400),myTheIntegrator(i){}$/;"	f	class:ProtoMol::ModifierFriction
ModifierFriction	framework/integrators/ModifierFriction.h	/^  class ModifierFriction : public Modifier {$/;"	c	namespace:ProtoMol
ModifierIncrementTimestep	framework/integrators/ModifierIncrementTimestep.h	/^    ModifierIncrementTimestep(STSIntegrator* i):Modifier(Constant::MAX_INT),myTheIntegrator(i){}$/;"	f	class:ProtoMol::ModifierIncrementTimestep
ModifierIncrementTimestep	framework/integrators/ModifierIncrementTimestep.h	/^  class ModifierIncrementTimestep : public Modifier {$/;"	c	namespace:ProtoMol
ModifierMetaRattle	framework/integrators/ModifierMetaRattle.cpp	/^  ModifierMetaRattle::ModifierMetaRattle(Real eps, int maxIter, int order):ModifierMetaRattleShake(eps,maxIter,order){}$/;"	f	class:ProtoMol::ModifierMetaRattle
ModifierMetaRattle	framework/integrators/ModifierMetaRattle.h	/^  class ModifierMetaRattle : public ModifierMetaRattleShake {$/;"	c	namespace:ProtoMol
ModifierMetaRattleShake	framework/integrators/ModifierMetaRattleShake.cpp	/^  ModifierMetaRattleShake::ModifierMetaRattleShake(Real eps, int maxIter,int order):Modifier(order),$/;"	f	class:ProtoMol::ModifierMetaRattleShake
ModifierMetaRattleShake	framework/integrators/ModifierMetaRattleShake.h	/^  class ModifierMetaRattleShake : public Modifier {$/;"	c	namespace:ProtoMol
ModifierMetaShake	framework/integrators/ModifierMetaShake.cpp	/^  ModifierMetaShake::ModifierMetaShake(Real eps, int maxIter, int order):ModifierMetaRattleShake(eps,maxIter,order){}$/;"	f	class:ProtoMol::ModifierMetaShake
ModifierMetaShake	framework/integrators/ModifierMetaShake.h	/^  class ModifierMetaShake : public ModifierMetaRattleShake {$/;"	c	namespace:ProtoMol
ModifierMollification	framework/integrators/ModifierMollification.h	/^    ModifierMollification(MOLLYIntegrator* i):Modifier(),myTheIntegrator(i){}$/;"	f	class:ProtoMol::ModifierMollification
ModifierMollification	framework/integrators/ModifierMollification.h	/^  class ModifierMollification : public Modifier {$/;"	c	namespace:ProtoMol
ModifierNPTRattle	framework/integrators/ModifierNPTRattle.h	/^    ModifierNPTRattle(Real eps, $/;"	f	class:ProtoMol::ModifierNPTRattle
ModifierNPTRattle	framework/integrators/ModifierNPTRattle.h	/^  class ModifierNPTRattle : public ModifierNPTRattleDetails {$/;"	c	namespace:ProtoMol
ModifierNPTRattleDetails	framework/integrators/ModifierNPTRattle.cpp	/^  ModifierNPTRattleDetails::ModifierNPTRattleDetails(Real eps, int maxIter, int order):ModifierMetaRattle(eps,maxIter,order){}$/;"	f	class:ProtoMol::ModifierNPTRattleDetails
ModifierNPTRattleDetails	framework/integrators/ModifierNPTRattle.h	/^  class ModifierNPTRattleDetails : public ModifierMetaRattle {$/;"	c	namespace:ProtoMol
ModifierNPTShake	framework/integrators/ModifierNPTShake.h	/^    ModifierNPTShake(Real eps, $/;"	f	class:ProtoMol::ModifierNPTShake
ModifierNPTShake	framework/integrators/ModifierNPTShake.h	/^  class ModifierNPTShake : public ModifierNPTShakeDetails {$/;"	c	namespace:ProtoMol
ModifierNPTShakeDetails	framework/integrators/ModifierNPTShake.cpp	/^  ModifierNPTShakeDetails::ModifierNPTShakeDetails(Real eps, int maxIter, int order):ModifierMetaShake(eps,maxIter,order){}$/;"	f	class:ProtoMol::ModifierNPTShakeDetails
ModifierNPTShakeDetails	framework/integrators/ModifierNPTShake.h	/^  class ModifierNPTShakeDetails : public ModifierMetaShake {$/;"	c	namespace:ProtoMol
ModifierNVTRattle	framework/integrators/ModifierNVTRattle.h	/^    ModifierNVTRattle(Real eps,$/;"	f	class:ProtoMol::ModifierNVTRattle
ModifierNVTRattle	framework/integrators/ModifierNVTRattle.h	/^  class ModifierNVTRattle : public ModifierNVTRattleDetails {$/;"	c	namespace:ProtoMol
ModifierNVTRattleDetails	framework/integrators/ModifierNVTRattle.cpp	/^  ModifierNVTRattleDetails::ModifierNVTRattleDetails(Real eps, int maxIter, int order):ModifierMetaRattle(eps,maxIter,order){}$/;"	f	class:ProtoMol::ModifierNVTRattleDetails
ModifierNVTRattleDetails	framework/integrators/ModifierNVTRattle.h	/^  class ModifierNVTRattleDetails : public ModifierMetaRattle {$/;"	c	namespace:ProtoMol
ModifierNVTShake	framework/integrators/ModifierNVTShake.h	/^    ModifierNVTShake(Real eps,$/;"	f	class:ProtoMol::ModifierNVTShake
ModifierNVTShake	framework/integrators/ModifierNVTShake.h	/^  class ModifierNVTShake : public ModifierNVTShakeDetails {$/;"	c	namespace:ProtoMol
ModifierNVTShakeDetails	framework/integrators/ModifierNVTShake.cpp	/^  ModifierNVTShakeDetails::ModifierNVTShakeDetails(Real eps, int maxIter, int order):ModifierMetaShake(eps,maxIter,order){}$/;"	f	class:ProtoMol::ModifierNVTShakeDetails
ModifierNVTShakeDetails	framework/integrators/ModifierNVTShake.h	/^  class ModifierNVTShakeDetails : public ModifierMetaShake {$/;"	c	namespace:ProtoMol
ModifierPostForceBarostat	framework/integrators/ModifierPostForceBarostat.h	/^    ModifierPostForceBarostat(TIntegrator* i):Modifier(Constant::MAX_INT-400),myTheIntegrator(i){}$/;"	f	class:ProtoMol::ModifierPostForceBarostat
ModifierPostForceBarostat	framework/integrators/ModifierPostForceBarostat.h	/^    ModifierPostForceBarostat(TIntegrator* i, int order):Modifier(order),myTheIntegrator(i){}$/;"	f	class:ProtoMol::ModifierPostForceBarostat
ModifierPostForceBarostat	framework/integrators/ModifierPostForceBarostat.h	/^  class ModifierPostForceBarostat : public Modifier {$/;"	c	namespace:ProtoMol
ModifierPostForceThermostat	framework/integrators/ModifierPostForceThermostat.h	/^    ModifierPostForceThermostat(TIntegrator* i):Modifier(Constant::MAX_INT-400),myTheIntegrator(i){}$/;"	f	class:ProtoMol::ModifierPostForceThermostat
ModifierPostForceThermostat	framework/integrators/ModifierPostForceThermostat.h	/^    ModifierPostForceThermostat(TIntegrator* i, int order):Modifier(order),myTheIntegrator(i){}$/;"	f	class:ProtoMol::ModifierPostForceThermostat
ModifierPostForceThermostat	framework/integrators/ModifierPostForceThermostat.h	/^  class ModifierPostForceThermostat : public Modifier {$/;"	c	namespace:ProtoMol
ModifierPreForceBarostat	framework/integrators/ModifierPreForceBarostat.h	/^    ModifierPreForceBarostat(TIntegrator* i):Modifier(Constant::MAX_INT-400),myTheIntegrator(i){}$/;"	f	class:ProtoMol::ModifierPreForceBarostat
ModifierPreForceBarostat	framework/integrators/ModifierPreForceBarostat.h	/^    ModifierPreForceBarostat(TIntegrator* i, int order):Modifier(order),myTheIntegrator(i){}$/;"	f	class:ProtoMol::ModifierPreForceBarostat
ModifierPreForceBarostat	framework/integrators/ModifierPreForceBarostat.h	/^  class ModifierPreForceBarostat : public Modifier {$/;"	c	namespace:ProtoMol
ModifierPreForceThermostat	framework/integrators/ModifierPreForceThermostat.h	/^    ModifierPreForceThermostat(TIntegrator* i):Modifier(Constant::MAX_INT-400),myTheIntegrator(i){}$/;"	f	class:ProtoMol::ModifierPreForceThermostat
ModifierPreForceThermostat	framework/integrators/ModifierPreForceThermostat.h	/^    ModifierPreForceThermostat(TIntegrator* i, int order):Modifier(order),myTheIntegrator(i){}$/;"	f	class:ProtoMol::ModifierPreForceThermostat
ModifierPreForceThermostat	framework/integrators/ModifierPreForceThermostat.h	/^  class ModifierPreForceThermostat : public Modifier {$/;"	c	namespace:ProtoMol
ModifierRattle	framework/integrators/ModifierRattle.cpp	/^  ModifierRattle::ModifierRattle(Real eps, int maxIter,const Integrator* i, int order):ModifierMetaRattle(eps,maxIter,order),myTheIntegrator(i){}$/;"	f	class:ProtoMol::ModifierRattle
ModifierRattle	framework/integrators/ModifierRattle.h	/^  class ModifierRattle : public ModifierMetaRattle {$/;"	c	namespace:ProtoMol
ModifierRemoveAngularMomentum	framework/integrators/ModifierRemoveAngularMomentum.h	/^    ModifierRemoveAngularMomentum(int freq):Modifier(Constant::MAX_INT-200),myStep(0),myFreq(freq){}$/;"	f	class:ProtoMol::ModifierRemoveAngularMomentum
ModifierRemoveAngularMomentum	framework/integrators/ModifierRemoveAngularMomentum.h	/^  class ModifierRemoveAngularMomentum : public Modifier {$/;"	c	namespace:ProtoMol
ModifierRemoveLinearMomentum	framework/integrators/ModifierRemoveLinearMomentum.h	/^    ModifierRemoveLinearMomentum(int freq):Modifier(Constant::MAX_INT-100),myStep(0),myFreq(freq){}$/;"	f	class:ProtoMol::ModifierRemoveLinearMomentum
ModifierRemoveLinearMomentum	framework/integrators/ModifierRemoveLinearMomentum.h	/^  class ModifierRemoveLinearMomentum : public Modifier {$/;"	c	namespace:ProtoMol
ModifierShadow	framework/integrators/ModifierShadow.cpp	/^    ModifierShadow::ModifierShadow( int order2k, int freq,$/;"	f	class:ProtoMol::ModifierShadow
ModifierShadow	framework/integrators/ModifierShadow.h	/^    class ModifierShadow : public Modifier {$/;"	c	namespace:ProtoMol
ModifierShake	framework/integrators/ModifierShake.cpp	/^  ModifierShake::ModifierShake(Real eps, int maxIter,const Integrator* i, int order):ModifierMetaShake(eps,maxIter,order),myTheIntegrator(i){}$/;"	f	class:ProtoMol::ModifierShake
ModifierShake	framework/integrators/ModifierShake.h	/^  class ModifierShake : public ModifierMetaShake {$/;"	c	namespace:ProtoMol
Molecule	framework/base/Molecule.h	/^    Molecule():mass(0.0),position(0.0,0.0,0.0),momentum(0.0,0.0,0.0),water(false),$/;"	f	struct:ProtoMol::Molecule
Molecule	framework/base/Molecule.h	/^  struct Molecule {$/;"	s	namespace:ProtoMol
MollyForce	framework/forces/MollyForce.h	/^    MollyForce():Force(){}$/;"	f	class:ProtoMol::MollyForce
MollyForce	framework/forces/MollyForce.h	/^  class MollyForce : public Force {$/;"	c	namespace:ProtoMol
MultiGrid	framework/base/MultiGrid.h	/^  MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::MultiGrid(): $/;"	f	class:ProtoMol::MultiGrid
MultiGrid	framework/base/MultiGrid.h	/^  class MultiGrid {$/;"	c	namespace:ProtoMol
MyStreamer	framework/base/Report.cpp	/^    MyStreamer::MyStreamer(ostream* a) {$/;"	f	class:ProtoMol::Report::MyStreamer
MyStreamer	framework/base/Report.h	/^    class MyStreamer {$/;"	c	namespace:ProtoMol::Report
N	framework/base/LookUpTableBase.h	/^    enum{N=(1<<PRE)};$/;"	e	enum:ProtoMol::LookUpTableBase::<anonymous>
N	framework/base/mathutilities.h	/^      enum {N = 1+BinaryExponentHelper<A <= 1,A\/2>::N};$/;"	e	class:ProtoMol::Private::BinaryExponentHelper::<anonymous>::A
N	framework/base/mathutilities.h	/^      enum {N = 1+BinaryExponentHelper<A <= 1,A\/2>::N};$/;"	e	enum:ProtoMol::Private::BinaryExponentHelper::<anonymous>
N	framework/base/mathutilities.h	/^      enum {N=1};$/;"	e	enum:ProtoMol::Private::BinaryExponentHelper::<anonymous>
N	framework/base/mathutilities.h	/^    enum {N=Private::BinaryExponentHelper<P <= 1,P\/2>::N};$/;"	e	class:ProtoMol::BinaryExponent::<anonymous>::P
N	framework/base/mathutilities.h	/^    enum {N=Private::BinaryExponentHelper<P <= 1,P\/2>::N};$/;"	e	enum:ProtoMol::BinaryExponent::<anonymous>
NBFIX	framework/io/PARReader.h	/^      NBFIX,$/;"	e	enum:ProtoMol::PARReader::PARRecordTypeEnum
NEED_RANGE	framework/parallel/Parallel-FD.cpp	/^  const int NEED_RANGE = 1;$/;"	v
NEED_RANGE	framework/parallel/Parallel.cpp	/^  const int NEED_RANGE = 1;$/;"	v
NEGATIVE	framework/base/ConstraintValueType.h	/^      NEGATIVE,$/;"	e	enum:ProtoMol::ConstraintValueEnum::Enum
NOCONSTRAINTS	framework/base/ConstraintValueType.h	/^      NOCONSTRAINTS,$/;"	e	enum:ProtoMol::ConstraintValueEnum::Enum
NONBONDED	framework/io/PARReader.h	/^      NONBONDED,$/;"	e	enum:ProtoMol::PARReader::PARRecordTypeEnum
NONBONDEDCUTOFFFORCEBASE_H	framework/forces/NonbondedCutoffForceBase.h	3;"	d
NONBONDEDCUTOFFFORCE_H	framework/forces/NonbondedCutoffForce.h	3;"	d
NONBONDEDCUTOFFMOLLYFORCE_H	framework/forces/NonbondedCutoffMollyForce.h	3;"	d
NONBONDEDCUTOFFSYSTEMFORCE_H	framework/forces/NonbondedCutoffSystemForce.h	3;"	d
NONBONDEDFULLEWALDSYSTEMFORCEBASE_H	framework/forces/NonbondedFullEwaldSystemForceBase.h	3;"	d
NONBONDEDFULLEWALDSYSTEMFORCE_H	framework/forces/NonbondedFullEwaldSystemForce.h	3;"	d
NONBONDEDFULLSYSTEMFORCEBASE_H	framework/forces/NonbondedFullSystemForceBase.h	3;"	d
NONBONDEDFULLSYSTEMFORCE_H	framework/forces/NonbondedFullSystemForce.h	3;"	d
NONBONDEDMULTIGRIDSYSTEMFORCEBASE_H	framework/forces/NonbondedMultiGridSystemForceBase.h	3;"	d
NONBONDEDMULTIGRIDSYSTEMFORCE_H	framework/forces/NonbondedMultiGridSystemForce.h	3;"	d
NONBONDEDPMEWALDSYSTEMFORCEBASE_H	framework/forces/NonbondedPMEwaldSystemForceBase.h	3;"	d
NONBONDEDPMEWALDSYSTEMFORCE_H	framework/forces/NonbondedPMEwaldSystemForce.h	3;"	d
NONBONDEDSIMPLEFULLSYSTEMFORCEBASE_H	framework/forces/NonbondedSimpleFullSystemForceBase.h	3;"	d
NONBONDEDSIMPLEFULLSYSTEMFORCE_H	framework/forces/NonbondedSimpleFullSystemForce.h	3;"	d
NONE	framework/topology/ExclusionType.h	/^      NONE,         \/\/\/< no exclusions at all$/;"	e	enum:ProtoMol::ExclusionEnum::Enum
NONSTANDARDINTEGRATOR_H	framework/integrators/NonStandardIntegrator.h	3;"	d
NOSENVTLEAPFROGINTEGRATOR_H	framework/integrators/NoseNVTLeapfrogIntegrator.h	3;"	d
NOTEMPTY	framework/base/ConstraintValueType.h	/^      NOTEMPTY,$/;"	e	enum:ProtoMol::ConstraintValueEnum::Enum
NOTNEGATIVE	framework/base/ConstraintValueType.h	/^      NOTNEGATIVE,$/;"	e	enum:ProtoMol::ConstraintValueEnum::Enum
NOTPOSITIVE	framework/base/ConstraintValueType.h	/^      NOTPOSITIVE,$/;"	e	enum:ProtoMol::ConstraintValueEnum::Enum
NOTZERO	framework/base/ConstraintValueType.h	/^      NOTZERO,$/;"	e	enum:ProtoMol::ConstraintValueEnum::Enum
NOT_VISITED	framework/topology/AngleInfo.h	/^		     NOT_VISITED =     10002};$/;"	e	enum:ProtoMol::AngleInfo::AngleType
NPTVERLETINTEGRATOR_H	framework/integrators/NPTVerletIntegrator.h	3;"	d
NPTVerletIntegrator	framework/integrators/NPTVerletIntegrator.cpp	/^  NPTVerletIntegrator::NPTVerletIntegrator(): STSIntegrator(),$/;"	f	class:ProtoMol::NPTVerletIntegrator
NPTVerletIntegrator	framework/integrators/NPTVerletIntegrator.cpp	/^  NPTVerletIntegrator::NPTVerletIntegrator(Real timestep,$/;"	f	class:ProtoMol::NPTVerletIntegrator
NPTVerletIntegrator	framework/integrators/NPTVerletIntegrator.h	/^  class NPTVerletIntegrator: public STSIntegrator {$/;"	c	namespace:ProtoMol
NUMSW	framework/topology/CnSwitchingFunction.h	21;"	d
NUMSWCM	framework/topology/CmpCnCnSwitchingFunction.h	21;"	d
NV	framework/base/LookUpTableBase.h	/^    enum{NV=4};$/;"	e	enum:ProtoMol::LookUpTableBase::<anonymous>
NVT	framework/integrators/PaulTrapIntegrator.h	/^      NVT,$/;"	e	enum:ProtoMol::ThermostatEnum::Enum
NVTVERLETINTEGRATOR_H	framework/integrators/NVTVerletIntegrator.h	3;"	d
NVTVerletIntegrator	framework/integrators/NVTVerletIntegrator.cpp	/^  NVTVerletIntegrator::NVTVerletIntegrator(): STSIntegrator(),$/;"	f	class:ProtoMol::NVTVerletIntegrator
NVTVerletIntegrator	framework/integrators/NVTVerletIntegrator.cpp	/^  NVTVerletIntegrator::NVTVerletIntegrator(Real timestep,$/;"	f	class:ProtoMol::NVTVerletIntegrator
NVTVerletIntegrator	framework/integrators/NVTVerletIntegrator.h	/^  class NVTVerletIntegrator: public STSIntegrator {$/;"	c	namespace:ProtoMol
NVT_GLOBAL	framework/integrators/PaulTrapIntegrator.h	/^      NVT_GLOBAL,$/;"	e	enum:ProtoMol::ThermostatEnum::Enum
NVT_IND	framework/integrators/PaulTrapIntegrator.h	/^      NVT_IND,$/;"	e	enum:ProtoMol::ThermostatEnum::Enum
NVT_SHELL	framework/integrators/PaulTrapIntegrator.h	/^      NVT_SHELL,$/;"	e	enum:ProtoMol::ThermostatEnum::Enum
NVT_ZERO	framework/integrators/PaulTrapIntegrator.h	/^      NVT_ZERO,$/;"	e	enum:ProtoMol::ThermostatEnum::Enum
Nbfix	framework/base/PAR.h	/^      Nbfix(){}$/;"	f	struct:ProtoMol::PAR::Nbfix
Nbfix	framework/base/PAR.h	/^      Nbfix(int a_, std::string b_, std::string c, Real d, Real e, Real f, Real g):number(a_),atom1(b_),atom2(c),a(d),b(e),a14(f),b14(g){}$/;"	f	struct:ProtoMol::PAR::Nbfix
Nbfix	framework/base/PAR.h	/^    struct Nbfix{$/;"	s	class:ProtoMol::PAR
Negative	framework/base/ConstraintValueType.h	/^    typedef Enum2Type<NEGATIVE> Negative;$/;"	t	class:ProtoMol::ConstraintValueEnum
Ngrp	framework/base/PSF.h	/^      Ngrp():number(0),atom1(0),atom2(0),atom3(0){}$/;"	f	struct:ProtoMol::PSF::Ngrp
Ngrp	framework/base/PSF.h	/^      Ngrp(int a, int b, int c, int d):number(a),atom1(b),atom2(c),atom3(d){}$/;"	f	struct:ProtoMol::PSF::Ngrp
Ngrp	framework/base/PSF.h	/^    struct Ngrp {$/;"	s	class:ProtoMol::PSF
NoConstraint	framework/forces/oneAtomContraints.h	/^  struct NoConstraint {$/;"	s	namespace:ProtoMol
NoConstraints	framework/base/ConstraintValueType.h	/^    typedef Enum2Type<NOCONSTRAINTS> NoConstraints;$/;"	t	class:ProtoMol::ConstraintValueEnum
NonStandardIntegrator	framework/integrators/NonStandardIntegrator.h	/^    NonStandardIntegrator(){};$/;"	f	class:ProtoMol::NonStandardIntegrator
NonStandardIntegrator	framework/integrators/NonStandardIntegrator.h	/^    NonStandardIntegrator(ForceGroup* forceGroup):Integrator(forceGroup){};$/;"	f	class:ProtoMol::NonStandardIntegrator
NonStandardIntegrator	framework/integrators/NonStandardIntegrator.h	/^  class NonStandardIntegrator: public Integrator {$/;"	c	namespace:ProtoMol
Nonbonded	framework/base/PAR.h	/^      Nonbonded(){}$/;"	f	struct:ProtoMol::PAR::Nonbonded
Nonbonded	framework/base/PAR.h	/^      Nonbonded(int a, std::string b, Real c, Real d, Real e, bool f, bool g, Real h, Real i, Real j, bool k):$/;"	f	struct:ProtoMol::PAR::Nonbonded
Nonbonded	framework/base/PAR.h	/^    struct Nonbonded{$/;"	s	class:ProtoMol::PAR
Nonbonded	framework/base/PSF.h	/^      Nonbonded():number(0),atom1(0){}$/;"	f	struct:ProtoMol::PSF::Nonbonded
Nonbonded	framework/base/PSF.h	/^      Nonbonded(int a, int b):number(a),atom1(b){}$/;"	f	struct:ProtoMol::PSF::Nonbonded
Nonbonded	framework/base/PSF.h	/^    struct Nonbonded {$/;"	s	class:ProtoMol::PSF
NonbondedCutoffForce	framework/forces/NonbondedCutoffForce.h	/^    NonbondedCutoffForce():myCutoff(0.0){}$/;"	f	class:ProtoMol::NonbondedCutoffForce
NonbondedCutoffForce	framework/forces/NonbondedCutoffForce.h	/^    NonbondedCutoffForce(Real cutoff, TOneAtomPair oneAtomPair) : $/;"	f	class:ProtoMol::NonbondedCutoffForce
NonbondedCutoffForce	framework/forces/NonbondedCutoffForce.h	/^  class NonbondedCutoffForce: public TForce, private NonbondedCutoffForceBase {$/;"	c	namespace:ProtoMol
NonbondedCutoffForceBase	framework/forces/NonbondedCutoffForceBase.h	/^  class NonbondedCutoffForceBase {$/;"	c	namespace:ProtoMol
NonbondedCutoffMollyForce	framework/forces/NonbondedCutoffMollyForce.h	/^    NonbondedCutoffMollyForce():NonbondedCutoffForce<TCellManager,TOneAtomPair,MollyForce,NonbondedCutoffMollyForce>(){}$/;"	f	class:ProtoMol::NonbondedCutoffMollyForce
NonbondedCutoffMollyForce	framework/forces/NonbondedCutoffMollyForce.h	/^    NonbondedCutoffMollyForce(Real cutoff, TOneAtomPair oneAtomPair) : NonbondedCutoffForce<TCellManager,TOneAtomPair,MollyForce,NonbondedCutoffMollyForce>(cutoff,oneAtomPair) {}$/;"	f	class:ProtoMol::NonbondedCutoffMollyForce
NonbondedCutoffMollyForce	framework/forces/NonbondedCutoffMollyForce.h	/^  class NonbondedCutoffMollyForce: public NonbondedCutoffForce<TCellManager,TOneAtomPair,MollyForce,NonbondedCutoffMollyForce<TCellManager,TOneAtomPair> > {$/;"	c	namespace:ProtoMol
NonbondedCutoffSystemForce	framework/forces/NonbondedCutoffSystemForce.h	/^    NonbondedCutoffSystemForce() : $/;"	f	class:ProtoMol::NonbondedCutoffSystemForce
NonbondedCutoffSystemForce	framework/forces/NonbondedCutoffSystemForce.h	/^    NonbondedCutoffSystemForce(Real cutoff, TOneAtomPair oneAtomPair) : $/;"	f	class:ProtoMol::NonbondedCutoffSystemForce
NonbondedCutoffSystemForce	framework/forces/NonbondedCutoffSystemForce.h	/^  class NonbondedCutoffSystemForce: public NonbondedCutoffForce<TCellManager,TOneAtomPair,SystemForce,NonbondedCutoffSystemForce<TCellManager,TOneAtomPair> > {$/;"	c	namespace:ProtoMol
NonbondedFullEwaldSystemForce	framework/forces/NonbondedFullEwaldSystemForce.h	/^				TSwitchingFunction>::NonbondedFullEwaldSystemForce() $/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
NonbondedFullEwaldSystemForce	framework/forces/NonbondedFullEwaldSystemForce.h	/^				TSwitchingFunction>::NonbondedFullEwaldSystemForce(Real alpha, Real accuracy, Real expansionFactor)$/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
NonbondedFullEwaldSystemForce	framework/forces/NonbondedFullEwaldSystemForce.h	/^  class NonbondedFullEwaldSystemForce: public SystemForce, private NonbondedFullEwaldSystemForceBase {$/;"	c	namespace:ProtoMol
NonbondedFullEwaldSystemForceBase	framework/forces/NonbondedFullEwaldSystemForceBase.h	/^  class NonbondedFullEwaldSystemForceBase {$/;"	c	namespace:ProtoMol
NonbondedFullSystemForce	framework/forces/NonbondedFullSystemForce.h	/^    NonbondedFullSystemForce(): SystemForce(),myCutoff(0.0),myBlockSize(0){};$/;"	f	class:ProtoMol::NonbondedFullSystemForce
NonbondedFullSystemForce	framework/forces/NonbondedFullSystemForce.h	/^    NonbondedFullSystemForce(Real cutoff, TOneAtomPair oneAtomPair, unsigned int blockSize = defaultBlockSize) :$/;"	f	class:ProtoMol::NonbondedFullSystemForce
NonbondedFullSystemForce	framework/forces/NonbondedFullSystemForce.h	/^  class NonbondedFullSystemForce: public SystemForce, private NonbondedFullSystemForceBase {$/;"	c	namespace:ProtoMol
NonbondedFullSystemForceBase	framework/forces/NonbondedFullSystemForceBase.h	/^  class NonbondedFullSystemForceBase {$/;"	c	namespace:ProtoMol
NonbondedMultiGridSystemForce	framework/forces/NonbondedMultiGridSystemForce.h	/^				smooth>::NonbondedMultiGridSystemForce() : $/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
NonbondedMultiGridSystemForce	framework/forces/NonbondedMultiGridSystemForce.h	/^				smooth>::NonbondedMultiGridSystemForce(unsigned int nx, $/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
NonbondedMultiGridSystemForce	framework/forces/NonbondedMultiGridSystemForce.h	/^  class NonbondedMultiGridSystemForce: public SystemForce, private NonbondedMultiGridSystemForceBase {$/;"	c	namespace:ProtoMol
NonbondedMultiGridSystemForceBase	framework/forces/NonbondedMultiGridSystemForceBase.h	/^  class NonbondedMultiGridSystemForceBase {$/;"	c	namespace:ProtoMol
NonbondedPMEwaldSystemForce	framework/forces/NonbondedPMEwaldSystemForce.h	/^			      TSwitchingFunction>::NonbondedPMEwaldSystemForce() : SystemForce(),myCached(false),myExpansionFactor(3.0),myTRate(0.0),myAccuracy(0.0),myAlpha(-1.0),myAlphaDefault(true),myRc(0.0),myKc(0.0),myV(-1.0),myNX(0),myNY(0),myNZ(0),myInterOrder(0) {$/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
NonbondedPMEwaldSystemForce	framework/forces/NonbondedPMEwaldSystemForce.h	/^			      TSwitchingFunction>::NonbondedPMEwaldSystemForce(unsigned int nx, unsigned int ny, unsigned int nz, unsigned int order, Real cutoff, Real accuracy, Real alpha, Real expansionFactor) : SystemForce(),myCached(false),myExpansionFactor(expansionFactor),myTRate(0.0),myAccuracy(accuracy),myAlpha(alpha),myAlphaDefault(alpha<= 0.0),myRc(cutoff),myKc(0.0),myV(-1.0),myNX(nx),myNY(ny),myNZ(nz),myInterOrder(order){$/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
NonbondedPMEwaldSystemForce	framework/forces/NonbondedPMEwaldSystemForce.h	/^  class NonbondedPMEwaldSystemForce: public SystemForce, private NonbondedPMEwaldSystemForceBase {$/;"	c	namespace:ProtoMol
NonbondedPMEwaldSystemForceBase	framework/forces/NonbondedPMEwaldSystemForceBase.h	/^  class NonbondedPMEwaldSystemForceBase {$/;"	c	namespace:ProtoMol
NonbondedSimpleFullSystemForce	framework/forces/NonbondedSimpleFullSystemForce.h	/^    NonbondedSimpleFullSystemForce(): SystemForce(),myBlockSize(0),myCached(false){}; $/;"	f	class:ProtoMol::NonbondedSimpleFullSystemForce
NonbondedSimpleFullSystemForce	framework/forces/NonbondedSimpleFullSystemForce.h	/^    NonbondedSimpleFullSystemForce(TOneAtomPair oneAtomPair, unsigned int blockSize = defaultBlockSize) : $/;"	f	class:ProtoMol::NonbondedSimpleFullSystemForce
NonbondedSimpleFullSystemForce	framework/forces/NonbondedSimpleFullSystemForce.h	/^  class NonbondedSimpleFullSystemForce: public SystemForce, private NonbondedSimpleFullSystemForceBase {$/;"	c	namespace:ProtoMol
NonbondedSimpleFullSystemForceBase	framework/forces/NonbondedSimpleFullSystemForceBase.h	/^  class NonbondedSimpleFullSystemForceBase {$/;"	c	namespace:ProtoMol
NoseNVTLeapfrogIntegrator	framework/integrators/NoseNVTLeapfrogIntegrator.cpp	/^  NoseNVTLeapfrogIntegrator::NoseNVTLeapfrogIntegrator(): STSIntegrator(),$/;"	f	class:ProtoMol::NoseNVTLeapfrogIntegrator
NoseNVTLeapfrogIntegrator	framework/integrators/NoseNVTLeapfrogIntegrator.cpp	/^  NoseNVTLeapfrogIntegrator::NoseNVTLeapfrogIntegrator(Real timestep,$/;"	f	class:ProtoMol::NoseNVTLeapfrogIntegrator
NoseNVTLeapfrogIntegrator	framework/integrators/NoseNVTLeapfrogIntegrator.h	/^  class NoseNVTLeapfrogIntegrator : public STSIntegrator {$/;"	c	namespace:ProtoMol
NotEmpty	framework/base/ConstraintValueType.h	/^    typedef Enum2Type<NOTEMPTY> NotEmpty;$/;"	t	class:ProtoMol::ConstraintValueEnum
NotNegative	framework/base/ConstraintValueType.h	/^    typedef Enum2Type<NOTNEGATIVE> NotNegative;$/;"	t	class:ProtoMol::ConstraintValueEnum
NotPositive	framework/base/ConstraintValueType.h	/^    typedef Enum2Type<NOTPOSITIVE> NotPositive;$/;"	t	class:ProtoMol::ConstraintValueEnum
NotSameMoleculeConstraint	framework/forces/oneAtomContraints.h	/^  struct NotSameMoleculeConstraint {$/;"	s	namespace:ProtoMol
NotZero	framework/base/ConstraintValueType.h	/^    typedef Enum2Type<NOTZERO> NotZero;$/;"	t	class:ProtoMol::ConstraintValueEnum
NumAtoms	framework/integrators/NPTVerletIntegrator.h	/^    unsigned int NumAtoms;   \/\/  Total # of atoms in the system.$/;"	m	class:ProtoMol::NPTVerletIntegrator
NumAtoms	framework/integrators/NVTVerletIntegrator.h	/^    unsigned int NumAtoms;   \/\/  Total # of atoms in the system.$/;"	m	class:ProtoMol::NVTVerletIntegrator
OBJECTDEFINITION_H	framework/base/ObjectDefinition.h	3;"	d
ONE2	framework/topology/ExclusionType.h	/^      ONE2,         \/\/\/< exclude 1. neighbors$/;"	e	enum:ProtoMol::ExclusionEnum::Enum
ONE3	framework/topology/ExclusionType.h	/^      ONE3,         \/\/\/< exclude 1. and 2. neighbors$/;"	e	enum:ProtoMol::ExclusionEnum::Enum
ONE4	framework/topology/ExclusionType.h	/^      ONE4,         \/\/\/< exclude 1., 2. and 3. neighbors$/;"	e	enum:ProtoMol::ExclusionEnum::Enum
ONE4MODIFIED	framework/topology/ExclusionType.h	/^      ONE4MODIFIED, \/\/\/< exclude 1. and 2. and modify 3. neighbors$/;"	e	enum:ProtoMol::ExclusionEnum::Enum
ONEATOMCONSTRAINTS_H	framework/forces/oneAtomContraints.h	3;"	d
ONEATOMPAIRFULL_H	framework/forces/OneAtomPairFull.h	3;"	d
ONEATOMPAIRTWOFULL_H	framework/forces/OneAtomPairTwoFull.h	3;"	d
ONEATOMPAIRTWO_H	framework/forces/OneAtomPairTwo.h	3;"	d
ONEATOMPAIR_H	framework/forces/OneAtomPair.h	3;"	d
ONEMOLLYPAIRTWO_H	framework/forces/OneMollyPairTwo.h	3;"	d
ONEMOLLYPAIR_H	framework/forces/OneMollyPair.h	3;"	d
ONLY_WATER	framework/topology/topologyutilities.h	/^  enum waterOption {IGNORE_WATER, ONLY_WATER, ALL};$/;"	e	enum:ProtoMol::waterOption
OTHER	framework/base/ScalarStructure.h	/^      OTHER,$/;"	e	enum:ProtoMol::ScalarStructure::Index
OUTPUTBSDL_H	framework/frontend/OutputBSDL.h	3;"	d
OUTPUTCACHE_H	framework/frontend/OutputCache.h	3;"	d
OUTPUTCOLLECTION_H	framework/frontend/OutputCollection.h	3;"	d
OUTPUTDCDTRAJECTORY_H	framework/frontend/OutputDCDTrajectory.h	3;"	d
OUTPUTDIFFUSION_H	framework/frontend/OutputDiffusion.h	3;"	d
OUTPUTDIHEDRALS_H	framework/frontend/OutputDihedrals.h	3;"	d
OUTPUTENERGIES_H	framework/frontend/OutputEnergies.h	3;"	d
OUTPUTFACTORYDETAILS_H	framework/frontend/OutputFactoryDetails.h	3;"	d
OUTPUTFACTORY_H	framework/frontend/OutputFactory.h	3;"	d
OUTPUTFILE_H	framework/frontend/OutputFile.h	3;"	d
OUTPUTFINALPDBPOS_H	framework/frontend/OutputFinalPDBPos.h	3;"	d
OUTPUTFINALXYZBINPOS_H	framework/frontend/OutputFinalXYZBinPos.h	3;"	d
OUTPUTFINALXYZBINVEL_H	framework/frontend/OutputFinalXYZBinVel.h	3;"	d
OUTPUTFINALXYZPOS_H	framework/frontend/OutputFinalXYZPos.h	3;"	d
OUTPUTFINALXYZVEL_H	framework/frontend/OutputFinalXYZVel.h	3;"	d
OUTPUTMOMENTUM_H	framework/frontend/OutputMomentum.h	3;"	d
OUTPUTPAULTRAP_H	framework/frontend/OutputPaulTrap.h	3;"	d
OUTPUTPDBFRAMEPOS_H	framework/frontend/OutputPDBFramePos.h	3;"	d
OUTPUTREMEXCHANGERATE_H	framework/frontend/OutputREMExchangeRate.h	3;"	d
OUTPUTREMHISTORY_H	framework/frontend/OutputREMHistory.h	3;"	d
OUTPUTSCREEN_H	framework/frontend/OutputScreen.h	3;"	d
OUTPUTSTATE_H	framework/frontend/OutputState.h	3;"	d
OUTPUTTEMPERATURES_H	framework/frontend/OutputTemperatures.h	3;"	d
OUTPUTXYZBINTRAJECTORYPOS_H	framework/frontend/OutputXYZBinTrajectoryPos.h	3;"	d
OUTPUTXYZBINTRAJECTORYVEL_H	framework/frontend/OutputXYZBinTrajectoryVel.h	3;"	d
OUTPUTXYZTRAJECTORYFORCE_H	framework/frontend/OutputXYZTrajectoryForce.h	3;"	d
OUTPUTXYZTRAJECTORYPOS_H	framework/frontend/OutputXYZTrajectoryPos.h	3;"	d
OUTPUTXYZTRAJECTORYVEL_H	framework/frontend/OutputXYZTrajectoryVel.h	3;"	d
OUTPUT_H	framework/frontend/Output.h	3;"	d
ObjectDefinition	framework/base/ObjectDefinition.h	/^    ObjectDefinition(){}$/;"	f	struct:ProtoMol::ObjectDefinition
ObjectDefinition	framework/base/ObjectDefinition.h	/^    ObjectDefinition(const std::string& i,const std::vector<Parameter>& p):id(i),parameters(p){}$/;"	f	struct:ProtoMol::ObjectDefinition
ObjectDefinition	framework/base/ObjectDefinition.h	/^  struct ObjectDefinition {$/;"	s	namespace:ProtoMol
OneAtomPair	framework/forces/OneAtomPair.h	/^    OneAtomPair(): switchingFunction(), nonbondedForceFunction(){};$/;"	f	class:ProtoMol::OneAtomPair
OneAtomPair	framework/forces/OneAtomPair.h	/^    OneAtomPair(TNonbondedForce nF,$/;"	f	class:ProtoMol::OneAtomPair
OneAtomPair	framework/forces/OneAtomPair.h	/^  class OneAtomPair {$/;"	c	namespace:ProtoMol
OneAtomPairFull	framework/forces/OneAtomPairFull.h	/^    OneAtomPairFull(): switchingFunction(), nonbondedForceFunction(){};$/;"	f	class:ProtoMol::OneAtomPairFull
OneAtomPairFull	framework/forces/OneAtomPairFull.h	/^    OneAtomPairFull(TNonbondedForce nF,$/;"	f	class:ProtoMol::OneAtomPairFull
OneAtomPairFull	framework/forces/OneAtomPairFull.h	/^  class OneAtomPairFull {$/;"	c	namespace:ProtoMol
OneAtomPairTwo	framework/forces/OneAtomPairTwo.h	/^    OneAtomPairTwo(){}$/;"	f	class:ProtoMol::OneAtomPairTwo
OneAtomPairTwo	framework/forces/OneAtomPairTwo.h	/^    OneAtomPairTwo(TNonbondedForceFirst f1, $/;"	f	class:ProtoMol::OneAtomPairTwo
OneAtomPairTwo	framework/forces/OneAtomPairTwo.h	/^  class OneAtomPairTwo {$/;"	c	namespace:ProtoMol
OneAtomPairTwoFull	framework/forces/OneAtomPairTwoFull.h	/^    OneAtomPairTwoFull(){}$/;"	f	class:ProtoMol::OneAtomPairTwoFull
OneAtomPairTwoFull	framework/forces/OneAtomPairTwoFull.h	/^    OneAtomPairTwoFull(TNonbondedForceFirst f1, $/;"	f	class:ProtoMol::OneAtomPairTwoFull
OneAtomPairTwoFull	framework/forces/OneAtomPairTwoFull.h	/^  class OneAtomPairTwoFull {$/;"	c	namespace:ProtoMol
OneMollyPair	framework/forces/OneMollyPair.h	/^    OneMollyPair(): switchingFunction(), nonbondedForceFunction(){};$/;"	f	class:ProtoMol::OneMollyPair
OneMollyPair	framework/forces/OneMollyPair.h	/^    OneMollyPair(TNonbondedForce nF,$/;"	f	class:ProtoMol::OneMollyPair
OneMollyPair	framework/forces/OneMollyPair.h	/^  class OneMollyPair {$/;"	c	namespace:ProtoMol
OneMollyPairTwo	framework/forces/OneMollyPairTwo.h	/^    OneMollyPairTwo(){}$/;"	f	class:ProtoMol::OneMollyPairTwo
OneMollyPairTwo	framework/forces/OneMollyPairTwo.h	/^    OneMollyPairTwo(TNonbondedForceFirst f1, $/;"	f	class:ProtoMol::OneMollyPairTwo
OneMollyPairTwo	framework/forces/OneMollyPairTwo.h	/^  class OneMollyPairTwo {$/;"	c	namespace:ProtoMol
Output	framework/frontend/Output.cpp	/^    Output::Output(int freq):Makeable(),$/;"	f	class:ProtoMol::Output
Output	framework/frontend/Output.cpp	/^  Output::Output():Makeable(),$/;"	f	class:ProtoMol::Output
Output	framework/frontend/Output.h	/^  class Output : public Makeable {$/;"	c	namespace:ProtoMol
OutputBSDL	framework/frontend/OutputBSDL.cpp	/^  OutputBSDL::OutputBSDL():Output(),myFilename(""),myMinimalImage(false),myIncludeView(true),myWater(true),myCounter(0),myScale(1.0),myMolecularDistance(false){}$/;"	f	class:ProtoMol::OutputBSDL
OutputBSDL	framework/frontend/OutputBSDL.cpp	/^  OutputBSDL::OutputBSDL(const string& filename, int freq, bool minimal, bool include, bool water):Output(freq),myFilename(filename),myMinimalImage(minimal),myIncludeView(include),myWater(water),myCounter(0),myScale(1.0),myMolecularDistance(false){}$/;"	f	class:ProtoMol::OutputBSDL
OutputBSDL	framework/frontend/OutputBSDL.h	/^  class OutputBSDL : public Output {$/;"	c	namespace:ProtoMol
OutputCache	framework/frontend/OutputCache.cpp	/^  OutputCache::OutputCache():myConfig(NULL), $/;"	f	class:ProtoMol::OutputCache
OutputCache	framework/frontend/OutputCache.h	/^  class OutputCache  {$/;"	c	namespace:ProtoMol
OutputCollection	framework/frontend/OutputCollection.cpp	/^  OutputCollection::OutputCollection():myCache(new OutputCache()),$/;"	f	class:ProtoMol::OutputCollection
OutputCollection	framework/frontend/OutputCollection.h	/^  class OutputCollection  {$/;"	c	namespace:ProtoMol
OutputDCDTrajectory	framework/frontend/OutputDCDTrajectory.cpp	/^  OutputDCDTrajectory::OutputDCDTrajectory():Output(),myDCD(NULL),myMinimalImage(false){}$/;"	f	class:ProtoMol::OutputDCDTrajectory
OutputDCDTrajectory	framework/frontend/OutputDCDTrajectory.cpp	/^  OutputDCDTrajectory::OutputDCDTrajectory(const string& filename, int freq, bool minimal):Output(freq),myDCD(new DCDTrajectoryWriter(filename)),myMinimalImage(minimal){}$/;"	f	class:ProtoMol::OutputDCDTrajectory
OutputDCDTrajectory	framework/frontend/OutputDCDTrajectory.h	/^  class OutputDCDTrajectory : public Output {$/;"	c	namespace:ProtoMol
OutputDiffusion	framework/frontend/OutputDiffusion.cpp	/^  OutputDiffusion::OutputDiffusion(): OutputFile(){}$/;"	f	class:ProtoMol::OutputDiffusion
OutputDiffusion	framework/frontend/OutputDiffusion.cpp	/^  OutputDiffusion::OutputDiffusion(const string& filename, $/;"	f	class:ProtoMol::OutputDiffusion
OutputDiffusion	framework/frontend/OutputDiffusion.h	/^  class OutputDiffusion : public OutputFile {$/;"	c	namespace:ProtoMol
OutputDihedrals	framework/frontend/OutputDihedrals.cpp	/^  OutputDihedrals::OutputDihedrals(): OutputFile(),$/;"	f	class:ProtoMol::OutputDihedrals
OutputDihedrals	framework/frontend/OutputDihedrals.cpp	/^  OutputDihedrals::OutputDihedrals(const string& filename, $/;"	f	class:ProtoMol::OutputDihedrals
OutputDihedrals	framework/frontend/OutputDihedrals.h	/^  class OutputDihedrals : public OutputFile {$/;"	c	namespace:ProtoMol
OutputEnergies	framework/frontend/OutputEnergies.cpp	/^  OutputEnergies::OutputEnergies():OutputFile(),myDoMolecularTemperature(false),myDoShadow(false){}$/;"	f	class:ProtoMol::OutputEnergies
OutputEnergies	framework/frontend/OutputEnergies.cpp	/^  OutputEnergies::OutputEnergies(const string& filename, int freq, int cacheFreq, int cacheSize, Real closeTime, bool doMolTemp, bool doShadow):OutputFile(filename,freq,cacheFreq,cacheSize,closeTime),myDoMolecularTemperature(doMolTemp),myDoShadow(doShadow){}$/;"	f	class:ProtoMol::OutputEnergies
OutputEnergies	framework/frontend/OutputEnergies.h	/^  class OutputEnergies : public OutputFile {$/;"	c	namespace:ProtoMol
OutputFactory	framework/frontend/OutputFactory.h	/^  typedef Factory<Output> OutputFactory;$/;"	t	namespace:ProtoMol
OutputFactoryDetails	framework/frontend/OutputFactoryDetails.cpp	/^  OutputFactoryDetails::OutputFactoryDetails():FactoryBase<Output>(){$/;"	f	class:ProtoMol::OutputFactoryDetails
OutputFactoryDetails	framework/frontend/OutputFactoryDetails.cpp	/^  OutputFactoryDetails::OutputFactoryDetails(const OutputFactoryDetails&){}$/;"	f	class:ProtoMol::OutputFactoryDetails
OutputFactoryDetails	framework/frontend/OutputFactoryDetails.h	/^  class OutputFactoryDetails : public FactoryBase <Output> {$/;"	c	namespace:ProtoMol
OutputFile	framework/frontend/OutputFile.cpp	/^  OutputFile::OutputFile():Output(),myFilename(""),myCacheFreq(0),myCount(0),myCacheSize(0),myCloseTime(0.0){}$/;"	f	class:ProtoMol::OutputFile
OutputFile	framework/frontend/OutputFile.cpp	/^  OutputFile::OutputFile(const string& filename, $/;"	f	class:ProtoMol::OutputFile
OutputFile	framework/frontend/OutputFile.h	/^  class OutputFile : public Output {$/;"	c	namespace:ProtoMol
OutputFinalPDBPos	framework/frontend/OutputFinalPDBPos.cpp	/^  OutputFinalPDBPos::OutputFinalPDBPos():Output(1),myFilename(""),myMinimalImage(false){}$/;"	f	class:ProtoMol::OutputFinalPDBPos
OutputFinalPDBPos	framework/frontend/OutputFinalPDBPos.cpp	/^  OutputFinalPDBPos::OutputFinalPDBPos(const string& filename, bool minimal):Output(1),myFilename(filename),myMinimalImage(minimal){}$/;"	f	class:ProtoMol::OutputFinalPDBPos
OutputFinalPDBPos	framework/frontend/OutputFinalPDBPos.h	/^  class OutputFinalPDBPos : public Output {$/;"	c	namespace:ProtoMol
OutputFinalXYZBinPos	framework/frontend/OutputFinalXYZBinPos.cpp	/^  OutputFinalXYZBinPos::OutputFinalXYZBinPos():Output(1),myFilename(""),myMinimalImage(false){}$/;"	f	class:ProtoMol::OutputFinalXYZBinPos
OutputFinalXYZBinPos	framework/frontend/OutputFinalXYZBinPos.cpp	/^  OutputFinalXYZBinPos::OutputFinalXYZBinPos(const string& filename, bool minimal):Output(1),myFilename(filename),myMinimalImage(minimal){}$/;"	f	class:ProtoMol::OutputFinalXYZBinPos
OutputFinalXYZBinPos	framework/frontend/OutputFinalXYZBinPos.h	/^  class OutputFinalXYZBinPos : public Output {$/;"	c	namespace:ProtoMol
OutputFinalXYZBinVel	framework/frontend/OutputFinalXYZBinVel.cpp	/^  OutputFinalXYZBinVel::OutputFinalXYZBinVel():Output(1),myFilename(""){}$/;"	f	class:ProtoMol::OutputFinalXYZBinVel
OutputFinalXYZBinVel	framework/frontend/OutputFinalXYZBinVel.cpp	/^  OutputFinalXYZBinVel::OutputFinalXYZBinVel(const string& filename):Output(1),myFilename(filename){}$/;"	f	class:ProtoMol::OutputFinalXYZBinVel
OutputFinalXYZBinVel	framework/frontend/OutputFinalXYZBinVel.h	/^  class OutputFinalXYZBinVel : public Output {$/;"	c	namespace:ProtoMol
OutputFinalXYZPos	framework/frontend/OutputFinalXYZPos.cpp	/^  OutputFinalXYZPos::OutputFinalXYZPos():Output(1),myFilename(""),myMinimalImage(false){}$/;"	f	class:ProtoMol::OutputFinalXYZPos
OutputFinalXYZPos	framework/frontend/OutputFinalXYZPos.cpp	/^  OutputFinalXYZPos::OutputFinalXYZPos(const string& filename, bool minimal):Output(1),myFilename(filename),myMinimalImage(minimal){}$/;"	f	class:ProtoMol::OutputFinalXYZPos
OutputFinalXYZPos	framework/frontend/OutputFinalXYZPos.h	/^  class OutputFinalXYZPos : public Output {$/;"	c	namespace:ProtoMol
OutputFinalXYZVel	framework/frontend/OutputFinalXYZVel.cpp	/^  OutputFinalXYZVel::OutputFinalXYZVel():Output(1),myFilename(""){}$/;"	f	class:ProtoMol::OutputFinalXYZVel
OutputFinalXYZVel	framework/frontend/OutputFinalXYZVel.cpp	/^  OutputFinalXYZVel::OutputFinalXYZVel(const string& filename):Output(1),myFilename(filename){}$/;"	f	class:ProtoMol::OutputFinalXYZVel
OutputFinalXYZVel	framework/frontend/OutputFinalXYZVel.h	/^  class OutputFinalXYZVel : public Output {$/;"	c	namespace:ProtoMol
OutputMomentum	framework/frontend/OutputMomentum.cpp	/^  OutputMomentum::OutputMomentum(): OutputFile(){}$/;"	f	class:ProtoMol::OutputMomentum
OutputMomentum	framework/frontend/OutputMomentum.cpp	/^  OutputMomentum::OutputMomentum(const string& filename, $/;"	f	class:ProtoMol::OutputMomentum
OutputMomentum	framework/frontend/OutputMomentum.h	/^  class OutputMomentum : public OutputFile {$/;"	c	namespace:ProtoMol
OutputPDBFramePos	framework/frontend/OutputPDBFramePos.cpp	/^  OutputPDBFramePos::OutputPDBFramePos():Output(),myFilename(""),myMinimalImage(false){}$/;"	f	class:ProtoMol::OutputPDBFramePos
OutputPDBFramePos	framework/frontend/OutputPDBFramePos.cpp	/^  OutputPDBFramePos::OutputPDBFramePos(const string& filename, int freq, bool minimal):Output(freq),myFilename(filename),myMinimalImage(minimal){}$/;"	f	class:ProtoMol::OutputPDBFramePos
OutputPDBFramePos	framework/frontend/OutputPDBFramePos.h	/^  class OutputPDBFramePos : public Output {$/;"	c	namespace:ProtoMol
OutputPaulTrap	framework/frontend/OutputPaulTrap.cpp	/^  OutputPaulTrap::OutputPaulTrap()$/;"	f	class:ProtoMol::OutputPaulTrap
OutputPaulTrap	framework/frontend/OutputPaulTrap.cpp	/^  OutputPaulTrap::OutputPaulTrap(const std::string& filename, int freq, int cacheFreq, int cacheSize, $/;"	f	class:ProtoMol::OutputPaulTrap
OutputPaulTrap	framework/frontend/OutputPaulTrap.h	/^  class OutputPaulTrap : public OutputFile {$/;"	c	namespace:ProtoMol
OutputREMExchangeRate	framework/frontend/OutputREMExchangeRate.cpp	/^  OutputREMExchangeRate::OutputREMExchangeRate(): OutputFile() {}$/;"	f	class:ProtoMol::OutputREMExchangeRate
OutputREMExchangeRate	framework/frontend/OutputREMExchangeRate.cpp	/^  OutputREMExchangeRate::OutputREMExchangeRate(const string &filename, int freq, int cacheFreq, int cacheSize, Real closeTime): OutputFile(filename, freq, cacheFreq, cacheSize, closeTime) {}$/;"	f	class:ProtoMol::OutputREMExchangeRate
OutputREMExchangeRate	framework/frontend/OutputREMExchangeRate.h	/^  class OutputREMExchangeRate : public OutputFile {$/;"	c	namespace:ProtoMol
OutputREMHistoryFile	framework/frontend/OutputREMHistory.cpp	/^  OutputREMHistoryFile::OutputREMHistoryFile(): OutputFile() {}$/;"	f	class:ProtoMol::OutputREMHistoryFile
OutputREMHistoryFile	framework/frontend/OutputREMHistory.cpp	/^  OutputREMHistoryFile::OutputREMHistoryFile(const string &filename, int freq, int cacheFreq, int cacheSize, Real closeTime): OutputFile(filename, freq, cacheFreq, cacheSize, closeTime) {}$/;"	f	class:ProtoMol::OutputREMHistoryFile
OutputREMHistoryFile	framework/frontend/OutputREMHistory.h	/^  class OutputREMHistoryFile : public OutputFile {$/;"	c	namespace:ProtoMol
OutputScreen	framework/frontend/OutputScreen.cpp	/^  OutputScreen::OutputScreen():Output(),myUnit("fs"),myFactor(1.0){}$/;"	f	class:ProtoMol::OutputScreen
OutputScreen	framework/frontend/OutputScreen.cpp	/^  OutputScreen::OutputScreen(int freq):Output(freq),myUnit("fs"),myFactor(1.0){}$/;"	f	class:ProtoMol::OutputScreen
OutputScreen	framework/frontend/OutputScreen.h	/^  class OutputScreen : public Output {$/;"	c	namespace:ProtoMol
OutputState	framework/frontend/OutputState.cpp	/^  OutputState::OutputState(): OutputFile(),$/;"	f	class:ProtoMol::OutputState
OutputState	framework/frontend/OutputState.cpp	/^  OutputState::OutputState(const string& filename, $/;"	f	class:ProtoMol::OutputState
OutputState	framework/frontend/OutputState.h	/^  class OutputState : public OutputFile {$/;"	c	namespace:ProtoMol
OutputTemperatures	framework/frontend/OutputTemperatures.cpp	/^  OutputTemperatures::OutputTemperatures():OutputFile(), mySeparateWater(true){}$/;"	f	class:ProtoMol::OutputTemperatures
OutputTemperatures	framework/frontend/OutputTemperatures.cpp	/^  OutputTemperatures::OutputTemperatures(const string& filename, $/;"	f	class:ProtoMol::OutputTemperatures
OutputTemperatures	framework/frontend/OutputTemperatures.h	/^  class OutputTemperatures : public OutputFile {$/;"	c	namespace:ProtoMol
OutputXYZBinTrajectoryPos	framework/frontend/OutputXYZBinTrajectoryPos.cpp	/^  OutputXYZBinTrajectoryPos::OutputXYZBinTrajectoryPos():Output(),myXYZ(NULL),myMinimalImage(false){}$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryPos
OutputXYZBinTrajectoryPos	framework/frontend/OutputXYZBinTrajectoryPos.cpp	/^  OutputXYZBinTrajectoryPos::OutputXYZBinTrajectoryPos(const string& filename, int freq, bool minimal):Output(freq),myXYZ(new XYZBinWriter(filename)),myMinimalImage(minimal){}$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryPos
OutputXYZBinTrajectoryPos	framework/frontend/OutputXYZBinTrajectoryPos.h	/^  class OutputXYZBinTrajectoryPos : public Output {$/;"	c	namespace:ProtoMol
OutputXYZBinTrajectoryVel	framework/frontend/OutputXYZBinTrajectoryVel.cpp	/^  OutputXYZBinTrajectoryVel::OutputXYZBinTrajectoryVel():Output(),myXYZ(){}$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryVel
OutputXYZBinTrajectoryVel	framework/frontend/OutputXYZBinTrajectoryVel.cpp	/^  OutputXYZBinTrajectoryVel::OutputXYZBinTrajectoryVel(const string& filename, int freq):Output(freq),myXYZ(new XYZBinWriter(filename)){}$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryVel
OutputXYZBinTrajectoryVel	framework/frontend/OutputXYZBinTrajectoryVel.h	/^  class OutputXYZBinTrajectoryVel : public Output {$/;"	c	namespace:ProtoMol
OutputXYZTrajectoryForce	framework/frontend/OutputXYZTrajectoryForce.cpp	/^  OutputXYZTrajectoryForce::OutputXYZTrajectoryForce():Output(),myXYZ(){}$/;"	f	class:ProtoMol::OutputXYZTrajectoryForce
OutputXYZTrajectoryForce	framework/frontend/OutputXYZTrajectoryForce.cpp	/^  OutputXYZTrajectoryForce::OutputXYZTrajectoryForce(const string& filename, int freq):Output(freq),myXYZ(new XYZTrajectoryWriter(filename)){}$/;"	f	class:ProtoMol::OutputXYZTrajectoryForce
OutputXYZTrajectoryForce	framework/frontend/OutputXYZTrajectoryForce.h	/^  class OutputXYZTrajectoryForce : public Output {$/;"	c	namespace:ProtoMol
OutputXYZTrajectoryPos	framework/frontend/OutputXYZTrajectoryPos.cpp	/^  OutputXYZTrajectoryPos::OutputXYZTrajectoryPos():Output(),myXYZ(NULL),myMinimalImage(false){}$/;"	f	class:ProtoMol::OutputXYZTrajectoryPos
OutputXYZTrajectoryPos	framework/frontend/OutputXYZTrajectoryPos.cpp	/^  OutputXYZTrajectoryPos::OutputXYZTrajectoryPos(const string& filename, int freq, bool minimal):Output(freq),myXYZ(new XYZTrajectoryWriter(filename)),myMinimalImage(minimal){}$/;"	f	class:ProtoMol::OutputXYZTrajectoryPos
OutputXYZTrajectoryPos	framework/frontend/OutputXYZTrajectoryPos.h	/^  class OutputXYZTrajectoryPos : public Output {$/;"	c	namespace:ProtoMol
OutputXYZTrajectoryVel	framework/frontend/OutputXYZTrajectoryVel.cpp	/^  OutputXYZTrajectoryVel::OutputXYZTrajectoryVel():Output(),myXYZ(){}$/;"	f	class:ProtoMol::OutputXYZTrajectoryVel
OutputXYZTrajectoryVel	framework/frontend/OutputXYZTrajectoryVel.cpp	/^  OutputXYZTrajectoryVel::OutputXYZTrajectoryVel(const string& filename, int freq):Output(freq),myXYZ(new XYZTrajectoryWriter(filename)){}$/;"	f	class:ProtoMol::OutputXYZTrajectoryVel
OutputXYZTrajectoryVel	framework/frontend/OutputXYZTrajectoryVel.h	/^  class OutputXYZTrajectoryVel : public Output {$/;"	c	namespace:ProtoMol
P	framework/base/mathutilities.h	/^    enum {N=Private::BinaryExponentHelper<P <= 1,P\/2>::N};$/;"	e	enum:ProtoMol::BinaryExponent::<anonymous>
PACKAGE	protomol_config.h	114;"	d
PACKAGE	protomol_config_windows.h	10;"	d
PACKAGE_BUGREPORT	protomol_config.h	117;"	d
PACKAGE_BUGREPORT	protomol_config_windows.h	13;"	d
PACKAGE_CITE	protomol_config.h	120;"	d
PACKAGE_CITE	protomol_config_windows.h	16;"	d
PACKAGE_COMPILER	protomol_config.h	123;"	d
PACKAGE_COMPILER	protomol_config_windows.h	19;"	d
PACKAGE_COMPILER_VERSION	protomol_config.h	126;"	d
PACKAGE_COMPILER_VERSION	protomol_config_windows.h	22;"	d
PACKAGE_HOMEPAGE	protomol_config.h	129;"	d
PACKAGE_HOMEPAGE	protomol_config_windows.h	25;"	d
PACKAGE_NAME	protomol_config.h	132;"	d
PACKAGE_NAME	protomol_config_windows.h	28;"	d
PACKAGE_STRING	protomol_config.h	135;"	d
PACKAGE_STRING	protomol_config_windows.h	31;"	d
PACKAGE_TARNAME	protomol_config.h	138;"	d
PACKAGE_TARNAME	protomol_config_windows.h	34;"	d
PACKAGE_UNAME	protomol_config.h	141;"	d
PACKAGE_UNAME	protomol_config_windows.h	37;"	d
PACKAGE_VERSION	protomol_config.h	144;"	d
PACKAGE_VERSION	protomol_config_windows.h	40;"	d
PACKAGE_WHOAMI	protomol_config.h	147;"	d
PACKAGE_WHOAMI	protomol_config_windows.h	43;"	d
PAR	framework/base/PAR.h	/^  class PAR{$/;"	c	namespace:ProtoMol
PARALLELTYPE_H	framework/parallel/ParallelType.h	3;"	d
PARALLEL_H	framework/parallel/Parallel.h	3;"	d
PARAMETER_H	framework/base/Parameter.h	3;"	d
PARREADER_H	framework/io/PARReader.h	3;"	d
PARReader	framework/io/PARReader.cpp	/^  PARReader::PARReader(PAR::CharmmTypeEnum charmmType):$/;"	f	class:ProtoMol::PARReader
PARReader	framework/io/PARReader.cpp	/^  PARReader::PARReader(const char* filename, PAR::CharmmTypeEnum charmmType):$/;"	f	class:ProtoMol::PARReader
PARReader	framework/io/PARReader.cpp	/^  PARReader::PARReader(const std::string& filename, PAR::CharmmTypeEnum charmmType):$/;"	f	class:ProtoMol::PARReader
PARReader	framework/io/PARReader.h	/^  class PARReader : public Reader {$/;"	c	namespace:ProtoMol
PARRecordTypeEnum	framework/io/PARReader.h	/^    enum PARRecordTypeEnum {$/;"	g	class:ProtoMol::PARReader
PARSECOMMANDLINE_H	framework/frontend/parseCommandLine.h	3;"	d
PARWRITER_H	framework/io/PARWriter.h	3;"	d
PARWriter	framework/io/PARWriter.cpp	/^  PARWriter::PARWriter(PAR::CharmmTypeEnum charmmType):$/;"	f	class:ProtoMol::PARWriter
PARWriter	framework/io/PARWriter.cpp	/^  PARWriter::PARWriter(const char* filename, PAR::CharmmTypeEnum charmmType):$/;"	f	class:ProtoMol::PARWriter
PARWriter	framework/io/PARWriter.cpp	/^  PARWriter::PARWriter(const string& filename, PAR::CharmmTypeEnum charmmType):$/;"	f	class:ProtoMol::PARWriter
PARWriter	framework/io/PARWriter.h	/^  class PARWriter : public Writer {$/;"	c	namespace:ProtoMol
PAR_H	framework/base/PAR.h	3;"	d
PATHSEP	framework/base/systemutilities.cpp	10;"	d	file:
PATHSEP	framework/base/systemutilities.cpp	23;"	d	file:
PATHSEPSTR	framework/base/systemutilities.cpp	11;"	d	file:
PATHSEPSTR	framework/base/systemutilities.cpp	24;"	d	file:
PAULTRAPEXTENDEDFORCEBASE_H	framework/forces/PaulTrapExtendedForceBase.h	3;"	d
PAULTRAPEXTENDEDFORCE_H	framework/forces/PaulTrapExtendedForce.h	3;"	d
PAULTRAPINTEGRATOR_H	framework/integrators/PaulTrapIntegrator.h	3;"	d
PDB	framework/base/PDB.h	/^    PDB(){};$/;"	f	struct:ProtoMol::PDB
PDB	framework/base/PDB.h	/^    PDB(size_t n):coords(n,Vector3D(0.0,0.0,0.0)),atoms(n){}$/;"	f	struct:ProtoMol::PDB
PDB	framework/base/PDB.h	/^  struct PDB {$/;"	s	namespace:ProtoMol
PDB	framework/frontend/InputPosVelType.h	/^      PDB,$/;"	e	enum:ProtoMol::InputPosVelEnum::Enum
PDB	tools/bccAnalyzer.cpp	/^	     PDB,$/;"	e	enum:Format::Type	file:
PDBREADER_H	framework/io/PDBReader.h	3;"	d
PDBReader	framework/io/PDBReader.cpp	/^  PDBReader::PDBReader():$/;"	f	class:ProtoMol::PDBReader
PDBReader	framework/io/PDBReader.cpp	/^  PDBReader::PDBReader(const std::string& filename):$/;"	f	class:ProtoMol::PDBReader
PDBReader	framework/io/PDBReader.h	/^  class PDBReader : public Reader {$/;"	c	namespace:ProtoMol
PDBVELSCALINGFACTOR	framework/base/pmconstants.cpp	/^    const Real PDBVELSCALINGFACTOR = 20.45482706;$/;"	v
PDBWRITER_H	framework/io/PDBWriter.h	3;"	d
PDBWriter	framework/io/PDBWriter.cpp	/^  PDBWriter::PDBWriter():Writer(){}$/;"	f	class:ProtoMol::PDBWriter
PDBWriter	framework/io/PDBWriter.cpp	/^  PDBWriter::PDBWriter(const string& filename):Writer(filename){}$/;"	f	class:ProtoMol::PDBWriter
PDBWriter	framework/io/PDBWriter.h	/^  class PDBWriter : public Writer {$/;"	c	namespace:ProtoMol
PDB_H	framework/base/PDB.h	3;"	d
PERIODIC	framework/topology/PeriodicBoundaryConditions.h	/^    enum {PERIODIC = 1, VACUUM = 0};$/;"	e	enum:ProtoMol::PeriodicBoundaryConditions::<anonymous>
PERIODIC	framework/topology/VacuumBoundaryConditions.h	/^    enum {PERIODIC = 0, VACUUM = 1};$/;"	e	enum:ProtoMol::VacuumBoundaryConditions::<anonymous>
PERIODIC_BOUNDARY_TOLERANCE	framework/base/pmconstants.cpp	/^    const Real PERIODIC_BOUNDARY_TOLERANCE = 3.0;$/;"	v
PERODICBOUNDARYCONDITIONS_H	framework/topology/PeriodicBoundaryConditions.h	3;"	d
PGM	framework/base/PGM.cpp	/^  PGM::PGM():w(0),h(0),p(NULL){$/;"	f	class:ProtoMol::PGM
PGM	framework/base/PGM.cpp	/^  PGM::PGM(int x, int y):w(x),h(y),p(new unsigned char[x*y]){$/;"	f	class:ProtoMol::PGM
PGM	framework/base/PGM.h	/^  class PGM{$/;"	c	namespace:ProtoMol
PGMREADER_H	framework/io/PGMReader.h	3;"	d
PGMReader	framework/io/PGMReader.cpp	/^  PGMReader::PGMReader():Reader(),myPGM(NULL){}$/;"	f	class:ProtoMol::PGMReader
PGMReader	framework/io/PGMReader.cpp	/^  PGMReader::PGMReader(const std::string& filename):Reader(filename),myPGM(NULL){}$/;"	f	class:ProtoMol::PGMReader
PGMReader	framework/io/PGMReader.h	/^  class PGMReader : public Reader {$/;"	c	namespace:ProtoMol
PGMWRITER_H	framework/io/PGMWriter.h	3;"	d
PGMWriter	framework/io/PGMWriter.cpp	/^  PGMWriter::PGMWriter():Writer(){}$/;"	f	class:ProtoMol::PGMWriter
PGMWriter	framework/io/PGMWriter.cpp	/^  PGMWriter::PGMWriter(const std::string& filename):Writer(filename){}$/;"	f	class:ProtoMol::PGMWriter
PGMWriter	framework/io/PGMWriter.h	/^  class PGMWriter : public Writer {$/;"	c	namespace:ProtoMol
PGM_H	framework/base/PGM.h	3;"	d
PLEAPFROGINTEGRATOR_H	framework/integrators/PLeapfrogIntegrator.h	3;"	d
PLeapfrogIntegrator	framework/integrators/PLeapfrogIntegrator.cpp	/^  PLeapfrogIntegrator::PLeapfrogIntegrator() : STSIntegrator(),myTempForces(NULL) {}$/;"	f	class:ProtoMol::PLeapfrogIntegrator
PLeapfrogIntegrator	framework/integrators/PLeapfrogIntegrator.cpp	/^  PLeapfrogIntegrator::PLeapfrogIntegrator(Real timestep,$/;"	f	class:ProtoMol::PLeapfrogIntegrator
PLeapfrogIntegrator	framework/integrators/PLeapfrogIntegrator.h	/^  class PLeapfrogIntegrator : public STSIntegrator {$/;"	c	namespace:ProtoMol
PNGWRITER_H	framework/io/PNGWriter.h	3;"	d
PNGWriter	framework/io/PNGWriter.cpp	/^  PNGWriter::PNGWriter():Writer(){$/;"	f	class:ProtoMol::PNGWriter
PNGWriter	framework/io/PNGWriter.cpp	/^  PNGWriter::PNGWriter(const std::string& filename):Writer(filename){$/;"	f	class:ProtoMol::PNGWriter
PNGWriter	framework/io/PNGWriter.h	/^  class PNGWriter : public Writer {$/;"	c	namespace:ProtoMol
POSITIVE	framework/base/ConstraintValueType.h	/^      POSITIVE,$/;"	e	enum:ProtoMol::ConstraintValueEnum::Enum
POST_CHECK	framework/forces/oneAtomContraints.h	/^    enum {PRE_CHECK=0, POST_CHECK=0};$/;"	e	enum:ProtoMol::NoConstraint::<anonymous>
POST_CHECK	framework/forces/oneAtomContraints.h	/^    enum {PRE_CHECK=0, POST_CHECK=1};$/;"	e	enum:ProtoMol::DebugPostConstraint::<anonymous>
POST_CHECK	framework/forces/oneAtomContraints.h	/^    enum {PRE_CHECK=1, POST_CHECK=0};$/;"	e	enum:ProtoMol::DebugPreConstraint::<anonymous>
POST_CHECK	framework/forces/oneAtomContraints.h	/^    enum {PRE_CHECK=1, POST_CHECK=0};$/;"	e	enum:ProtoMol::HBondConstraint::<anonymous>
POST_CHECK	framework/forces/oneAtomContraints.h	/^    enum {PRE_CHECK=1, POST_CHECK=0};$/;"	e	enum:ProtoMol::NotSameMoleculeConstraint::<anonymous>
POST_CHECK	framework/forces/oneAtomContraints.h	/^    enum {PRE_CHECK=1, POST_CHECK=0};$/;"	e	enum:ProtoMol::SameMoleculeConstraint::<anonymous>
PP	framework/base/mathutilities.cpp	/^  const Real PP = 0.3275911;$/;"	v
PPM	compilerTests/pngTest.cpp	/^PPM::PPM():w(0),h(0),p(NULL){}$/;"	f	class:PPM
PPM	compilerTests/pngTest.cpp	/^PPM::PPM(int a, int b):w(a),h(b),p(new unsigned char[3*a*b]){$/;"	f	class:PPM
PPM	compilerTests/pngTest.cpp	/^class PPM{$/;"	c	file:
PPM	framework/base/PPM.cpp	/^  PPM::PPM():w(0),h(0),p(NULL){$/;"	f	class:ProtoMol::PPM
PPM	framework/base/PPM.cpp	/^  PPM::PPM(int x, int y):w(x),h(y),p(new unsigned char[3*x*y]){$/;"	f	class:ProtoMol::PPM
PPM	framework/base/PPM.h	/^  class PPM{$/;"	c	namespace:ProtoMol
PPMREADER_H	framework/io/PPMReader.h	3;"	d
PPMReader	framework/io/PPMReader.cpp	/^  PPMReader::PPMReader():Reader(),myPPM(NULL){}$/;"	f	class:ProtoMol::PPMReader
PPMReader	framework/io/PPMReader.cpp	/^  PPMReader::PPMReader(const std::string& filename):Reader(filename),myPPM(NULL){}$/;"	f	class:ProtoMol::PPMReader
PPMReader	framework/io/PPMReader.h	/^  class PPMReader : public Reader {$/;"	c	namespace:ProtoMol
PPMWRITER_H	framework/io/PPMWriter.h	3;"	d
PPMWriter	framework/io/PPMWriter.cpp	/^  PPMWriter::PPMWriter():Writer(){}$/;"	f	class:ProtoMol::PPMWriter
PPMWriter	framework/io/PPMWriter.cpp	/^  PPMWriter::PPMWriter(const std::string& filename):Writer(filename){}$/;"	f	class:ProtoMol::PPMWriter
PPMWriter	framework/io/PPMWriter.h	/^  class PPMWriter : public Writer {$/;"	c	namespace:ProtoMol
PPM_H	framework/base/PPM.h	3;"	d
PRECISION	framework/base/LookUpTableBase.h	/^    enum{PRECISION=PRE};$/;"	e	enum:ProtoMol::LookUpTableBase::<anonymous>
PRESSUREFACTOR	framework/base/pmconstants.cpp	/^    const Real PRESSUREFACTOR = 69478.0593635551;\/\/ ENERGY_TO_SI\/(LENGTH_TO_SI*LENGTH_TO_SI*LENGTH_TO_SI)*1e-5; \/\/ bar$/;"	v
PRE_CHECK	framework/forces/oneAtomContraints.h	/^    enum {PRE_CHECK=0, POST_CHECK=0};$/;"	e	enum:ProtoMol::NoConstraint::<anonymous>
PRE_CHECK	framework/forces/oneAtomContraints.h	/^    enum {PRE_CHECK=0, POST_CHECK=1};$/;"	e	enum:ProtoMol::DebugPostConstraint::<anonymous>
PRE_CHECK	framework/forces/oneAtomContraints.h	/^    enum {PRE_CHECK=1, POST_CHECK=0};$/;"	e	enum:ProtoMol::DebugPreConstraint::<anonymous>
PRE_CHECK	framework/forces/oneAtomContraints.h	/^    enum {PRE_CHECK=1, POST_CHECK=0};$/;"	e	enum:ProtoMol::HBondConstraint::<anonymous>
PRE_CHECK	framework/forces/oneAtomContraints.h	/^    enum {PRE_CHECK=1, POST_CHECK=0};$/;"	e	enum:ProtoMol::NotSameMoleculeConstraint::<anonymous>
PRE_CHECK	framework/forces/oneAtomContraints.h	/^    enum {PRE_CHECK=1, POST_CHECK=0};$/;"	e	enum:ProtoMol::SameMoleculeConstraint::<anonymous>
PRINTMAXWIDTH	framework/base/pmconstants.cpp	/^    const unsigned int PRINTMAXWIDTH = 30;$/;"	v
PROTOMOL_H	framework/base/protomol.h	3;"	d
PROXY_H	framework/base/Proxy.h	3;"	d
PSF	framework/base/PSF.h	/^  class PSF {$/;"	c	namespace:ProtoMol
PSFREADER_H	framework/io/PSFReader.h	3;"	d
PSFReader	framework/io/PSFReader.cpp	/^  PSFReader::PSFReader():$/;"	f	class:ProtoMol::PSFReader
PSFReader	framework/io/PSFReader.cpp	/^  PSFReader::PSFReader(const std::string& filename):$/;"	f	class:ProtoMol::PSFReader
PSFReader	framework/io/PSFReader.h	/^  class PSFReader : public Reader {$/;"	c	namespace:ProtoMol
PSFWRITER_H	framework/io/PSFWriter.h	3;"	d
PSFWriter	framework/io/PSFWriter.cpp	/^  PSFWriter::PSFWriter():Writer(){}$/;"	f	class:ProtoMol::PSFWriter
PSFWriter	framework/io/PSFWriter.cpp	/^  PSFWriter::PSFWriter(const std::string& filename):Writer(filename){}$/;"	f	class:ProtoMol::PSFWriter
PSFWriter	framework/io/PSFWriter.h	/^  class PSFWriter : public Writer {$/;"	c	namespace:ProtoMol
PSF_H	framework/base/PSF.h	3;"	d
PairInt	framework/base/simpleTypes.h	/^  typedef std::pair<int, int> PairInt;$/;"	t	namespace:ProtoMol
PairIntSorted	framework/base/simpleTypes.h	/^    PairIntSorted():first(0),second(0){}$/;"	f	struct:ProtoMol::PairIntSorted
PairIntSorted	framework/base/simpleTypes.h	/^    PairIntSorted(unsigned int a, unsigned int b):first(std::min(a,b)),second(std::max(a,b)){}$/;"	f	struct:ProtoMol::PairIntSorted
PairIntSorted	framework/base/simpleTypes.h	/^  struct PairIntSorted {$/;"	s	namespace:ProtoMol
PairString	framework/base/simpleTypes.h	/^  typedef std::pair<std::string, std::string> PairString;$/;"	t	namespace:ProtoMol
PairUInt	framework/base/simpleTypes.h	/^  typedef std::pair<unsigned int, unsigned int> PairUInt;$/;"	t	namespace:ProtoMol
PairVector3D	tools/bccAnalyzer.cpp	/^  PairVector3D(){}$/;"	f	class:PairVector3D
PairVector3D	tools/bccAnalyzer.cpp	/^  PairVector3D(const Vector3DIdx& a, const Vector3DIdx& b, const Vector3DIdx& c):v0(a),c(b),v1(c){}$/;"	f	class:PairVector3D
PairVector3D	tools/bccAnalyzer.cpp	/^class PairVector3D {$/;"	c	file:
Parallel	framework/parallel/Parallel-FD.cpp	/^  Parallel::Parallel(){$/;"	f	class:ProtoMol::Parallel
Parallel	framework/parallel/Parallel.cpp	/^  Parallel::Parallel(){$/;"	f	class:ProtoMol::Parallel
Parallel	framework/parallel/Parallel.h	/^    Parallel(const Parallel&){}$/;"	f	class:ProtoMol::Parallel
Parallel	framework/parallel/Parallel.h	/^  class Parallel  {$/;"	c	namespace:ProtoMol
ParallelEnum	framework/parallel/ParallelType.h	/^  class ParallelEnum  {$/;"	c	namespace:ProtoMol
ParallelType	framework/parallel/ParallelType.h	/^  typedef AbstractEnumType<ParallelEnum> ParallelType;$/;"	t	namespace:ProtoMol
Parameter	framework/base/Parameter.cpp	/^  Parameter::Parameter():keyword(""),value(Value()),defaultValue(Value()) {}$/;"	f	class:ProtoMol::Parameter
Parameter	framework/base/Parameter.cpp	/^  Parameter::Parameter(const char* k, const Value& val):keyword(string(k)),value(val),defaultValue(val,Value::undefined) {}$/;"	f	class:ProtoMol::Parameter
Parameter	framework/base/Parameter.cpp	/^  Parameter::Parameter(const char* k, const Value& val, const Text& t):keyword(string(k)),value(val),defaultValue(val,Value::undefined),text(t.text) {}$/;"	f	class:ProtoMol::Parameter
Parameter	framework/base/Parameter.cpp	/^  Parameter::Parameter(const char* k, const Value& val, const Value& def):keyword(string(k)),value(val),defaultValue(def) {}$/;"	f	class:ProtoMol::Parameter
Parameter	framework/base/Parameter.cpp	/^  Parameter::Parameter(const char* k, const Value& val, const Value& def, const Text& t):keyword(string(k)),value(val),defaultValue(def),text(t.text) {}  $/;"	f	class:ProtoMol::Parameter
Parameter	framework/base/Parameter.cpp	/^  Parameter::Parameter(const string& k, const Value& val):keyword(k),value(val),defaultValue(val,Value::undefined) {}$/;"	f	class:ProtoMol::Parameter
Parameter	framework/base/Parameter.cpp	/^  Parameter::Parameter(const string& k, const Value& val, const Text& t):keyword(k),value(val),defaultValue(val,Value::undefined),text(t.text) {}$/;"	f	class:ProtoMol::Parameter
Parameter	framework/base/Parameter.cpp	/^  Parameter::Parameter(const string& k, const Value& val, const Value& def):keyword(k),value(val),defaultValue(def) {}$/;"	f	class:ProtoMol::Parameter
Parameter	framework/base/Parameter.cpp	/^  Parameter::Parameter(const string& k, const Value& val, const Value& def, const Text& t):keyword(k),value(val),defaultValue(def),text(t.text) {}$/;"	f	class:ProtoMol::Parameter
Parameter	framework/base/Parameter.h	/^    Parameter(const char* k, const Value& val, T def):keyword(std::string(k)),value(val),defaultValue(val) {defaultValue.set(def);}$/;"	f	struct:ProtoMol::Parameter
Parameter	framework/base/Parameter.h	/^    Parameter(const char* k, const Value& val, T def, const Text& t):keyword(std::string(k)),value(val),defaultValue(val),text(t.text) {defaultValue.set(def);}$/;"	f	struct:ProtoMol::Parameter
Parameter	framework/base/Parameter.h	/^    Parameter(const std::string& k, const Value& val, T def):keyword(k),value(val),defaultValue(val) {defaultValue.set(def);}$/;"	f	struct:ProtoMol::Parameter
Parameter	framework/base/Parameter.h	/^    Parameter(const std::string& k, const Value& val, T def, const Text& t):keyword(k),value(val),defaultValue(val),text(t.text) {defaultValue.set(def);}$/;"	f	struct:ProtoMol::Parameter
Parameter	framework/base/Parameter.h	/^  struct Parameter {$/;"	s	namespace:ProtoMol
ParseCommandLine	framework/base/pmconstants.cpp	/^    namespace ParseCommandLine {$/;"	n	namespace:ProtoMol::Constant	file:
ParseCommandLine	framework/base/pmconstants.h	/^    namespace ParseCommandLine {$/;"	n	namespace:ProtoMol::Constant
PaulTrapExtendedForce	framework/forces/PaulTrapExtendedForce.h	/^  PaulTrapExtendedForce<TBoundaryConditions>::PaulTrapExtendedForce():ExtendedForce(),myOmegaR1(0.0),myOmegaZ1(0.0),myAlpha(0.0),myR0(0.0),myU0(0.0),myK(Vector3D(0.0,0.0,0.0)),myAlphaR04(0.0),myOmega(0.0),myA(0.0),myCached(false){$/;"	f	class:ProtoMol::PaulTrapExtendedForce
PaulTrapExtendedForce	framework/forces/PaulTrapExtendedForce.h	/^  PaulTrapExtendedForce<TBoundaryConditions>::PaulTrapExtendedForce(Real omegaR, Real omegaZ, Real alpha, Real r0, Real u0, Vector3D k):ExtendedForce(),myOmegaR1(omegaR),myOmegaZ1(omegaZ),myU0(u0),myK(k),myOmega(0.0),myA(0.0),myCached(false){$/;"	f	class:ProtoMol::PaulTrapExtendedForce
PaulTrapExtendedForce	framework/forces/PaulTrapExtendedForce.h	/^  class PaulTrapExtendedForce : public ExtendedForce, private PaulTrapExtendedForceBase {$/;"	c	namespace:ProtoMol
PaulTrapExtendedForceBase	framework/forces/PaulTrapExtendedForceBase.h	/^  class PaulTrapExtendedForceBase {$/;"	c	namespace:ProtoMol
PaulTrapIntegrator	framework/integrators/PaulTrapIntegrator.cpp	/^  PaulTrapIntegrator::PaulTrapIntegrator(): STSIntegrator(),$/;"	f	class:ProtoMol::PaulTrapIntegrator
PaulTrapIntegrator	framework/integrators/PaulTrapIntegrator.cpp	/^  PaulTrapIntegrator::PaulTrapIntegrator(Real timestep,$/;"	f	class:ProtoMol::PaulTrapIntegrator
PaulTrapIntegrator	framework/integrators/PaulTrapIntegrator.h	/^  class PaulTrapIntegrator: public STSIntegrator {$/;"	c	namespace:ProtoMol
PeriodicBoundaryConditions	framework/topology/PeriodicBoundaryConditions.cpp	/^  PeriodicBoundaryConditions::PeriodicBoundaryConditions():myE1(0,0,0),myE2(0,0,0),myE3(0,0,0),$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
PeriodicBoundaryConditions	framework/topology/PeriodicBoundaryConditions.cpp	/^  PeriodicBoundaryConditions::PeriodicBoundaryConditions(const Vector3D &e1 ,const Vector3D &e2 ,$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
PeriodicBoundaryConditions	framework/topology/PeriodicBoundaryConditions.h	/^  class PeriodicBoundaryConditions {$/;"	c	namespace:ProtoMol
PlaceHolder	framework/base/Value.h	/^    class PlaceHolder {$/;"	c	class:ProtoMol::Value
Positive	framework/base/ConstraintValueType.h	/^    typedef Enum2Type<POSITIVE> Positive;$/;"	t	class:ProtoMol::ConstraintValueEnum
PostForceBarostat	framework/integrators/NPTVerletIntegrator.cpp	/^  void NPTVerletIntegrator::PostForceBarostat() {$/;"	f	class:ProtoMol::NPTVerletIntegrator
PostForceThermostat	framework/integrators/NPTVerletIntegrator.cpp	/^  void NPTVerletIntegrator::PostForceThermostat() {$/;"	f	class:ProtoMol::NPTVerletIntegrator
PostForceThermostat	framework/integrators/NVTVerletIntegrator.cpp	/^  void NVTVerletIntegrator::PostForceThermostat() {$/;"	f	class:ProtoMol::NVTVerletIntegrator
Power	framework/base/mathutilities.h	/^    struct Power {$/;"	s	namespace:ProtoMol::Private
Power	framework/base/mathutilities.h	/^    struct Power<-1> {$/;"	s	namespace:ProtoMol::Private
Power	framework/base/mathutilities.h	/^    struct Power<0> {$/;"	s	namespace:ProtoMol::Private
Power	framework/base/mathutilities.h	/^    struct Power<1> {$/;"	s	namespace:ProtoMol::Private
PreForceBarostat	framework/integrators/NPTVerletIntegrator.cpp	/^  void NPTVerletIntegrator::PreForceBarostat() {$/;"	f	class:ProtoMol::NPTVerletIntegrator
PreForceThermostat	framework/integrators/NPTVerletIntegrator.cpp	/^  void NPTVerletIntegrator::PreForceThermostat() {$/;"	f	class:ProtoMol::NPTVerletIntegrator
PreForceThermostat	framework/integrators/NVTVerletIntegrator.cpp	/^  void NVTVerletIntegrator::PreForceThermostat() {$/;"	f	class:ProtoMol::NVTVerletIntegrator
PreserveElems	framework/base/Array_Fastest.h	/^    bool resize(const size_t (&Dimensions)[N], const T & Init=T(), bool PreserveElems=false)$/;"	m	class:ProtoMol::Array
Private	framework/base/Cycles.h	/^  namespace Private {$/;"	n	namespace:ProtoMol
Private	framework/base/mathutilities.h	/^  namespace Private {$/;"	n	namespace:ProtoMol
Private	framework/base/typeSelection.h	/^  namespace Private {$/;"	n	namespace:ProtoMol
ProtoMol	framework/base/AbstractEnumType.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Array_Fastest.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Array_NoPartialSpecialization.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Atom.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/AtomType.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/BSpline.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/BSpline.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/BSplineType.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/BSplineType.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Configuration.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/Configuration.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/ConstraintValueType.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/ConstraintValueType.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Cycles.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/FFTComplex.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/FFTComplex.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Grid.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Hermite.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/Hermite.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Lagrange.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/Lagrange.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/LookUpTableBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Makeable.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/Makeable.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/MakeableDefinition.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Matrix3by3.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/Matrix3by3.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Molecule.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/MultiGrid.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/ObjectDefinition.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/PAR.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/PAR.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/PDB.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/PDB.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/PGM.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/PGM.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/PPM.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/PPM.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/PSF.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/PSF.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Parameter.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/Parameter.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Proxy.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Real.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/ReducedHessAngle.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/ReducedHessAngle.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Report.cpp	/^namespace ProtoMol { $/;"	n	file:
ProtoMol	framework/base/Report.h	/^namespace ProtoMol { $/;"	n
ProtoMol	framework/base/ScalarStructure.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/ScalarStructure.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Stack.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Timer.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/Timer.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/TimerStatistic.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/TimerStatistic.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Value.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/Value.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/ValueType.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/ValueType.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Vector.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Vector3D.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/Vector3DBlock.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/Vector3DBlock.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/XSC.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/XSC.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/XYZ.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/XYZ.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/mathutilities.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/mathutilities.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/pmconstants.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/pmconstants.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/reducedHessBond.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/reducedHessBond.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/simpleTypes.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/stringutilities.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/stringutilities.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/systemutilities.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/base/systemutilities.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/base/typeSelection.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/factories/registerForceExemplars.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/factories/registerForceExemplars.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/factories/registerForceExemplarsBonded.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/factories/registerForceExemplarsBonded.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/factories/registerForceExemplarsCutoff.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/factories/registerForceExemplarsCutoff.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/factories/registerForceExemplarsFastElectrostatic.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/factories/registerForceExemplarsFastElectrostatic.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/factories/registerForceExemplarsFull.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/factories/registerForceExemplarsFull.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/factories/registerForceExemplarsOther.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/factories/registerForceExemplarsOther.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/factories/registerForceExemplarsSimpleFull.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/factories/registerForceExemplarsSimpleFull.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/factories/registerIntegratorExemplars.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/factories/registerIntegratorExemplars.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/factories/registerOutputExemplars.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/factories/registerOutputExemplars.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/factories/registerTopologyExemplars.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/factories/registerTopologyExemplars.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/AngleSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/AngleSystemForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/AngleSystemForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/BondSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/BondSystemForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/BondSystemForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/CompareForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/CompareForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/CoulombEwaldRealForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/CoulombEwaldRealForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/CoulombEwaldRealTableForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/CoulombEwaldRealTableForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/CoulombEwaldRealTableForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/CoulombForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/CoulombForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/CoulombMultiGridDirectForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/CoulombMultiGridDirectForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/CoulombMultiGridDirectForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/CoulombMultiGridDirectTableForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/CoulombMultiGridDirectTableForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/CoulombMultiGridDirectTableForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/CoulombTableForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/CoulombTableForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/CoulombTableForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/DihedralSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/DihedralSystemForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/DihedralSystemForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/ElectricFieldSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/ElectricFieldSystemForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/ElectricFieldSystemForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/ExtendedCompareForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/ExtendedCompareForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/ExtendedForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/ExtendedForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/ExtendedTimeForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/ExtendedTimeForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/ExternalGravitationSystemForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/ExternalGravitationSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/ExternalMagneticFieldExtendedForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/ExternalMagneticFieldExtendedForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/Force.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/Force.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/ForceGroup.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/ForceGroup.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/FrictionExtendedForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/FrictionExtendedForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/GravitationForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/GravitationForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/HarmDihedralSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/HarmDihedralSystemForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/HarmDihedralSystemForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/ImproperSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/ImproperSystemForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/ImproperSystemForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/LennardJonesForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/LennardJonesForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/LennardJonesTableForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/LennardJonesTableForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/LennardJonesTableForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/MTorsionSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/MagneticDipoleForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/MagneticDipoleForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/MagneticDipoleMirrorSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/MagneticDipoleMirrorSystemForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/MagneticDipoleMirrorSystemForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/MetaForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/MetaForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/MollyForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/MollyForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/NonbondedCutoffForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/NonbondedCutoffForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/NonbondedCutoffForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/NonbondedCutoffMollyForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/NonbondedCutoffSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/NonbondedFullEwaldSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/NonbondedFullEwaldSystemForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/NonbondedFullEwaldSystemForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/NonbondedFullSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/NonbondedFullSystemForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/NonbondedFullSystemForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/NonbondedMultiGridSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/NonbondedMultiGridSystemForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/NonbondedMultiGridSystemForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/NonbondedPMEwaldSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/NonbondedPMEwaldSystemForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/NonbondedPMEwaldSystemForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/NonbondedSimpleFullSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/NonbondedSimpleFullSystemForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/NonbondedSimpleFullSystemForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/OneAtomPair.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/OneAtomPairFull.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/OneAtomPairTwo.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/OneAtomPairTwoFull.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/OneMollyPair.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/OneMollyPairTwo.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/PaulTrapExtendedForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/PaulTrapExtendedForceBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/PaulTrapExtendedForceBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/ReducedHessCoulomb.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/ReducedHessCoulomb.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/ReducedHessLennardJones.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/ReducedHessLennardJones.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/ReducedHessTraits.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/SphericalSystemForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/SphericalSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/SystemCompareForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/SystemCompareForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/SystemForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/SystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/SystemTimeForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/SystemTimeForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/TimeForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/TimeForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/WrapperMetaForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/forces/WrapperMetaForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/forces/oneAtomContraints.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/Factory.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/ForceFactory.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/ForceFactoryDetails.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/ForceFactoryDetails.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/HelpTextFactory.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/HelpTextFactory.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/InputPosVel.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/InputPosVel.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/InputPosVelType.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/InputPosVelType.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/InputValue.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/IntegratorFactory.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/IntegratorFactoryDetails.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/IntegratorFactoryDetails.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/Output.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/Output.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputBSDL.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputBSDL.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputCache.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputCache.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputCollection.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputCollection.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputDCDTrajectory.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputDCDTrajectory.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputDiffusion.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputDiffusion.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputDihedrals.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputDihedrals.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputEnergies.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputEnergies.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputFactory.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputFactoryDetails.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputFactoryDetails.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputFile.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputFile.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputFinalPDBPos.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputFinalPDBPos.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputFinalXYZBinPos.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputFinalXYZBinPos.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputFinalXYZBinVel.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputFinalXYZBinVel.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputFinalXYZPos.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputFinalXYZPos.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputFinalXYZVel.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputFinalXYZVel.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputMomentum.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputMomentum.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputPDBFramePos.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputPDBFramePos.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputPaulTrap.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputPaulTrap.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputREMExchangeRate.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputREMExchangeRate.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputREMHistory.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputREMHistory.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputScreen.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputScreen.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputState.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputState.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputTemperatures.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputTemperatures.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputXYZBinTrajectoryPos.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputXYZBinTrajectoryPos.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputXYZBinTrajectoryVel.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputXYZBinTrajectoryVel.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputXYZTrajectoryForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputXYZTrajectoryForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputXYZTrajectoryPos.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputXYZTrajectoryPos.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/OutputXYZTrajectoryVel.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/OutputXYZTrajectoryVel.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/TopologyFactory.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/TopologyFactoryDetails.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/TopologyFactoryDetails.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/buildTopology.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/buildTopology.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/inputValueDefinitions.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/inputValueDefinitions.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/frontend/parseCommandLine.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/frontend/parseCommandLine.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/imd/HapticSystemForce.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/imd/HapticSystemForce.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/imd/IMDElf.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/imd/IMDElf.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/imd/imd.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/imd/imd.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/imd/vmdsock.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/imd/vmdsock.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/BBKIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/BBKIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/BSplineMOLLYIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/BSplineMOLLYIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/DLMCIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/DLMCIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/DMDLeapfrogIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/DMDLeapfrogIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/DihedralHMCIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/DihedralHMCIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/EquilibriumMOLLYIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/EquilibriumMOLLYIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/HMCIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/HMCIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ImpulseIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/ImpulseIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/Integrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/Integrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/IntegratorDefinition.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/IntegratorDefinition.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/LangevinImpulseIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/LangevinImpulseIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/LeapfrogIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/LeapfrogIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/MCIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/MCIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/MOLLYIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/MOLLYIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/MTSIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/MTSIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/Modifier.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierAveraging.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierFriction.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierIncrementTimestep.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierMetaRattle.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/ModifierMetaRattle.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierMetaRattleShake.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/ModifierMetaRattleShake.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierMetaShake.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/ModifierMetaShake.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierMollification.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierNPTRattle.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/ModifierNPTRattle.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierNPTShake.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/ModifierNPTShake.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierNVTRattle.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/ModifierNVTRattle.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierNVTShake.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/ModifierNVTShake.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierPostForceBarostat.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierPostForceThermostat.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierPreForceBarostat.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierPreForceThermostat.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierRattle.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/ModifierRattle.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierRemoveAngularMomentum.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierRemoveLinearMomentum.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierShadow.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/ModifierShadow.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ModifierShake.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/ModifierShake.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/NPTVerletIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/NPTVerletIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/NVTVerletIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/NVTVerletIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/NonStandardIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/NoseNVTLeapfrogIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/NoseNVTLeapfrogIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/PLeapfrogIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/PLeapfrogIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/PaulTrapIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/PaulTrapIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/STSIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/STSIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/ShadowHMCIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/ShadowHMCIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/integrators/StandardIntegrator.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/integrators/StandardIntegrator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/AMBERReader.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/AMBERReader.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/CRDReader.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/CRDReader.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/ConfigurationReader.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/ConfigurationReader.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/DCDTrajectoryReader.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/DCDTrajectoryReader.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/DCDTrajectoryWriter.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/DCDTrajectoryWriter.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/File.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/File.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/PARReader.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/PARReader.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/PARWriter.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/PARWriter.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/PDBReader.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/PDBReader.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/PDBWriter.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/PDBWriter.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/PGMReader.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/PGMReader.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/PGMWriter.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/PGMWriter.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/PNGWriter.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/PNGWriter.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/PPMReader.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/PPMReader.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/PPMWriter.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/PPMWriter.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/PSFReader.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/PSFReader.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/PSFWriter.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/PSFWriter.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/REMConfigurationReader.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/REMConfigurationReader.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/Reader.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/Reader.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/TempFileReader.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/TempFileReader.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/Writer.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/Writer.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/XFigWriter.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/XFigWriter.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/XYZBinReader.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/XYZBinReader.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/XYZBinWriter.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/XYZBinWriter.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/XYZReader.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/XYZReader.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/XYZTrajectoryReader.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/XYZTrajectoryReader.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/XYZTrajectoryWriter.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/XYZTrajectoryWriter.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/io/XYZWriter.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/io/XYZWriter.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/parallel/Parallel-FD.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/parallel/Parallel.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/parallel/Parallel.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/parallel/ParallelType.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/parallel/ParallelType.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/Angle.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/AngleInfo.cpp	/^namespace ProtoMol{$/;"	n	file:
ProtoMol	framework/topology/AngleInfo.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/ArrayCellListStructure.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/ArrayCellListStructure.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/BankLennardJonesParameterTable.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/Bond.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/C1SwitchingFunction.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/C1SwitchingFunction.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/C1SwitchingFunctionBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/C1SwitchingFunctionBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/C2SwitchingFunction.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/C2SwitchingFunction.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/C2SwitchingFunctionBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/C2SwitchingFunctionBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/CellListEnumerator.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/CellListEnumerator_periodicBoundaries.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/CellListEnumerator_standard.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/CmpCnCnSwitchingFunction.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/CmpCnCnSwitchingFunction.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/CmpCnCnSwitchingFunctionBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/CmpCnCnSwitchingFunctionBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/CnSwitchingFunction.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/CnSwitchingFunction.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/CnSwitchingFunctionBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/CnSwitchingFunctionBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/ComplementSwitchingFunction.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/ComplementSwitchingFunctionBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/ComplementSwitchingFunctionBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/CubicCellLocation.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/CubicCellManager.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/CubicCellManager.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/CutoffSwitchingFunction.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/CutoffSwitchingFunction.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/CutoffSwitchingFunctionBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/CutoffSwitchingFunctionBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/ExclusionTable.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/ExclusionTable.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/ExclusionType.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/ExclusionType.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/GenericTopology.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/GenericTopology.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/LennardJonesParameterTable.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/LennardJonesParameterTable.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/LennardJonesParameters.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/PeriodicBoundaryConditions.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/PeriodicBoundaryConditions.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/RangeSwitchingFunction.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/RangeSwitchingFunctionBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/RangeSwitchingFunctionBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/SemiGenericTopology.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/ShiftSwitchingFunction.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/ShiftSwitchingFunction.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/ShiftSwitchingFunctionBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/ShiftSwitchingFunctionBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/Topology.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/Torsion.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/UniversalSwitchingFunction.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/UniversalSwitchingFunctionBase.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/UniversalSwitchingFunctionBase.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/VacuumBoundaryConditions.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/VacuumBoundaryConditions.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/buildCellLists.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/buildCellLists.h	/^namespace ProtoMol {$/;"	n
ProtoMol	framework/topology/topologyutilities.cpp	/^namespace ProtoMol {$/;"	n	file:
ProtoMol	framework/topology/topologyutilities.h	/^namespace ProtoMol {$/;"	n
Proxy	framework/base/Proxy.h	/^    Proxy(): myCount(0){}$/;"	f	class:ProtoMol::Proxy
Proxy	framework/base/Proxy.h	/^  class Proxy {$/;"	c	namespace:ProtoMol
Qnew	framework/base/Atom.h	/^    Real Qold, Qnew;$/;"	m	struct:ProtoMol::Atom
Qo	framework/integrators/NPTVerletIntegrator.h	/^    Real Qo;                 \/\/  Particle thermostat mass.  Units: (kcal fs^2 \/ mol)$/;"	m	class:ProtoMol::NPTVerletIntegrator
Qo	framework/integrators/NVTVerletIntegrator.h	/^    Real Qo;                 \/\/  Particle thermostat mass.  Units: (kcal fs^2 \/ mol)$/;"	m	class:ProtoMol::NVTVerletIntegrator
Qold	framework/base/Atom.h	/^    Real Qold, Qnew;$/;"	m	struct:ProtoMol::Atom
Qv	framework/integrators/NPTVerletIntegrator.h	/^    Real Qv;                 \/\/  Volume thermostat mass.  Units: (kcal fs^2 \/ mol)$/;"	m	class:ProtoMol::NPTVerletIntegrator
RANGESWITCHINGFUNCTIONBASE_H	framework/topology/RangeSwitchingFunctionBase.h	3;"	d
RANGESWITCHINGFUNCTION_H	framework/topology/RangeSwitchingFunction.h	3;"	d
RDTSC	framework/base/Cycles.h	192;"	d
READER_H	framework/io/Reader.h	3;"	d
REAL	framework/base/ValueType.h	/^      REAL,$/;"	e	enum:ProtoMol::ValueEnum::Enum
REAL_H	framework/base/Real.h	3;"	d
REAL_INFINITY	framework/base/pmconstants.cpp	/^    const Real REAL_INFINITY  = 2.0*MAXREAL;$/;"	v
REAL_NAN	framework/base/pmconstants.cpp	/^    const Real REAL_NAN       = REAL_INFINITY;$/;"	v
REDUCEDHESSANGLE_H	framework/base/ReducedHessAngle.h	3;"	d
REDUCEDHESSBOND_H	framework/base/reducedHessBond.h	3;"	d
REDUCEDHESSCOULOMB_H	framework/forces/ReducedHessCoulomb.h	3;"	d
REDUCEDHESSLENNARDJONES_H	framework/forces/ReducedHessLennardJones.h	3;"	d
REDUCEDHESSTRAITS_H	framework/forces/ReducedHessTraits.h	3;"	d
REGISTERFORCEEXEMPLARSBONDED_H	framework/factories/registerForceExemplarsBonded.h	3;"	d
REGISTERFORCEEXEMPLARSCUTOFF_H	framework/factories/registerForceExemplarsCutoff.h	3;"	d
REGISTERFORCEEXEMPLARSFASTELECTROSTATIC_H	framework/factories/registerForceExemplarsFastElectrostatic.h	3;"	d
REGISTERFORCEEXEMPLARSFULL_H	framework/factories/registerForceExemplarsFull.h	3;"	d
REGISTERFORCEEXEMPLARSOTHER_H	framework/factories/registerForceExemplarsOther.h	3;"	d
REGISTERFORCEEXEMPLARSSIMPLEFULL_H	framework/factories/registerForceExemplarsSimpleFull.h	3;"	d
REGISTERFORCEEXEMPLARS_H	framework/factories/registerForceExemplars.h	3;"	d
REGISTERINTEGRATOREXEMPLARS_H	framework/factories/registerIntegratorExemplars.h	3;"	d
REGISTEROUTPUTEXEMPLARS_H	framework/factories/registerOutputExemplars.h	3;"	d
REGISTERTOPOLOGYEXEMPLARS_H	framework/factories/registerTopologyExemplars.h	3;"	d
REMCONFIGURATIONREADER_H	framework/io/REMConfigurationReader.h	3;"	d
REMConfigurationReader	framework/io/REMConfigurationReader.cpp	/^  REMConfigurationReader::REMConfigurationReader(Real temp):Reader(),myConfig(NULL),myTemp(temp){}$/;"	f	class:ProtoMol::REMConfigurationReader
REMConfigurationReader	framework/io/REMConfigurationReader.cpp	/^  REMConfigurationReader::REMConfigurationReader(const std::string& filename):Reader(filename),myConfig(NULL){}$/;"	f	class:ProtoMol::REMConfigurationReader
REMConfigurationReader	framework/io/REMConfigurationReader.h	/^  class REMConfigurationReader : public Reader {$/;"	c	namespace:ProtoMol
REMRates	framework/frontend/OutputCache.h	/^    const std::vector<Real> &REMRates() const {return myREMRates;}$/;"	f	class:ProtoMol::OutputCache
REPLICA_h	tools/rem/sequential/replica.h	2;"	d
REPORT_H	framework/base/Report.h	3;"	d
RUN	framework/base/TimerStatistic.h	/^      RUN,$/;"	e	enum:ProtoMol::TimerStatistic::Enum
R_OK	framework/base/systemutilities.cpp	17;"	d	file:
RangeSwitchingFunction	framework/topology/RangeSwitchingFunction.h	/^    RangeSwitchingFunction():myR0(0.0),myR1(0.0){}$/;"	f	class:ProtoMol::RangeSwitchingFunction
RangeSwitchingFunction	framework/topology/RangeSwitchingFunction.h	/^    RangeSwitchingFunction(const TOriginalSwitchingFunction sw, Real r0, Real r1):myOrigFunc(sw),$/;"	f	class:ProtoMol::RangeSwitchingFunction
RangeSwitchingFunction	framework/topology/RangeSwitchingFunction.h	/^  class RangeSwitchingFunction : private RangeSwitchingFunctionBase {$/;"	c	namespace:ProtoMol
RangeSwitchingFunctionBase	framework/topology/RangeSwitchingFunctionBase.h	/^  class RangeSwitchingFunctionBase {$/;"	c	namespace:ProtoMol
Reader	framework/io/Reader.cpp	/^  Reader::Reader():File(std::ios::in){}$/;"	f	class:ProtoMol::Reader
Reader	framework/io/Reader.cpp	/^  Reader::Reader(const string& filename):File(std::ios::in,filename){$/;"	f	class:ProtoMol::Reader
Reader	framework/io/Reader.cpp	/^  Reader::Reader(std::ios::openmode mode):File(std::ios::in|mode){}$/;"	f	class:ProtoMol::Reader
Reader	framework/io/Reader.cpp	/^  Reader::Reader(std::ios::openmode mode,const string& filename):File(std::ios::in|mode,filename){$/;"	f	class:ProtoMol::Reader
Reader	framework/io/Reader.h	/^  class Reader : public File {$/;"	c	namespace:ProtoMol
Real	framework/base/Real.h	/^  typedef double Real;$/;"	t	namespace:ProtoMol
Real	framework/base/Real.h	/^  typedef float Real;$/;"	t	namespace:ProtoMol
Real	framework/integrators/EquilibriumMOLLYIntegrator.cpp	/^  void EquilibriumMOLLYIntegrator::luBksb(Real (&m)[maxGDim][maxGDim], $/;"	m	class:ProtoMol::EquilibriumMOLLYIntegrator	file:
Real	framework/integrators/EquilibriumMOLLYIntegrator.cpp	/^  void EquilibriumMOLLYIntegrator::luDcmp(Real (&m)[maxGDim][maxGDim], $/;"	m	class:ProtoMol::EquilibriumMOLLYIntegrator	file:
Real	framework/integrators/EquilibriumMOLLYIntegrator.h	/^    void luBksb(Real (&m)[maxGDim][maxGDim], int dim, const int (&index)[maxGDim], Real (&b)[maxGDim]) const;$/;"	m	class:ProtoMol::EquilibriumMOLLYIntegrator
Real	framework/integrators/EquilibriumMOLLYIntegrator.h	/^    void luDcmp(Real (&m)[maxGDim][maxGDim], int dim, int (&index)[maxGDim], Real& d) const;$/;"	m	class:ProtoMol::EquilibriumMOLLYIntegrator
RealTopologyType	framework/forces/NonbondedCutoffForce.h	/^    typedef Topology<BoundaryConditions, TCellManager> RealTopologyType;$/;"	t	class:ProtoMol::NonbondedCutoffForce
RealTopologyType	framework/forces/NonbondedCutoffMollyForce.h	/^    typedef Topology<BoundaryConditions, TCellManager> RealTopologyType;$/;"	t	class:ProtoMol::NonbondedCutoffMollyForce
RealTopologyType	framework/forces/NonbondedCutoffSystemForce.h	/^    typedef Topology<BoundaryConditions, TCellManager> RealTopologyType;$/;"	t	class:ProtoMol::NonbondedCutoffSystemForce
RealTopologyType	framework/forces/NonbondedFullEwaldSystemForce.h	/^    typedef Topology<TBoundaryConditions, TCellManager> RealTopologyType;$/;"	t	class:ProtoMol::NonbondedFullEwaldSystemForce
RealTopologyType	framework/forces/NonbondedFullSystemForce.h	/^    typedef SemiGenericTopology<typename TOneAtomPair::BoundaryConditions> RealTopologyType;$/;"	t	class:ProtoMol::NonbondedFullSystemForce
RealTopologyType	framework/forces/NonbondedMultiGridSystemForce.h	/^    typedef Topology<TBoundaryConditions, TCellManager> RealTopologyType;$/;"	t	class:ProtoMol::NonbondedMultiGridSystemForce
RealTopologyType	framework/forces/NonbondedPMEwaldSystemForce.h	/^    typedef Topology<TBoundaryConditions, TCellManager> RealTopologyType;$/;"	t	class:ProtoMol::NonbondedPMEwaldSystemForce
RealTopologyType	framework/forces/NonbondedSimpleFullSystemForce.h	/^    typedef SemiGenericTopology<typename TOneAtomPair::BoundaryConditions> RealTopologyType;$/;"	t	class:ProtoMol::NonbondedSimpleFullSystemForce
ReducedHessAngle	framework/base/ReducedHessAngle.cpp	/^  ReducedHessAngle::ReducedHessAngle(){$/;"	f	class:ProtoMol::ReducedHessAngle
ReducedHessAngle	framework/base/ReducedHessAngle.cpp	/^  ReducedHessAngle::ReducedHessAngle(const Vector3D& atom_i, \/\/position of atom i$/;"	f	class:ProtoMol::ReducedHessAngle
ReducedHessAngle	framework/base/ReducedHessAngle.h	/^  class ReducedHessAngle{$/;"	c	namespace:ProtoMol
ReducedHessCoulomb	framework/forces/ReducedHessCoulomb.h	/^  class ReducedHessCoulomb {$/;"	c	namespace:ProtoMol
ReducedHessLennardJones	framework/forces/ReducedHessLennardJones.h	/^  class ReducedHessLennardJones {$/;"	c	namespace:ProtoMol
ReducedHessTraits	framework/forces/ReducedHessTraits.h	/^  struct ReducedHessTraits<CoulombForce>{$/;"	s	namespace:ProtoMol
ReducedHessTraits	framework/forces/ReducedHessTraits.h	/^  struct ReducedHessTraits<LennardJonesForce>{$/;"	s	namespace:ProtoMol
RefArray	framework/base/Array_Fastest.h	/^    RefArray<T,1>()$/;"	f	class:ProtoMol::RefArray
RefArray	framework/base/Array_Fastest.h	/^    RefArray<T,N>()$/;"	f	class:ProtoMol::RefArray
RefArray	framework/base/Array_Fastest.h	/^  class RefArray : public RefArray<T,N-1>$/;"	c	namespace:ProtoMol
RefArray	framework/base/Array_Fastest.h	/^  class RefArray<T,1>$/;"	c	namespace:ProtoMol
RefArray	framework/base/Array_NoPartialSpecialization.h	/^      RefArray<1>(T * pElements, const size_type * pNDimensions, $/;"	f	class:ProtoMol::Array::RefArray
RefArray	framework/base/Array_NoPartialSpecialization.h	/^      RefArray<N>(T * pElements, const size_type * pNDimensions, $/;"	f	class:ProtoMol::Array::RefArray
RefArray	framework/base/Array_NoPartialSpecialization.h	/^    class RefArray$/;"	c	class:ProtoMol::Array
RefArray	framework/base/Array_NoPartialSpecialization.h	/^    class RefArray<1>$/;"	c	class:ProtoMol::Array
RepType	framework/base/ValueType.h	/^    typedef Real RepType;$/;"	t	struct:ProtoMol::ValueTraits
RepType	framework/base/ValueType.h	/^    typedef Vector3D RepType;$/;"	t	struct:ProtoMol::ValueTraits
RepType	framework/base/ValueType.h	/^    typedef bool RepType;$/;"	t	struct:ProtoMol::ValueTraits
RepType	framework/base/ValueType.h	/^    typedef int RepType;$/;"	t	struct:ProtoMol::ValueTraits
RepType	framework/base/ValueType.h	/^    typedef std::string RepType;       \/\/ Representation type of the value$/;"	t	struct:ProtoMol::ValueTraits
RepType	framework/base/ValueType.h	/^    typedef std::string RepType;$/;"	t	struct:ProtoMol::ValueTraits
RepType	framework/base/ValueType.h	/^    typedef std::vector<Real> RepType;$/;"	t	struct:ProtoMol::ValueTraits
RepType	framework/base/ValueType.h	/^    typedef unsigned int RepType;$/;"	t	struct:ProtoMol::ValueTraits
Replica	tools/rem/sequential/replica.cc	/^Replica::Replica( string name, string parentDir, string pdbFile, string psfFile,$/;"	f	class:Replica
Replica	tools/rem/sequential/replica.h	/^class Replica {$/;"	c
Report	framework/base/Report.cpp	/^  namespace Report { $/;"	n	namespace:ProtoMol	file:
Report	framework/base/Report.h	/^  namespace Report { $/;"	n	namespace:ProtoMol
ResetDimensions	framework/base/Array_Fastest.h	/^    void ResetDimensions()$/;"	f	class:ProtoMol::RefArray
SEMIGENERICTOPOLOGY_H	framework/topology/SemiGenericTopology.h	3;"	d
SEND_RANGE	framework/parallel/Parallel-FD.cpp	/^  const int SEND_RANGE = 2;$/;"	v
SEND_RANGE	framework/parallel/Parallel.cpp	/^  const int SEND_RANGE = 2;$/;"	v
SEQUENTIAL	framework/parallel/Parallel.h	/^      SEQUENTIAL,  \/\/\/< next() always true, traps calls of next() when running with 1 node (should not happen!)$/;"	e	enum:ProtoMol::Parallel::WorkState
SHADOW	framework/base/ScalarStructure.h	/^      SHADOW=LASTREDUCE,$/;"	e	enum:ProtoMol::ScalarStructure::Index
SHADOWHMCINTEGRATOR_H	framework/integrators/ShadowHMCIntegrator.h	2;"	d
SHIFT	framework/base/LookUpTableBase.h	/^    enum{SHIFT=(sizeof(TReal)*8-1-E-PRE)};$/;"	e	enum:ProtoMol::LookUpTableBase::<anonymous>
SHIFTSWITCHINGFUNCTIONBASE_H	framework/topology/ShiftSwitchingFunctionBase.h	3;"	d
SHIFTSWITCHINGFUNCTION_H	framework/topology/ShiftSwitchingFunction.h	3;"	d
SHORT	framework/base/BSplineType.h	/^      SHORT,$/;"	e	enum:ProtoMol::BSplineEnum::Enum
SI	framework/base/pmconstants.cpp	/^    namespace SI {$/;"	n	namespace:ProtoMol::Constant	file:
SI	framework/base/pmconstants.h	/^    namespace SI {$/;"	n	namespace:ProtoMol::Constant
SIGMA_CHARMM19_TO_CHARMM28	framework/base/PAR.h	/^      static const Real SIGMA_CHARMM19_TO_CHARMM28;$/;"	m	struct:ProtoMol::PAR::Nonbonded
SIGMA_CHARMM28_TO_CHARMM19	framework/base/PAR.h	/^      static const Real SIGMA_CHARMM28_TO_CHARMM19;$/;"	m	struct:ProtoMol::PAR::Nonbonded
SIMPLETYPES_H	framework/base/simpleTypes.h	3;"	d
SIZEOF_CHAR	protomol_config.h	150;"	d
SIZEOF_INT	protomol_config.h	153;"	d
SIZEOF_LONG	protomol_config.h	156;"	d
SIZEOF_SHORT	protomol_config.h	159;"	d
SIZEOF_SIZE_T	protomol_config.h	162;"	d
SIZEOF_VOIDP	protomol_config.h	165;"	d
SI_FACTOR	framework/forces/ExternalGravitationSystemForce.cpp	/^  static const Real SI_FACTOR = 1e-3*Constant::SI::KCAL\/Constant::SI::LENGTH_AA;$/;"	v	file:
SI_FORCE_FACTOR	framework/forces/ExternalMagneticFieldExtendedForce.cpp	/^  static const Real SI_FORCE_FACTOR = Constant::SI::ELECTRON_CHARGE*Constant::SI::AVOGADRO*Constant::SI::KCAL\/Constant::SI::LENGTH_AA*(1e8\/sqrt(4184.0));$/;"	v	file:
SLAVE	framework/parallel/Parallel.h	/^      SLAVE,       \/\/\/< slave$/;"	e	enum:ProtoMol::Parallel::WorkState
SOCKLEN_TYPE	protomol_config.h	168;"	d
SOCKLEN_TYPE	protomol_config_windows.h	46;"	d
SPHERICALSYSTEMFORCE_H	framework/forces/SphericalSystemForce.h	3;"	d
SQRTCOULOMBCONSTANT	framework/base/pmconstants.cpp	/^    const Real SQRTCOULOMBCONSTANT = 18.2226123264;$/;"	v
STACK_H	framework/base/Stack.h	3;"	d
STANDARDINTEGRATOR_H	framework/integrators/StandardIntegrator.h	3;"	d
STATIC	framework/parallel/Parallel.h	/^      STATIC,      \/\/\/< next() based on modulo, simple load balancing$/;"	e	enum:ProtoMol::Parallel::WorkState
STATIC	framework/parallel/ParallelType.h	/^      STATIC,          \/\/\/< Static load balancing$/;"	e	enum:ProtoMol::ParallelEnum::Enum
STDC_HEADERS	protomol_config.h	171;"	d
STEP	framework/base/LookUpTableBase.h	/^    enum{STEP=TLookUpValue::ENTRIES*NV};$/;"	e	enum:ProtoMol::LookUpTableBase::<anonymous>
STRING	framework/base/ValueType.h	/^      STRING,$/;"	e	enum:ProtoMol::ValueEnum::Enum
STRINGUTILITIES_H	framework/base/stringutilities.h	3;"	d
STSINTEGRATOR_H	framework/integrators/STSIntegrator.h	3;"	d
STSIntegrator	framework/integrators/STSIntegrator.cpp	/^  STSIntegrator::STSIntegrator() : StandardIntegrator(),myTimestep(0.0){}$/;"	f	class:ProtoMol::STSIntegrator
STSIntegrator	framework/integrators/STSIntegrator.cpp	/^  STSIntegrator::STSIntegrator(Real timestep, ForceGroup *overloadedForces) :$/;"	f	class:ProtoMol::STSIntegrator
STSIntegrator	framework/integrators/STSIntegrator.h	/^  class STSIntegrator: public StandardIntegrator {$/;"	c	namespace:ProtoMol
SYSTEMCOMPAREFORCE_H	framework/forces/SystemCompareForce.h	3;"	d
SYSTEMFORCE_H	framework/forces/SystemForce.h	3;"	d
SYSTEMTIMEFORCE_H	framework/forces/SystemTimeForce.h	3;"	d
SYSTEMUTILITIES_H	framework/base/systemutilities.h	3;"	d
S_ALT_LOC	framework/base/PDB.h	/^	S_ALT_LOC        = 17 - 1,$/;"	e	enum:ProtoMol::PDB::Atom::Start
S_ATOM_NAME	framework/base/PDB.h	/^	S_ATOM_NAME      = 13 - 1,$/;"	e	enum:ProtoMol::PDB::Atom::Start
S_CHAIN_ID	framework/base/PDB.h	/^	S_CHAIN_ID       = 22 - 1,$/;"	e	enum:ProtoMol::PDB::Atom::Start
S_CHAIN_ID	framework/base/PDB.h	/^	S_CHAIN_ID       = 22 - 1,$/;"	e	enum:ProtoMol::PDB::Ter::Start
S_CHARGE	framework/base/PDB.h	/^	S_CHARGE         = 79 - 1$/;"	e	enum:ProtoMol::PDB::Atom::Start
S_ELEMENT_SYMBOL	framework/base/PDB.h	/^	S_ELEMENT_SYMBOL = 77 - 1,$/;"	e	enum:ProtoMol::PDB::Atom::Start
S_I_CODE	framework/base/PDB.h	/^	S_I_CODE         = 27 - 1$/;"	e	enum:ProtoMol::PDB::Ter::Start
S_I_CODE	framework/base/PDB.h	/^	S_I_CODE         = 27 - 1,$/;"	e	enum:ProtoMol::PDB::Atom::Start
S_OCCUP	framework/base/PDB.h	/^	S_OCCUP          = 55 - 1,$/;"	e	enum:ProtoMol::PDB::Atom::Start
S_RECORD_NAME	framework/base/PDB.h	/^	S_RECORD_NAME    =  1 - 1,$/;"	e	enum:ProtoMol::PDB::Atom::Start
S_RECORD_NAME	framework/base/PDB.h	/^	S_RECORD_NAME    =  1 - 1,$/;"	e	enum:ProtoMol::PDB::Ter::Start
S_RES_NAME	framework/base/PDB.h	/^	S_RES_NAME       = 18 - 1,$/;"	e	enum:ProtoMol::PDB::Atom::Start
S_RES_NAME	framework/base/PDB.h	/^	S_RES_NAME       = 18 - 1,$/;"	e	enum:ProtoMol::PDB::Ter::Start
S_RES_SEQ	framework/base/PDB.h	/^	S_RES_SEQ        = 23 - 1,$/;"	e	enum:ProtoMol::PDB::Atom::Start
S_RES_SEQ	framework/base/PDB.h	/^	S_RES_SEQ        = 23 - 1,$/;"	e	enum:ProtoMol::PDB::Ter::Start
S_SEG_ID	framework/base/PDB.h	/^	S_SEG_ID         = 73 - 1,$/;"	e	enum:ProtoMol::PDB::Atom::Start
S_SERIAL	framework/base/PDB.h	/^	S_SERIAL         =  7 - 1,$/;"	e	enum:ProtoMol::PDB::Atom::Start
S_SERIAL	framework/base/PDB.h	/^	S_SERIAL         =  7 - 1,$/;"	e	enum:ProtoMol::PDB::Ter::Start
S_TEMP_FACT	framework/base/PDB.h	/^	S_TEMP_FACT      = 61 - 1,$/;"	e	enum:ProtoMol::PDB::Atom::Start
S_X	framework/base/PDB.h	/^	S_X              = 31 - 1,$/;"	e	enum:ProtoMol::PDB::Atom::Start
S_Y	framework/base/PDB.h	/^	S_Y              = 39 - 1,$/;"	e	enum:ProtoMol::PDB::Atom::Start
S_Z	framework/base/PDB.h	/^	S_Z              = 47 - 1,$/;"	e	enum:ProtoMol::PDB::Atom::Start
SameMoleculeConstraint	framework/forces/oneAtomContraints.h	/^  struct SameMoleculeConstraint {$/;"	s	namespace:ProtoMol
ScalarStructure	framework/base/ScalarStructure.cpp	/^  ScalarStructure::ScalarStructure() : Proxy(),$/;"	f	class:ProtoMol::ScalarStructure
ScalarStructure	framework/base/ScalarStructure.h	/^  class ScalarStructure : public Proxy {$/;"	c	namespace:ProtoMol
SelectType	framework/base/typeSelection.h	/^    template<unsigned int size, class A, class B> struct SelectType {$/;"	s	namespace:ProtoMol::Private
SelectTypeCheck	framework/base/typeSelection.h	/^    template<class A, unsigned int size> struct SelectTypeCheck {$/;"	s	namespace:ProtoMol::Private
SelectTypeCheckHelper	framework/base/typeSelection.h	/^    template<bool cmp, class A> struct SelectTypeCheckHelper {};$/;"	s	namespace:ProtoMol::Private
SelectTypeCheckHelper	framework/base/typeSelection.h	/^    template<class A> struct SelectTypeCheckHelper<true,A> {$/;"	s	namespace:ProtoMol::Private
SelectTypeHelper	framework/base/typeSelection.h	/^    template<bool cmp, class A, class B> struct SelectTypeHelper {$/;"	s	namespace:ProtoMol::Private
SelectTypeHelper	framework/base/typeSelection.h	/^    template<class A, class B> struct SelectTypeHelper<true,A,B> {$/;"	s	namespace:ProtoMol::Private
SemiGenericTopology	framework/topology/SemiGenericTopology.h	/^    SemiGenericTopology():GenericTopology(){}$/;"	f	class:ProtoMol::SemiGenericTopology
SemiGenericTopology	framework/topology/SemiGenericTopology.h	/^    SemiGenericTopology(Real csf, $/;"	f	class:ProtoMol::SemiGenericTopology
SemiGenericTopology	framework/topology/SemiGenericTopology.h	/^  class SemiGenericTopology: public GenericTopology {$/;"	c	namespace:ProtoMol
SetupDimensions	framework/base/Array_Fastest.h	/^    void SetupDimensions(const size_type * pNDimensions, $/;"	f	class:ProtoMol::RefArray
ShadowHMCIntegrator	framework/integrators/ShadowHMCIntegrator.cpp	/^    ShadowHMCIntegrator::ShadowHMCIntegrator( int cycleLen, Real initTemp,$/;"	f	class:ProtoMol::ShadowHMCIntegrator
ShadowHMCIntegrator	framework/integrators/ShadowHMCIntegrator.cpp	/^    ShadowHMCIntegrator::ShadowHMCIntegrator() : MCIntegrator(), myOrder(0),$/;"	f	class:ProtoMol::ShadowHMCIntegrator
ShadowHMCIntegrator	framework/integrators/ShadowHMCIntegrator.h	/^    class ShadowHMCIntegrator : public MCIntegrator {$/;"	c	namespace:ProtoMol
ShiftSwitchingFunction	framework/topology/ShiftSwitchingFunction.cpp	/^  ShiftSwitchingFunction::ShiftSwitchingFunction():myCutoff(0.0),$/;"	f	class:ProtoMol::ShiftSwitchingFunction
ShiftSwitchingFunction	framework/topology/ShiftSwitchingFunction.cpp	/^  ShiftSwitchingFunction::ShiftSwitchingFunction(Real cutoff):myCutoff(cutoff),$/;"	f	class:ProtoMol::ShiftSwitchingFunction
ShiftSwitchingFunction	framework/topology/ShiftSwitchingFunction.h	/^  class ShiftSwitchingFunction : private ShiftSwitchingFunctionBase {$/;"	c	namespace:ProtoMol
ShiftSwitchingFunctionBase	framework/topology/ShiftSwitchingFunctionBase.h	/^  class ShiftSwitchingFunctionBase {$/;"	c	namespace:ProtoMol
SphericalSystemForce	framework/forces/SphericalSystemForce.cpp	/^  SphericalSystemForce::SphericalSystemForce():SystemForce(),$/;"	f	class:ProtoMol::SphericalSystemForce
SphericalSystemForce	framework/forces/SphericalSystemForce.cpp	/^  SphericalSystemForce::SphericalSystemForce(Vector3D center, Real radius, Real k, int j \/*, Real u*\/):SystemForce(),$/;"	f	class:ProtoMol::SphericalSystemForce
SphericalSystemForce	framework/forces/SphericalSystemForce.h	/^  class SphericalSystemForce : public SystemForce {$/;"	c	namespace:ProtoMol
Stack	framework/base/Stack.h	/^  Stack<T>::Stack() {$/;"	f	class:ProtoMol::Stack
Stack	framework/base/Stack.h	/^  class Stack {$/;"	c	namespace:ProtoMol
StandardIntegrator	framework/integrators/StandardIntegrator.cpp	/^  StandardIntegrator::StandardIntegrator() :$/;"	f	class:ProtoMol::StandardIntegrator
StandardIntegrator	framework/integrators/StandardIntegrator.cpp	/^  StandardIntegrator::StandardIntegrator(ForceGroup* forceGroup)$/;"	f	class:ProtoMol::StandardIntegrator
StandardIntegrator	framework/integrators/StandardIntegrator.h	/^  class StandardIntegrator: public Integrator {$/;"	c	namespace:ProtoMol
Start	framework/base/PDB.h	/^      enum Start{$/;"	g	struct:ProtoMol::PDB::Atom
Start	framework/base/PDB.h	/^      enum Start{$/;"	g	struct:ProtoMol::PDB::Ter
SystemCompareForce	framework/forces/SystemCompareForce.cpp	/^  SystemCompareForce::SystemCompareForce(Force* actualForce, CompareForce* compareForce):CompareForce(actualForce,compareForce){}$/;"	f	class:ProtoMol::SystemCompareForce
SystemCompareForce	framework/forces/SystemCompareForce.h	/^  class SystemCompareForce : public CompareForce, public SystemForce {$/;"	c	namespace:ProtoMol
SystemForce	framework/forces/SystemForce.h	/^    SystemForce():Force(){}$/;"	f	class:ProtoMol::SystemForce
SystemForce	framework/forces/SystemForce.h	/^  class SystemForce : virtual public Force {$/;"	c	namespace:ProtoMol
SystemTimeForce	framework/forces/SystemTimeForce.cpp	/^  SystemTimeForce::SystemTimeForce(Force* actualForce):TimeForce(actualForce){}$/;"	f	class:ProtoMol::SystemTimeForce
SystemTimeForce	framework/forces/SystemTimeForce.h	/^  class SystemTimeForce : public TimeForce, public SystemForce {$/;"	c	namespace:ProtoMol
T	framework/imd/imd.h	/^      float T;$/;"	m	struct:ProtoMol::IMD::<anonymous>
T	framework/topology/ArrayCellListStructure.h	/^    typedef std::pair<T1,T2> T;$/;"	t	class:ProtoMol::ArrayCellListStructure
T1	framework/topology/ArrayCellListStructure.h	/^    typedef CubicCellLocation T1;$/;"	t	class:ProtoMol::ArrayCellListStructure
T2	framework/topology/ArrayCellListStructure.h	/^    typedef int T2;$/;"	t	class:ProtoMol::ArrayCellListStructure
TContainer	framework/topology/ArrayCellListStructure.h	/^    typedef Array<T,3> TContainer;$/;"	t	class:ProtoMol::ArrayCellListStructure
TEMPFILEREADER_H	framework/io/TempFileReader.h	3;"	d
TFactory	framework/frontend/ForceFactoryDetails.h	/^    typedef Factory<Force> TFactory;$/;"	t	class:ProtoMol::ForceFactoryDetails
TFactory	framework/frontend/IntegratorFactoryDetails.h	/^    typedef Factory<Integrator> TFactory;$/;"	t	class:ProtoMol::IntegratorFactoryDetails
TFactory	framework/frontend/OutputFactoryDetails.h	/^    typedef Factory<Output> TFactory;$/;"	t	class:ProtoMol::OutputFactoryDetails
TFactory	framework/frontend/TopologyFactoryDetails.h	/^    typedef Factory<GenericTopology> TFactory;$/;"	t	class:ProtoMol::TopologyFactoryDetails
TIMEFACTOR	framework/base/pmconstants.cpp	/^    const Real TIMEFACTOR     = 48.88821290839616;   \/\/ TIMEUNIT is 1 \/ sqrt(4.184e-4)$/;"	v
TIMEFORCE_H	framework/forces/TimeForce.h	3;"	d
TIMERSTATISTIC_H	framework/base/TimerStatistic.h	3;"	d
TIME_FS	framework/base/pmconstants.cpp	/^      const Real TIME_FS          = 1e+15;          \/\/ [fs]$/;"	v
TIME_WITH_SYS_TIME	protomol_config.h	174;"	d
TINY	framework/base/pmconstants.cpp	/^    const Real TINY           = 1.0e-20;$/;"	v
TInt	framework/base/LookUpTableBase.h	/^    typedef typename TypeSelection::Int<sizeof(TReal)>::type TInt;$/;"	t	class:ProtoMol::LookUpTableBase
TOPOLOGYFACTORYDETAILS_H	framework/frontend/TopologyFactoryDetails.h	3;"	d
TOPOLOGYFACTORY_H	framework/frontend/TopologyFactory.h	3;"	d
TOPOLOGYUTILITIES_H	framework/topology/topologyutilities.h	3;"	d
TOPOLOGY_H	framework/topology/Topology.h	3;"	d
TORSION_H	framework/topology/Torsion.h	3;"	d
TYPESELECTION_H	framework/base/typeSelection.h	3;"	d
TempFileReader	framework/io/TempFileReader.h	/^    explicit TempFileReader(const std::string& filename) : Reader(filename), myTemp(0), node(0) {}$/;"	f	class:ProtoMol::TempFileReader
TempFileReader	framework/io/TempFileReader.h	/^  class TempFileReader : public Reader {$/;"	c	namespace:ProtoMol
Ter	framework/base/PDB.cpp	/^  PDB::Ter::Ter():elementType(""),	      $/;"	f	class:ProtoMol::PDB::Ter
Ter	framework/base/PDB.cpp	/^  PDB::Ter::Ter(std::string etype,  $/;"	f	class:ProtoMol::PDB::Ter
Ter	framework/base/PDB.h	/^    struct Ter{$/;"	s	struct:ProtoMol::PDB
Text	framework/base/simpleTypes.h	/^    Text():text(""){}$/;"	f	struct:ProtoMol::Text
Text	framework/base/simpleTypes.h	/^    Text(const char* t):text(t){}$/;"	f	struct:ProtoMol::Text
Text	framework/base/simpleTypes.h	/^    Text(const std::string& t):text(t){}$/;"	f	struct:ProtoMol::Text
Text	framework/base/simpleTypes.h	/^  struct Text {$/;"	s	namespace:ProtoMol
TextMapType	framework/base/Configuration.h	/^    typedef std::map<std::string,std::string,ltstrNocase> TextMapType;$/;"	t	class:ProtoMol::Configuration
ThermostatEnum	framework/integrators/PaulTrapIntegrator.h	/^  class ThermostatEnum  {$/;"	c	namespace:ProtoMol
ThermostatType	framework/integrators/PaulTrapIntegrator.h	/^  typedef AbstractEnumType<ThermostatEnum> ThermostatType;$/;"	t	namespace:ProtoMol
TimeForce	framework/forces/TimeForce.cpp	/^  TimeForce::TimeForce(Force* actualForce){$/;"	f	class:ProtoMol::TimeForce
TimeForce	framework/forces/TimeForce.h	/^  class TimeForce : virtual public Force {$/;"	c	namespace:ProtoMol
TimeRep	framework/base/Timer.cpp	/^  TimeRep::TimeRep()$/;"	f	class:ProtoMol::TimeRep
TimeRep	framework/base/Timer.cpp	/^  TimeRep::TimeRep(double realTime, double userTime, double sysTime)$/;"	f	class:ProtoMol::TimeRep
TimeRep	framework/base/Timer.h	/^  class TimeRep {$/;"	c	namespace:ProtoMol
Timer	framework/base/Timer.cpp	/^  Timer::Timer()$/;"	f	class:ProtoMol::Timer
Timer	framework/base/Timer.h	/^  class Timer {$/;"	c	namespace:ProtoMol
TimerStatistic	framework/base/TimerStatistic.h	/^  class TimerStatistic {$/;"	c	namespace:ProtoMol
Topology	framework/topology/Topology.h	/^    Topology():SemiGenericTopology<TBoundaryConditions>(){}$/;"	f	class:ProtoMol::Topology
Topology	framework/topology/Topology.h	/^    Topology(Real csf, $/;"	f	class:ProtoMol::Topology
Topology	framework/topology/Topology.h	/^  class Topology: public SemiGenericTopology<TBoundaryConditions> {$/;"	c	namespace:ProtoMol
TopologyFactory	framework/frontend/TopologyFactory.h	/^  typedef Factory<GenericTopology> TopologyFactory;$/;"	t	namespace:ProtoMol
TopologyFactoryDetails	framework/frontend/TopologyFactoryDetails.cpp	/^  TopologyFactoryDetails::TopologyFactoryDetails():FactoryBase<GenericTopology>(){$/;"	f	class:ProtoMol::TopologyFactoryDetails
TopologyFactoryDetails	framework/frontend/TopologyFactoryDetails.cpp	/^  TopologyFactoryDetails::TopologyFactoryDetails(const TopologyFactoryDetails&){}$/;"	f	class:ProtoMol::TopologyFactoryDetails
TopologyFactoryDetails	framework/frontend/TopologyFactoryDetails.h	/^  class TopologyFactoryDetails : public FactoryBase <GenericTopology> {$/;"	c	namespace:ProtoMol
Torsion	framework/topology/Torsion.h	/^    Torsion():atom1(-1), atom2(-1), atom3(-1), atom4(-1) {$/;"	f	class:ProtoMol::Torsion
Torsion	framework/topology/Torsion.h	/^  class Torsion {$/;"	c	namespace:ProtoMol
TripleInt	framework/base/simpleTypes.h	/^    TripleInt():h(0),k(0),l(0){}$/;"	f	struct:ProtoMol::TripleInt
TripleInt	framework/base/simpleTypes.h	/^    TripleInt(int a, int b,int c):h(a),k(b),l(c){}$/;"	f	struct:ProtoMol::TripleInt
TripleInt	framework/base/simpleTypes.h	/^  struct TripleInt {$/;"	s	namespace:ProtoMol
Type	framework/base/ValueType.h	/^    typedef Real Type;$/;"	t	struct:ProtoMol::ValueTraits
Type	framework/base/ValueType.h	/^    typedef ValueTraits<Real> Type;$/;"	t	struct:ProtoMol::Enum2ValueTraits
Type	framework/base/ValueType.h	/^    typedef ValueTraits<ValueType::Force> Type;$/;"	t	struct:ProtoMol::Enum2ValueTraits
Type	framework/base/ValueType.h	/^    typedef ValueTraits<ValueType::Integrator> Type;$/;"	t	struct:ProtoMol::Enum2ValueTraits
Type	framework/base/ValueType.h	/^    typedef ValueTraits<Vector3D> Type;$/;"	t	struct:ProtoMol::Enum2ValueTraits
Type	framework/base/ValueType.h	/^    typedef ValueTraits<bool> Type;$/;"	t	struct:ProtoMol::Enum2ValueTraits
Type	framework/base/ValueType.h	/^    typedef ValueTraits<int> Type;$/;"	t	struct:ProtoMol::Enum2ValueTraits
Type	framework/base/ValueType.h	/^    typedef ValueTraits<std::string> Type;$/;"	t	struct:ProtoMol::Enum2ValueTraits
Type	framework/base/ValueType.h	/^    typedef ValueTraits<std::vector<Real> > Type;$/;"	t	struct:ProtoMol::Enum2ValueTraits
Type	framework/base/ValueType.h	/^    typedef ValueTraits<unsigned int> Type;$/;"	t	struct:ProtoMol::Enum2ValueTraits
Type	framework/base/ValueType.h	/^    typedef ValueType::Force Type;$/;"	t	struct:ProtoMol::ValueTraits
Type	framework/base/ValueType.h	/^    typedef ValueType::Integrator Type;$/;"	t	struct:ProtoMol::ValueTraits
Type	framework/base/ValueType.h	/^    typedef Vector3D Type;$/;"	t	struct:ProtoMol::ValueTraits
Type	framework/base/ValueType.h	/^    typedef bool Type;$/;"	t	struct:ProtoMol::ValueTraits
Type	framework/base/ValueType.h	/^    typedef int Type;$/;"	t	struct:ProtoMol::ValueTraits
Type	framework/base/ValueType.h	/^    typedef std::string Type;          \/\/ Type, template parameter$/;"	t	struct:ProtoMol::ValueTraits
Type	framework/base/ValueType.h	/^    typedef std::vector<Real> Type;$/;"	t	struct:ProtoMol::ValueTraits
Type	framework/base/ValueType.h	/^    typedef unsigned int Type;$/;"	t	struct:ProtoMol::ValueTraits
Type	framework/frontend/InputValue.h	/^    typedef typename Enum2ValueTraits<type>::Type Type;$/;"	t	class:ProtoMol::InputValue
Type	tools/bccAnalyzer.cpp	/^  enum Type {UNDEF,$/;"	g	struct:Format	file:
TypeSelection	framework/base/typeSelection.h	/^  namespace TypeSelection {$/;"	n	namespace:ProtoMol
UINT	framework/base/ValueType.h	/^      UINT,$/;"	e	enum:ProtoMol::ValueEnum::Enum
UIntArrayN	framework/base/Array_Fastest.h	/^    typedef const size_t (&UIntArrayN)[N];$/;"	t	class:ProtoMol::ArraySize
UNDEF	tools/bccAnalyzer.cpp	/^  enum Type {UNDEF,$/;"	e	enum:Format::Type	file:
UNDEFINED	framework/base/BSplineType.h	/^      UNDEFINED  = 0,  \/\/ Value returned when no string matches$/;"	e	enum:ProtoMol::BSplineEnum::Enum
UNDEFINED	framework/base/ConstraintValueType.h	/^      UNDEFINED  = 0,  \/\/ ConstraintValue returned when no string matches$/;"	e	enum:ProtoMol::ConstraintValueEnum::Enum
UNDEFINED	framework/base/PAR.h	/^      UNDEFINED,$/;"	e	enum:ProtoMol::PAR::CharmmTypeEnum
UNDEFINED	framework/base/ValueType.h	/^      UNDEFINED  = 0,   \/\/ Value returned when no string matches$/;"	e	enum:ProtoMol::ValueEnum::Enum
UNDEFINED	framework/frontend/InputPosVelType.h	/^      UNDEFINED  = 0,  \/\/ InputPosVel returned when no string matches$/;"	e	enum:ProtoMol::InputPosVelEnum::Enum
UNDEFINED	framework/integrators/PaulTrapIntegrator.h	/^      UNDEFINED  = 0,  \/\/ Value returned when no string matches$/;"	e	enum:ProtoMol::ThermostatEnum::Enum
UNDEFINED	framework/io/PARReader.h	/^      UNDEFINED,$/;"	e	enum:ProtoMol::PARReader::PARRecordTypeEnum
UNDEFINED	framework/parallel/ParallelType.h	/^      UNDEFINED  = 0,  \/\/ Value returned when no string matches$/;"	e	enum:ProtoMol::ParallelEnum::Enum
UNDEFINED	framework/topology/ExclusionType.h	/^      UNDEFINED  = 0,  \/\/ Value returned when no string matches$/;"	e	enum:ProtoMol::ExclusionEnum::Enum
UNIVERSALSWITCHINGFUNCTIONBASE_H	framework/topology/UniversalSwitchingFunctionBase.h	3;"	d
UNIVERSALSWITCHINGFUNCTION_H	framework/topology/UniversalSwitchingFunction.h	3;"	d
USE	framework/topology/C1SwitchingFunction.h	/^    enum {USE=1};$/;"	e	enum:ProtoMol::C1SwitchingFunction::<anonymous>
USE	framework/topology/C2SwitchingFunction.h	/^    enum {USE=1};$/;"	e	enum:ProtoMol::C2SwitchingFunction::<anonymous>
USE	framework/topology/CmpCnCnSwitchingFunction.h	/^    enum {USE=1};$/;"	e	enum:ProtoMol::CmpCnCnSwitchingFunction::<anonymous>
USE	framework/topology/CnSwitchingFunction.h	/^    enum {USE=1};$/;"	e	enum:ProtoMol::CnSwitchingFunction::<anonymous>
USE	framework/topology/ComplementSwitchingFunction.h	/^    enum {USE=1};$/;"	e	enum:ProtoMol::ComplementSwitchingFunction::<anonymous>
USE	framework/topology/CutoffSwitchingFunction.h	/^    enum {USE=1};$/;"	e	enum:ProtoMol::CutoffSwitchingFunction::<anonymous>
USE	framework/topology/RangeSwitchingFunction.h	/^    enum {USE=1};$/;"	e	enum:ProtoMol::RangeSwitchingFunction::<anonymous>
USE	framework/topology/ShiftSwitchingFunction.h	/^    enum {USE=1};$/;"	e	enum:ProtoMol::ShiftSwitchingFunction::<anonymous>
USE	framework/topology/UniversalSwitchingFunction.h	/^    enum {USE=0};$/;"	e	enum:ProtoMol::UniversalSwitchingFunction::<anonymous>
USE_REAL_IS_DOUBLE	framework/base/Real.h	9;"	d
Undefined	framework/base/Value.h	/^    struct Undefined{};$/;"	s	class:ProtoMol::Value
UniversalSwitchingFunction	framework/topology/UniversalSwitchingFunction.h	/^  class UniversalSwitchingFunction : private UniversalSwitchingFunctionBase {$/;"	c	namespace:ProtoMol
UniversalSwitchingFunctionBase	framework/topology/UniversalSwitchingFunctionBase.h	/^  class UniversalSwitchingFunctionBase {$/;"	c	namespace:ProtoMol
VACUUM	framework/topology/PeriodicBoundaryConditions.h	/^    enum {PERIODIC = 1, VACUUM = 0};$/;"	e	enum:ProtoMol::PeriodicBoundaryConditions::<anonymous>
VACUUM	framework/topology/VacuumBoundaryConditions.h	/^    enum {PERIODIC = 0, VACUUM = 1};$/;"	e	enum:ProtoMol::VacuumBoundaryConditions::<anonymous>
VACUUMBOUNDARYCONDITIONS_H	framework/topology/VacuumBoundaryConditions.h	3;"	d
VALUETYPE_H	framework/base/ValueType.h	3;"	d
VALUE_H	framework/base/Value.h	3;"	d
VECTOR	framework/base/ValueType.h	/^      VECTOR,$/;"	e	enum:ProtoMol::ValueEnum::Enum
VECTOR3D	framework/base/ValueType.h	/^      VECTOR3D,$/;"	e	enum:ProtoMol::ValueEnum::Enum
VECTOR3DBLOCK_H	framework/base/Vector3DBlock.h	3;"	d
VECTOR3D_H	framework/base/Vector3D.h	3;"	d
VECTOR_H	framework/base/Vector.h	3;"	d
VERSION	protomol_config.h	177;"	d
VIRIALXX	framework/base/ScalarStructure.h	/^      VIRIALXX,$/;"	e	enum:ProtoMol::ScalarStructure::Index
VIRIALXY	framework/base/ScalarStructure.h	/^      VIRIALXY,$/;"	e	enum:ProtoMol::ScalarStructure::Index
VIRIALXZ	framework/base/ScalarStructure.h	/^      VIRIALXZ,$/;"	e	enum:ProtoMol::ScalarStructure::Index
VIRIALYX	framework/base/ScalarStructure.h	/^      VIRIALYX,$/;"	e	enum:ProtoMol::ScalarStructure::Index
VIRIALYY	framework/base/ScalarStructure.h	/^      VIRIALYY,$/;"	e	enum:ProtoMol::ScalarStructure::Index
VIRIALYZ	framework/base/ScalarStructure.h	/^      VIRIALYZ,$/;"	e	enum:ProtoMol::ScalarStructure::Index
VIRIALZX	framework/base/ScalarStructure.h	/^      VIRIALZX,$/;"	e	enum:ProtoMol::ScalarStructure::Index
VIRIALZY	framework/base/ScalarStructure.h	/^      VIRIALZY,$/;"	e	enum:ProtoMol::ScalarStructure::Index
VIRIALZZ	framework/base/ScalarStructure.h	/^      VIRIALZZ,$/;"	e	enum:ProtoMol::ScalarStructure::Index
VISITED	framework/topology/AngleInfo.h	/^		     VISITED     =     10001,$/;"	e	enum:ProtoMol::AngleInfo::AngleType
VMDSOCKINTERNAL	framework/imd/vmdsock.cpp	29;"	d	file:
VacuumBoundaryConditions	framework/topology/VacuumBoundaryConditions.h	/^  class VacuumBoundaryConditions {$/;"	c	namespace:ProtoMol
Value	framework/base/Value.cpp	/^  Value::Value():myValue(NULL){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(Real value                        ):myValue(new Holder<ValueTraits<Real> >                 (value)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(Real value,                         const Undefined*):myValue(new Holder<ValueTraits<Real> >                 (value,false)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(bool value                        ):myValue(new Holder<ValueTraits<bool> >                 (value)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(bool value,                         const Undefined*):myValue(new Holder<ValueTraits<bool> >                 (value,false)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(const Value& other):myValue(other.myValue ? other.myValue->clone() : NULL){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(const Value& value, const Undefined*):myValue(value.myValue ? value.myValue->clone() : NULL){clear();}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(const ValueType::Force& value     ):myValue(new Holder<ValueTraits<ValueType::Force> >     (value)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(const ValueType::Force& value,      const Undefined*):myValue(new Holder<ValueTraits<ValueType::Force> >     (value,false)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(const ValueType::Integrator& value):myValue(new Holder<ValueTraits<ValueType::Integrator> >(value)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(const ValueType::Integrator& value, const Undefined*):myValue(new Holder<ValueTraits<ValueType::Integrator> >(value,false)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(const Vector3D& value             ):myValue(new Holder<ValueTraits<Vector3D> >             (value)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(const Vector3D& value,              const Undefined*):myValue(new Holder<ValueTraits<Vector3D> >             (value,false)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(const char* value                 ):myValue(new Holder<ValueTraits<std::string> >          (value)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(const char* value,                  const Undefined*):myValue(new Holder<ValueTraits<std::string> >          (value,false)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(const std::string& value          ):myValue(new Holder<ValueTraits<std::string> >          (value)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(const std::string& value,           const Undefined*):myValue(new Holder<ValueTraits<std::string> >          (value,false)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(const vector<Real>& value         ):myValue(new Holder<ValueTraits<vector<Real> > >        (value)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(const vector<Real>& value,          const Undefined*):myValue(new Holder<ValueTraits<vector<Real> > >        (value,false)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(int value                         ):myValue(new Holder<ValueTraits<int> >                  (value)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(int value,                          const Undefined*):myValue(new Holder<ValueTraits<int> >                  (value,false)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(unsigned int value                ):myValue(new Holder<ValueTraits<unsigned int> >         (value)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.cpp	/^  Value::Value(unsigned int value,                 const Undefined*):myValue(new Holder<ValueTraits<unsigned int> >         (value,false)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.h	/^     Value(const T&, const C&, const Value& value):myValue(new Holder<ValueTraits<T>, C>(ValueTraits<T>::init())){$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.h	/^    Value(const T& value, const C&):myValue(new Holder<ValueTraits<T>, C>(value)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.h	/^    Value(const T& value, const C&, const Undefined*):myValue(new Holder<ValueTraits<T>, C>(value,false)){}$/;"	f	class:ProtoMol::Value
Value	framework/base/Value.h	/^  class Value{$/;"	c	namespace:ProtoMol
ValueEnum	framework/base/ValueType.h	/^  class ValueEnum {$/;"	c	namespace:ProtoMol
ValueMapType	framework/base/Configuration.h	/^    typedef std::map<std::string,Value,ltstrNocase>       ValueMapType;$/;"	t	class:ProtoMol::Configuration
ValueTraits	framework/base/ValueType.h	/^  struct ValueTraits<Real>{$/;"	s	namespace:ProtoMol
ValueTraits	framework/base/ValueType.h	/^  struct ValueTraits<ValueType::Force>{$/;"	s	namespace:ProtoMol
ValueTraits	framework/base/ValueType.h	/^  struct ValueTraits<ValueType::Integrator>{$/;"	s	namespace:ProtoMol
ValueTraits	framework/base/ValueType.h	/^  struct ValueTraits<Vector3D>{$/;"	s	namespace:ProtoMol
ValueTraits	framework/base/ValueType.h	/^  struct ValueTraits<bool>{$/;"	s	namespace:ProtoMol
ValueTraits	framework/base/ValueType.h	/^  struct ValueTraits<char [n]> : public ValueTraits<std::string> {}; $/;"	s	namespace:ProtoMol
ValueTraits	framework/base/ValueType.h	/^  struct ValueTraits<const char [n]> : public ValueTraits<std::string> {}; $/;"	s	namespace:ProtoMol
ValueTraits	framework/base/ValueType.h	/^  struct ValueTraits<int>{$/;"	s	namespace:ProtoMol
ValueTraits	framework/base/ValueType.h	/^  struct ValueTraits<std::string>{$/;"	s	namespace:ProtoMol
ValueTraits	framework/base/ValueType.h	/^  struct ValueTraits<std::vector<Real> >{$/;"	s	namespace:ProtoMol
ValueTraits	framework/base/ValueType.h	/^  struct ValueTraits<unsigned int>{$/;"	s	namespace:ProtoMol
ValueType	framework/base/ValueType.h	/^  typedef AbstractEnumType<ValueEnum> ValueType;$/;"	t	namespace:ProtoMol
Vect	framework/base/Array_NoPartialSpecialization.h	/^    const std::vector<unsigned int> & Vect() const $/;"	f	class:ProtoMol::ArraySize
Vector	framework/base/Array_NoPartialSpecialization.h	/^    std::vector<unsigned int> & Vector;$/;"	m	class:ProtoMol::ArraySize
Vector	framework/base/Array_NoPartialSpecialization.h	/^    std::vector<unsigned int> Vector;$/;"	m	class:ProtoMol::ArraySizes
Vector	framework/base/Vector.h	/^    Vector(void){}$/;"	f	class:ProtoMol::Vector
Vector	framework/base/Vector.h	/^    explicit Vector(T elm) { $/;"	f	class:ProtoMol::Vector
Vector	framework/base/Vector.h	/^  class Vector  {$/;"	c	namespace:ProtoMol
Vector3D	framework/base/Vector3D.h	/^    Vector3D():x(0.0),y(0.0),z(0.0) {}$/;"	f	struct:ProtoMol::Vector3D
Vector3D	framework/base/Vector3D.h	/^    Vector3D(Real X, Real Y, Real Z):x(X),y(Y),z(Z) {}$/;"	f	struct:ProtoMol::Vector3D
Vector3D	framework/base/Vector3D.h	/^    Vector3D(const Vector3D &c) {$/;"	f	struct:ProtoMol::Vector3D
Vector3D	framework/base/Vector3D.h	/^  struct Vector3D {$/;"	s	namespace:ProtoMol
Vector3DBlock	framework/base/Vector3DBlock.h	/^    Vector3DBlock()  : Proxy(),vec() {}                                    $/;"	f	class:ProtoMol::Vector3DBlock
Vector3DBlock	framework/base/Vector3DBlock.h	/^    Vector3DBlock(size_type n, const Vector3D& t): Proxy(),vec(n,t) {}               $/;"	f	class:ProtoMol::Vector3DBlock
Vector3DBlock	framework/base/Vector3DBlock.h	/^    explicit Vector3DBlock(size_type n) : Proxy(),vec(n) {}                          $/;"	f	class:ProtoMol::Vector3DBlock
Vector3DBlock	framework/base/Vector3DBlock.h	/^  class Vector3DBlock: public Proxy{$/;"	c	namespace:ProtoMol
Vector3DIdx	tools/bccAnalyzer.cpp	/^  Vector3DIdx():v(Vector3D(0.0,0.0,0.0)),i(-1){}$/;"	f	class:Vector3DIdx
Vector3DIdx	tools/bccAnalyzer.cpp	/^  Vector3DIdx(const Vector3D& a):v(a),i(-1){}$/;"	f	class:Vector3DIdx
Vector3DIdx	tools/bccAnalyzer.cpp	/^  Vector3DIdx(const Vector3D& a, int b):v(a),i(b){}$/;"	f	class:Vector3DIdx
Vector3DIdx	tools/bccAnalyzer.cpp	/^class Vector3DIdx {$/;"	c	file:
VectorPacker	framework/base/Vector.h	/^    VectorPacker<T,N>(std::vector<T> & v):myVector(v){}$/;"	f	class:ProtoMol::VectorPacker
VectorPacker	framework/base/Vector.h	/^  class VectorPacker{$/;"	c	namespace:ProtoMol
Vol	framework/base/XSC.h	/^    Real Vol, Epsilon_vel;$/;"	m	struct:ProtoMol::XSC
W	framework/integrators/NPTVerletIntegrator.h	/^    Real W;                  \/\/  Barostat mass.  Units: (kcal fs^2 \/ mol)$/;"	m	class:ProtoMol::NPTVerletIntegrator
WALL	framework/base/TimerStatistic.h	/^      WALL  = 0,  $/;"	e	enum:ProtoMol::TimerStatistic::Enum
WRAPPERMETAFORCE_H	framework/forces/WrapperMetaForce.h	3;"	d
WRITER_H	framework/io/Writer.h	3;"	d
W_OK	framework/base/systemutilities.cpp	16;"	d	file:
WindowAve	framework/base/mathutilities.h	/^    WindowAve(unsigned int max = 25 ) : maxItems(max), sumItems(0.0) {}$/;"	f	class:ProtoMol::WindowAve
WindowAve	framework/base/mathutilities.h	/^  class WindowAve {$/;"	c	namespace:ProtoMol
WorkState	framework/parallel/Parallel.h	/^    enum WorkState {$/;"	g	class:ProtoMol::Parallel
WrapperMetaForce	framework/forces/WrapperMetaForce.cpp	/^  WrapperMetaForce::WrapperMetaForce(string id, bool minimal, Force* force, string forceAlias):MetaForce(),keyword(id),myMinimal(minimal){$/;"	f	class:ProtoMol::WrapperMetaForce
WrapperMetaForce	framework/forces/WrapperMetaForce.cpp	/^  WrapperMetaForce::WrapperMetaForce(string id, bool minimal, Force* force1, string forceAlias1, Force* force2, string forceAlias2):MetaForce(),keyword(id),myMinimal(minimal){$/;"	f	class:ProtoMol::WrapperMetaForce
WrapperMetaForce	framework/forces/WrapperMetaForce.h	/^  class WrapperMetaForce : public MetaForce {$/;"	c	namespace:ProtoMol
Writer	framework/io/Writer.cpp	/^  Writer::Writer():File(std::ios::out|std::ios::trunc){}$/;"	f	class:ProtoMol::Writer
Writer	framework/io/Writer.cpp	/^  Writer::Writer(const string& filename):File(std::ios::out|std::ios::trunc,filename){$/;"	f	class:ProtoMol::Writer
Writer	framework/io/Writer.cpp	/^  Writer::Writer(std::ios::openmode mode):File(std::ios::out|mode){}$/;"	f	class:ProtoMol::Writer
Writer	framework/io/Writer.cpp	/^  Writer::Writer(std::ios::openmode mode,const string& filename):File(std::ios::out|mode,filename){$/;"	f	class:ProtoMol::Writer
Writer	framework/io/Writer.h	/^  class Writer : public File {$/;"	c	namespace:ProtoMol
XFIGWRITER_H	framework/io/XFigWriter.h	3;"	d
XFigWriter	framework/io/XFigWriter.cpp	/^  XFigWriter::XFigWriter():Writer(),$/;"	f	class:ProtoMol::XFigWriter
XFigWriter	framework/io/XFigWriter.cpp	/^  XFigWriter::XFigWriter(const std::string& filename):Writer(filename),$/;"	f	class:ProtoMol::XFigWriter
XFigWriter	framework/io/XFigWriter.h	/^  class XFigWriter : public Writer {$/;"	c	namespace:ProtoMol
XSC	framework/base/XSC.h	/^  struct XSC{$/;"	s	namespace:ProtoMol
XSC_H	framework/base/XSC.h	3;"	d
XYZ	framework/base/XYZ.h	/^    XYZ(){};$/;"	f	struct:ProtoMol::XYZ
XYZ	framework/base/XYZ.h	/^    XYZ(size_t n):coords(n,Vector3D(0.0,0.0,0.0)),names(n,std::string("")){}$/;"	f	struct:ProtoMol::XYZ
XYZ	framework/base/XYZ.h	/^  struct XYZ{$/;"	s	namespace:ProtoMol
XYZ	framework/frontend/InputPosVelType.h	/^      XYZ,$/;"	e	enum:ProtoMol::InputPosVelEnum::Enum
XYZ	tools/bccAnalyzer.cpp	/^	     XYZ,$/;"	e	enum:Format::Type	file:
XYZBIN	framework/frontend/InputPosVelType.h	/^      XYZBIN,$/;"	e	enum:ProtoMol::InputPosVelEnum::Enum
XYZBIN	tools/bccAnalyzer.cpp	/^	     XYZBIN,$/;"	e	enum:Format::Type	file:
XYZBINREADER_H	framework/io/XYZBinReader.h	3;"	d
XYZBINWRITER_H	framework/io/XYZBinWriter.h	3;"	d
XYZBinReader	framework/io/XYZBinReader.cpp	/^  XYZBinReader::XYZBinReader():Reader(std::ios::binary),myCoords(NULL){}$/;"	f	class:ProtoMol::XYZBinReader
XYZBinReader	framework/io/XYZBinReader.cpp	/^  XYZBinReader::XYZBinReader(const std::string& filename):Reader(std::ios::binary,filename),myCoords(NULL){}$/;"	f	class:ProtoMol::XYZBinReader
XYZBinReader	framework/io/XYZBinReader.h	/^  class XYZBinReader : public Reader {$/;"	c	namespace:ProtoMol
XYZBinWriter	framework/io/XYZBinWriter.cpp	/^  XYZBinWriter::XYZBinWriter(bool isLittleEndian, unsigned int size):$/;"	f	class:ProtoMol::XYZBinWriter
XYZBinWriter	framework/io/XYZBinWriter.cpp	/^  XYZBinWriter::XYZBinWriter(const char* filename, bool isLittleEndian, unsigned int size):$/;"	f	class:ProtoMol::XYZBinWriter
XYZBinWriter	framework/io/XYZBinWriter.cpp	/^  XYZBinWriter::XYZBinWriter(const std::string& filename, bool isLittleEndian, unsigned int size):$/;"	f	class:ProtoMol::XYZBinWriter
XYZBinWriter	framework/io/XYZBinWriter.h	/^  class XYZBinWriter : public Writer {$/;"	c	namespace:ProtoMol
XYZREADER_H	framework/io/XYZReader.h	3;"	d
XYZReader	framework/io/XYZReader.cpp	/^  XYZReader::XYZReader():Reader(),myCoords(NULL),myNames(NULL){}$/;"	f	class:ProtoMol::XYZReader
XYZReader	framework/io/XYZReader.cpp	/^  XYZReader::XYZReader(const std::string& filename):Reader(filename),myCoords(NULL),myNames(NULL){}$/;"	f	class:ProtoMol::XYZReader
XYZReader	framework/io/XYZReader.h	/^  class XYZReader : public Reader {$/;"	c	namespace:ProtoMol
XYZTRA	tools/bccAnalyzer.cpp	/^	     XYZTRA};$/;"	e	enum:Format::Type	file:
XYZTRAJECTORYREADER_H	framework/io/XYZTrajectoryReader.h	3;"	d
XYZTRAJECTORYWRITER_H	framework/io/XYZTrajectoryWriter.h	3;"	d
XYZTrajectoryReader	framework/io/XYZTrajectoryReader.cpp	/^  XYZTrajectoryReader::XYZTrajectoryReader():Reader(),myCoords(NULL),myNames(NULL),myFirst(true){}$/;"	f	class:ProtoMol::XYZTrajectoryReader
XYZTrajectoryReader	framework/io/XYZTrajectoryReader.cpp	/^  XYZTrajectoryReader::XYZTrajectoryReader(const std::string& filename):Reader(filename),myCoords(NULL),myNames(NULL),myFirst(true){}$/;"	f	class:ProtoMol::XYZTrajectoryReader
XYZTrajectoryReader	framework/io/XYZTrajectoryReader.h	/^  class XYZTrajectoryReader : public Reader {$/;"	c	namespace:ProtoMol
XYZTrajectoryWriter	framework/io/XYZTrajectoryWriter.cpp	/^  XYZTrajectoryWriter::XYZTrajectoryWriter():$/;"	f	class:ProtoMol::XYZTrajectoryWriter
XYZTrajectoryWriter	framework/io/XYZTrajectoryWriter.cpp	/^  XYZTrajectoryWriter::XYZTrajectoryWriter(const std::string& filename):$/;"	f	class:ProtoMol::XYZTrajectoryWriter
XYZTrajectoryWriter	framework/io/XYZTrajectoryWriter.h	/^  class XYZTrajectoryWriter : public Writer {$/;"	c	namespace:ProtoMol
XYZWRITER_H	framework/io/XYZWriter.h	3;"	d
XYZWriter	framework/io/XYZWriter.cpp	/^  XYZWriter::XYZWriter():Writer(){}$/;"	f	class:ProtoMol::XYZWriter
XYZWriter	framework/io/XYZWriter.cpp	/^  XYZWriter::XYZWriter(const std::string& filename):Writer(filename){}$/;"	f	class:ProtoMol::XYZWriter
XYZWriter	framework/io/XYZWriter.h	/^  class XYZWriter : public Writer {$/;"	c	namespace:ProtoMol
XYZ_H	framework/base/XYZ.h	3;"	d
X_AXIS	framework/topology/topologyutilities.h	/^  enum {X_AXIS,Y_AXIS,Z_AXIS};$/;"	e	enum:ProtoMol::<anonymous>
Y_AXIS	framework/topology/topologyutilities.h	/^  enum {X_AXIS,Y_AXIS,Z_AXIS};$/;"	e	enum:ProtoMol::<anonymous>
ZERO	framework/base/ConstraintValueType.h	/^      ZERO,$/;"	e	enum:ProtoMol::ConstraintValueEnum::Enum
Z_AXIS	framework/topology/topologyutilities.h	/^  enum {X_AXIS,Y_AXIS,Z_AXIS};$/;"	e	enum:ProtoMol::<anonymous>
Zero	framework/base/ConstraintValueType.h	/^    typedef Enum2Type<ZERO> Zero;$/;"	t	class:ProtoMol::ConstraintValueEnum
_ESV_COMPLEX_	framework/base/FFTComplex.cpp	12;"	d	file:
_TIMER_H	framework/base/Timer.h	38;"	d
__SSTREAM__	framework/base/sstream_local.h	29;"	d
__my_sb	framework/base/sstream_local.h	/^    stringbuf __my_sb;$/;"	m	class:std::stringstreambase
a	framework/base/PAR.h	/^      Real a;             \/\/\/< epsilon$/;"	m	struct:ProtoMol::PAR::Nbfix
a1	framework/integrators/EquilibriumMOLLYIntegrator.h	/^      int a1;     \/\/ Global index of atom 1, GenericTopology)$/;"	m	struct:ProtoMol::EquilibriumMOLLYIntegrator::HydrogenBond
a1	framework/topology/ExclusionTable.h	/^    int a1,a2;$/;"	m	struct:ProtoMol::ExclusionPair
a14	framework/base/PAR.h	/^      Real a14;           \/\/\/< epsilon 14$/;"	m	struct:ProtoMol::PAR::Nbfix
a2	framework/integrators/EquilibriumMOLLYIntegrator.h	/^      int a2;     \/\/ Global index of atom 1, GenericTopology)$/;"	m	struct:ProtoMol::EquilibriumMOLLYIntegrator::HydrogenBond
a2	framework/topology/ExclusionTable.h	/^    int a1,a2;$/;"	m	struct:ProtoMol::ExclusionPair
aborting	framework/base/Report.cpp	/^    MyStreamer& aborting(MyStreamer& stream){$/;"	f	namespace:ProtoMol::Report
absF2	framework/forces/CompareForce.h	/^      Real absF2,rFavg,rFmax,rPE;	$/;"	m	struct:ProtoMol::CompareForce::CompareError
absindex	framework/base/LookUpTableBase.h	/^    static int absindex(Real r){$/;"	f	class:ProtoMol::LookUpTableBase
acceptors	framework/base/PSF.h	/^    std::vector<Acceptor> acceptors;$/;"	m	class:ProtoMol::PSF
access	framework/base/systemutilities.cpp	12;"	d	file:
accumulateEnergy	framework/forces/CoulombEwaldRealForce.h	/^    static void accumulateEnergy(ScalarStructure* energies, Real energy) {$/;"	f	class:ProtoMol::CoulombEwaldRealForce
accumulateEnergy	framework/forces/CoulombEwaldRealTableForce.h	/^    static void accumulateEnergy(ScalarStructure* energies, Real energy) {$/;"	f	class:ProtoMol::CoulombEwaldRealTableForce
accumulateEnergy	framework/forces/CoulombForce.h	/^    static void accumulateEnergy(ScalarStructure* energies, Real energy) {$/;"	f	class:ProtoMol::CoulombForce
accumulateEnergy	framework/forces/CoulombMultiGridDirectForce.h	/^    static void accumulateEnergy(ScalarStructure* energies, Real energy) {$/;"	f	class:ProtoMol::CoulombMultiGridDirectForce
accumulateEnergy	framework/forces/CoulombMultiGridDirectTableForce.h	/^    static void accumulateEnergy(ScalarStructure* energies, Real energy) {$/;"	f	class:ProtoMol::CoulombMultiGridDirectTableForce
accumulateEnergy	framework/forces/CoulombTableForce.h	/^    static void accumulateEnergy(ScalarStructure* energies, Real energy) {$/;"	f	class:ProtoMol::CoulombTableForce
accumulateEnergy	framework/forces/GravitationForce.h	/^    static void accumulateEnergy(ScalarStructure* energies, Real energy) {(*energies)[ScalarStructure::OTHER] += energy;}$/;"	f	class:ProtoMol::GravitationForce
accumulateEnergy	framework/forces/LennardJonesForce.h	/^    static void accumulateEnergy(ScalarStructure* energies, Real energy) {$/;"	f	class:ProtoMol::LennardJonesForce
accumulateEnergy	framework/forces/LennardJonesTableForce.h	/^    static void accumulateEnergy(ScalarStructure* energies, Real energy) {$/;"	f	class:ProtoMol::LennardJonesTableForce
accumulateEnergy	framework/forces/MagneticDipoleForce.h	/^    static void accumulateEnergy(ScalarStructure* energies, Real energy) {$/;"	f	class:ProtoMol::MagneticDipoleForce
accumulateNegTo	framework/base/ReducedHessAngle.cpp	/^  void ReducedHessAngle::accumulateNegTo(int i, int j, Matrix3by3 x)$/;"	f	class:ProtoMol::ReducedHessAngle
accumulateTo	framework/base/ReducedHessAngle.cpp	/^  void ReducedHessAngle::accumulateTo(int i, int j, Matrix3by3 x)$/;"	f	class:ProtoMol::ReducedHessAngle
add	framework/base/Vector3D.h	/^    Vector3D add(const Vector3D& b) const {return (*this)+b;}$/;"	f	struct:ProtoMol::Vector3D
add	framework/base/mathutilities.h	/^  inline void WindowAve::add( Real newValue ) {$/;"	f	class:ProtoMol::WindowAve
add	framework/frontend/OutputCache.h	/^    void add(const PAR& par){myPAR = par;}$/;"	f	class:ProtoMol::OutputCache
add	framework/frontend/OutputCache.h	/^    void add(const PSF& psf){myPSF = psf;}$/;"	f	class:ProtoMol::OutputCache
add	framework/frontend/OutputCache.h	/^    void add(const Real *replicaHistory) {myReplicaHistory = replicaHistory;}$/;"	f	class:ProtoMol::OutputCache
add	framework/frontend/OutputCache.h	/^    void add(const iSGPAR& par){myiSGPAR = par;}$/;"	f	class:ProtoMol::OutputCache
add	framework/frontend/OutputCache.h	/^    void add(const std::vector<PDB::Atom>& pdbAtoms){myAtoms = pdbAtoms;}$/;"	f	class:ProtoMol::OutputCache
add	framework/frontend/OutputCache.h	/^    void add(const std::vector<Real> &REMExchangeRate) {myREMRates = REMExchangeRate;}$/;"	f	class:ProtoMol::OutputCache
add	framework/topology/ExclusionTable.cpp	/^  void ExclusionTable::add(int atom1, int atom2, ExclusionClass type) {$/;"	f	class:ProtoMol::ExclusionTable
addBond	framework/topology/AngleInfo.cpp	/^  void AngleInfo::addBond(int atom) {$/;"	f	class:ProtoMol::AngleInfo
addDoKeyword	framework/frontend/Output.h	/^    virtual bool addDoKeyword() const{return true;}$/;"	f	class:ProtoMol::Output
addDoKeyword	framework/frontend/OutputScreen.h	/^    virtual bool addDoKeyword() const {return false;}$/;"	f	class:ProtoMol::OutputScreen
addElement	framework/base/Stack.h	/^  void Stack<T>::addElement(T newElement) {$/;"	f	class:ProtoMol::Stack
addExtendedForce	framework/forces/ForceGroup.cpp	/^  void ForceGroup::addExtendedForce(ExtendedForce *force) {$/;"	f	class:ProtoMol::ForceGroup
addForce	framework/forces/ForceGroup.cpp	/^  void ForceGroup::addForce(Force *force){$/;"	f	class:ProtoMol::ForceGroup
addForce	framework/forces/WrapperMetaForce.cpp	/^  void WrapperMetaForce::addForce(Force* force, string forceAlias){$/;"	f	class:ProtoMol::WrapperMetaForce
addMetaForce	framework/forces/ForceGroup.cpp	/^  void ForceGroup::addMetaForce(MetaForce *force) {$/;"	f	class:ProtoMol::ForceGroup
addModifier	framework/integrators/Integrator.cpp	/^  void Integrator::addModifier(Modifier* modifier){$/;"	f	class:ProtoMol::Integrator
addModifierAfterInitialize	framework/integrators/Integrator.h	/^    virtual void addModifierAfterInitialize(){}$/;"	f	class:ProtoMol::Integrator
addModifierAfterInitialize	framework/integrators/NPTVerletIntegrator.cpp	/^  void NPTVerletIntegrator::addModifierAfterInitialize() {$/;"	f	class:ProtoMol::NPTVerletIntegrator
addModifierAfterInitialize	framework/integrators/NVTVerletIntegrator.cpp	/^  void NVTVerletIntegrator::addModifierAfterInitialize() {$/;"	f	class:ProtoMol::NVTVerletIntegrator
addModifierAfterInitialize	framework/integrators/NoseNVTLeapfrogIntegrator.cpp	/^  void NoseNVTLeapfrogIntegrator::addModifierAfterInitialize(){$/;"	f	class:ProtoMol::NoseNVTLeapfrogIntegrator
addModifierAfterInitialize	framework/integrators/STSIntegrator.cpp	/^  void STSIntegrator::addModifierAfterInitialize(){$/;"	f	class:ProtoMol::STSIntegrator
addModifierBeforeInitialize	framework/integrators/Integrator.h	/^    virtual void addModifierBeforeInitialize(){}$/;"	f	class:ProtoMol::Integrator
addModifierBeforeInitialize	framework/integrators/MOLLYIntegrator.cpp	/^  void MOLLYIntegrator::addModifierBeforeInitialize(){$/;"	f	class:ProtoMol::MOLLYIntegrator
addMolVirial	framework/base/ScalarStructure.cpp	/^  void ScalarStructure::addMolVirial(const Vector3D &force12,$/;"	f	class:ProtoMol::ScalarStructure
addMollyForce	framework/forces/ForceGroup.cpp	/^  void ForceGroup::addMollyForce(MollyForce *force) {$/;"	f	class:ProtoMol::ForceGroup
addRandomForceToMyForce	framework/integrators/BBKIntegrator.cpp	/^  void BBKIntegrator::addRandomForceToMyForce() {$/;"	f	class:ProtoMol::BBKIntegrator
addSystemForce	framework/forces/ForceGroup.cpp	/^  void ForceGroup::addSystemForce(SystemForce *force) {$/;"	f	class:ProtoMol::ForceGroup
addToCache	framework/frontend/OutputCollection.h	/^    void addToCache(const T& obj){myCache->add(obj);}$/;"	f	class:ProtoMol::OutputCollection
addToForceGroup	framework/forces/ExtendedForce.cpp	/^  void ExtendedForce::addToForceGroup(ForceGroup* forceGroup){$/;"	f	class:ProtoMol::ExtendedForce
addToForceGroup	framework/forces/MetaForce.cpp	/^  void MetaForce::addToForceGroup(ForceGroup* forceGroup){$/;"	f	class:ProtoMol::MetaForce
addToForceGroup	framework/forces/MollyForce.cpp	/^  void MollyForce::addToForceGroup(ForceGroup* forceGroup){$/;"	f	class:ProtoMol::MollyForce
addToForceGroup	framework/forces/SystemForce.cpp	/^  void SystemForce::addToForceGroup(ForceGroup* forceGroup){$/;"	f	class:ProtoMol::SystemForce
addVelocityVirial	framework/topology/topologyutilities.cpp	/^  void addVelocityVirial(ScalarStructure* energies, $/;"	f	namespace:ProtoMol
addVirial	framework/base/ScalarStructure.cpp	/^  void ScalarStructure::addVirial(const Vector3D & force12, const Vector3D &diff){$/;"	f	class:ProtoMol::ScalarStructure
addVirial	framework/base/ScalarStructure.cpp	/^  void ScalarStructure::addVirial(const Vector3D & force12, const Vector3D &diff,$/;"	f	class:ProtoMol::ScalarStructure
addr	framework/imd/vmdsock.h	/^      struct sockaddr_in addr; \/\/< address of socket provided by bind() $/;"	m	struct:ProtoMol::IMD::<anonymous>
addrlen	framework/imd/vmdsock.h	/^      int addrlen;             \/\/< size of the addr struct $/;"	m	struct:ProtoMol::IMD::<anonymous>
adjustAlias	framework/base/Makeable.h	/^    T* adjustAlias(T* obj) const{$/;"	f	class:ProtoMol::Makeable
adjustWithDefaultParameters	framework/base/Makeable.h	/^    virtual bool adjustWithDefaultParameters(std::vector<Value>& values, const Configuration* \/*config*\/) const{ return checkParameterTypes(values);}$/;"	f	class:ProtoMol::Makeable
adjustWithDefaultParameters	framework/frontend/OutputBSDL.cpp	/^  bool OutputBSDL::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputBSDL
adjustWithDefaultParameters	framework/frontend/OutputDCDTrajectory.cpp	/^  bool OutputDCDTrajectory::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputDCDTrajectory
adjustWithDefaultParameters	framework/frontend/OutputDihedrals.cpp	/^  bool OutputDihedrals::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputDihedrals
adjustWithDefaultParameters	framework/frontend/OutputFile.cpp	/^  bool OutputFile::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputFile
adjustWithDefaultParameters	framework/frontend/OutputFinalPDBPos.cpp	/^  bool OutputFinalPDBPos::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputFinalPDBPos
adjustWithDefaultParameters	framework/frontend/OutputFinalXYZBinPos.cpp	/^  bool OutputFinalXYZBinPos::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputFinalXYZBinPos
adjustWithDefaultParameters	framework/frontend/OutputFinalXYZPos.cpp	/^  bool OutputFinalXYZPos::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputFinalXYZPos
adjustWithDefaultParameters	framework/frontend/OutputPDBFramePos.cpp	/^  bool OutputPDBFramePos::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputPDBFramePos
adjustWithDefaultParameters	framework/frontend/OutputPaulTrap.cpp	/^  bool OutputPaulTrap::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputPaulTrap
adjustWithDefaultParameters	framework/frontend/OutputREMExchangeRate.cpp	/^  bool OutputREMExchangeRate::adjustWithDefaultParameters(vector<Value> &values, const Configuration *config) const {$/;"	f	class:ProtoMol::OutputREMExchangeRate
adjustWithDefaultParameters	framework/frontend/OutputREMHistory.cpp	/^  bool OutputREMHistoryFile::adjustWithDefaultParameters(vector<Value> &values, const Configuration *config) const {$/;"	f	class:ProtoMol::OutputREMHistoryFile
adjustWithDefaultParameters	framework/frontend/OutputScreen.cpp	/^  bool OutputScreen::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputScreen
adjustWithDefaultParameters	framework/frontend/OutputState.cpp	/^  bool OutputState::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputState
adjustWithDefaultParameters	framework/frontend/OutputXYZBinTrajectoryPos.cpp	/^  bool OutputXYZBinTrajectoryPos::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryPos
adjustWithDefaultParameters	framework/frontend/OutputXYZBinTrajectoryVel.cpp	/^  bool OutputXYZBinTrajectoryVel::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryVel
adjustWithDefaultParameters	framework/frontend/OutputXYZTrajectoryForce.cpp	/^  bool OutputXYZTrajectoryForce::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputXYZTrajectoryForce
adjustWithDefaultParameters	framework/frontend/OutputXYZTrajectoryPos.cpp	/^  bool OutputXYZTrajectoryPos::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputXYZTrajectoryPos
adjustWithDefaultParameters	framework/frontend/OutputXYZTrajectoryVel.cpp	/^  bool OutputXYZTrajectoryVel::adjustWithDefaultParameters(vector<Value>& values, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputXYZTrajectoryVel
adoptMediForceModifier	framework/integrators/Integrator.cpp	/^  void Integrator::adoptMediForceModifier(Modifier* modifier){$/;"	f	class:ProtoMol::Integrator
adoptOutput	framework/frontend/OutputCollection.cpp	/^  void OutputCollection::adoptOutput(Output* output){$/;"	f	class:ProtoMol::OutputCollection
adoptPostDriftOrNextModifier	framework/integrators/Integrator.cpp	/^  void Integrator::adoptPostDriftOrNextModifier(Modifier* modifier){$/;"	f	class:ProtoMol::Integrator
adoptPostForceModifier	framework/integrators/Integrator.cpp	/^  void Integrator::adoptPostForceModifier(Modifier* modifier){$/;"	f	class:ProtoMol::Integrator
adoptPostStepModifier	framework/integrators/Integrator.cpp	/^  void Integrator::adoptPostStepModifier(Modifier* modifier){$/;"	f	class:ProtoMol::Integrator
adoptPreDriftOrNextModifier	framework/integrators/Integrator.cpp	/^  void Integrator::adoptPreDriftOrNextModifier(Modifier* modifier){$/;"	f	class:ProtoMol::Integrator
adoptPreForceModifier	framework/integrators/Integrator.cpp	/^  void Integrator::adoptPreForceModifier(Modifier* modifier){$/;"	f	class:ProtoMol::Integrator
adoptPreStepModifier	framework/integrators/Integrator.cpp	/^  void Integrator::adoptPreStepModifier(Modifier* modifier){$/;"	f	class:ProtoMol::Integrator
allReduce	framework/parallel/Parallel-FD.cpp	/^  void allReduce(ScalarStructure* energies){$/;"	f	namespace:ProtoMol
allReduce	framework/parallel/Parallel-FD.cpp	/^  void allReduce(T* begin, T* end){$/;"	f	namespace:ProtoMol
allReduce	framework/parallel/Parallel-FD.cpp	/^  void allReduce(Vector3DBlock* coords){$/;"	f	namespace:ProtoMol
allReduce	framework/parallel/Parallel.cpp	/^  void allReduce(ScalarStructure* energies){$/;"	f	namespace:ProtoMol
allReduce	framework/parallel/Parallel.cpp	/^  void allReduce(T* begin, T* end){$/;"	f	namespace:ProtoMol
allReduce	framework/parallel/Parallel.cpp	/^  void allReduce(Vector3DBlock* coords){$/;"	f	namespace:ProtoMol
allReduceScalar	framework/parallel/Parallel-FD.cpp	/^  void allReduceScalar(T& begin){$/;"	f	namespace:ProtoMol
allReduceScalar	framework/parallel/Parallel.cpp	/^  void allReduceScalar(T& begin){$/;"	f	namespace:ProtoMol
allgather	framework/parallel/Parallel-FD.cpp	/^  void Parallel::allgather(Real *, int, Real *) {}$/;"	f	class:ProtoMol::Parallel
allgather	framework/parallel/Parallel-FD.cpp	/^  void Parallel::allgather(Real *data, int num, Real *data_array) {$/;"	f	class:ProtoMol::Parallel
allgather	framework/parallel/Parallel.cpp	/^  void Parallel::allgather(Real *, int, Real *) {}$/;"	f	class:ProtoMol::Parallel
allgather	framework/parallel/Parallel.cpp	/^  void Parallel::allgather(Real *data, int num, Real *data_array) {$/;"	f	class:ProtoMol::Parallel
allnodes	framework/base/Report.cpp	/^    MyStreamer& allnodes(MyStreamer& stream){$/;"	f	namespace:ProtoMol::Report
allnodesserial	framework/base/Report.cpp	/^    MyStreamer& allnodesserial(MyStreamer& stream){$/;"	f	namespace:ProtoMol::Report
allslavesserial	framework/base/Report.cpp	/^    MyStreamer& allslavesserial(MyStreamer& stream){$/;"	f	namespace:ProtoMol::Report
alphaLJ	framework/base/Atom.h	/^    Real alphaLJ;$/;"	m	struct:ProtoMol::Atom
altLoc	framework/base/PDB.h	/^      std::string altLoc;	   \/\/\/< alternate_location $/;"	m	struct:ProtoMol::PDB::Atom
angle	framework/integrators/BSplineMOLLYIntegrator.h	/^      int angle,bond1,bond2;$/;"	m	struct:ProtoMol::BSplineMOLLYIntegrator::AngleIndex
angleList	framework/base/Molecule.h	/^    std::vector<int> angleList;$/;"	m	struct:ProtoMol::Molecule
angles	framework/base/PAR.h	/^    std::vector<Angle> angles;$/;"	m	class:ProtoMol::PAR
angles	framework/base/PSF.h	/^    std::vector<Angle> angles;$/;"	m	class:ProtoMol::PSF
angles	framework/topology/GenericTopology.h	/^    std::vector<Angle>    angles;$/;"	m	class:ProtoMol::GenericTopology
angleval	framework/base/PAR.h	/^      Real angleval;      \/\/\/< angle value$/;"	m	struct:ProtoMol::PAR::Angle
angularMomentum	framework/frontend/OutputCache.cpp	/^  Vector3D OutputCache::angularMomentum() const{$/;"	f	class:ProtoMol::OutputCache
angularMomentum	framework/topology/topologyutilities.cpp	/^  Vector3D angularMomentum(const Vector3DBlock *positions, $/;"	f	namespace:ProtoMol
anterpolateCharge	framework/base/Grid.h	/^  inline void Grid<TInterpolation>::anterpolateCharge(Real q, const Vector3D& coord, unsigned int index)  {$/;"	f	class:ProtoMol::Grid
anterpolateCharge	framework/base/MultiGrid.h	/^  inline void MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::anterpolateCharge(Real q, const Vector3D& coord, unsigned int index)  {$/;"	f	class:ProtoMol::MultiGrid
anyExclsForThisDelta	framework/topology/ExclusionTable.h	/^    char*           anyExclsForThisDelta;$/;"	m	class:ProtoMol::ExclusionTable
anyExtendedForces	framework/forces/ForceGroup.h	/^  inline bool ForceGroup::anyExtendedForces(void) const {$/;"	f	class:ProtoMol::ForceGroup
anyForces	framework/forces/ForceGroup.h	/^  inline bool ForceGroup::anyForces(void) const {$/;"	f	class:ProtoMol::ForceGroup
anyMediForceModify	framework/integrators/Integrator.h	/^    bool anyMediForceModify()       const {return !myMediForceModifiers.empty();};$/;"	f	class:ProtoMol::Integrator
anyMetaForces	framework/forces/ForceGroup.h	/^  inline bool ForceGroup::anyMetaForces(void) const {$/;"	f	class:ProtoMol::ForceGroup
anyMollyForces	framework/forces/ForceGroup.h	/^  inline bool ForceGroup::anyMollyForces(void) const {$/;"	f	class:ProtoMol::ForceGroup
anyPostDriftOrNextModify	framework/integrators/Integrator.h	/^    bool anyPostDriftOrNextModify() const {return !myPostDriftOrNextModifiers.empty();};$/;"	f	class:ProtoMol::Integrator
anyPostForceModify	framework/integrators/Integrator.h	/^    bool anyPostForceModify()       const {return !myPostForceModifiers.empty();};$/;"	f	class:ProtoMol::Integrator
anyPostStepModify	framework/integrators/Integrator.h	/^    bool anyPostStepModify()        const {return !myPostStepModifiers.empty();};$/;"	f	class:ProtoMol::Integrator
anyPreDriftOrNextModify	framework/integrators/Integrator.h	/^    bool anyPreDriftOrNextModify()  const {return !myPreDriftOrNextModifiers.empty();};$/;"	f	class:ProtoMol::Integrator
anyPreForceModify	framework/integrators/Integrator.h	/^    bool anyPreForceModify()        const {return !myPreForceModifiers.empty();};$/;"	f	class:ProtoMol::Integrator
anyPreStepModify	framework/integrators/Integrator.h	/^    bool anyPreStepModify()         const {return !myPreStepModifiers.empty();};$/;"	f	class:ProtoMol::Integrator
anySystemForces	framework/forces/ForceGroup.h	/^  inline bool ForceGroup::anySystemForces(void) const {$/;"	f	class:ProtoMol::ForceGroup
array_dims	framework/base/Array_Fastest.h	/^    enum  { array_dims = 1 };$/;"	e	enum:ProtoMol::RefArray::<anonymous>
array_dims	framework/base/Array_Fastest.h	/^    enum  { array_dims = N };$/;"	e	enum:ProtoMol::Array::<anonymous>
array_dims	framework/base/Array_Fastest.h	/^    enum  { array_dims = N };$/;"	e	enum:ProtoMol::RefArray::<anonymous>
array_dims	framework/base/Array_NoPartialSpecialization.h	/^      enum  { array_dims = 1 };$/;"	e	enum:ProtoMol::Array::RefArray::<anonymous>
array_dims	framework/base/Array_NoPartialSpecialization.h	/^      enum  { array_dims = N };$/;"	e	enum:ProtoMol::Array::RefArray::<anonymous>
array_dims	framework/base/Array_NoPartialSpecialization.h	/^    enum  { array_dims = N };$/;"	e	enum:ProtoMol::Array::<anonymous>
assign	framework/forces/CoulombEwaldRealTableForceBase.h	/^      void assign(Real r, Real r1, int ex, Real v, Real d, TReal* val) const{$/;"	f	class:ProtoMol::CoulombEwaldRealTableForceBase::LookUpValues
assign	framework/forces/CoulombMultiGridDirectTableForceBase.h	/^      void assign(Real , Real r1, int, Real v, Real d, TReal* val) const{$/;"	f	class:ProtoMol::CoulombMultiGridDirectTableForceBase::LookUpValues
assign	framework/forces/CoulombTableForceBase.h	/^      void assign(Real r, Real r1, int ex, Real v, Real d, TReal* val) const{$/;"	f	class:ProtoMol::CoulombTableForceBase::LookUpValues
assign	framework/forces/LennardJonesTableForceBase.h	/^      void assign(Real r, Real r1, int ex, Real v, Real d, TReal* val) const{$/;"	f	class:ProtoMol::LennardJonesTableForceBase::LookUpValues
atom	framework/base/PAR.h	/^      std::string atom;    \/\/\/< atom number$/;"	m	struct:ProtoMol::PAR::Nonbonded
atom1	framework/base/PAR.h	/^      std::string atom1;  \/\/\/< atom 1 number$/;"	m	struct:ProtoMol::PAR::Angle
atom1	framework/base/PAR.h	/^      std::string atom1;  \/\/\/< atom 1 number$/;"	m	struct:ProtoMol::PAR::Bond
atom1	framework/base/PAR.h	/^      std::string atom1;  \/\/\/< atom 1 number$/;"	m	struct:ProtoMol::PAR::Dihedral
atom1	framework/base/PAR.h	/^      std::string atom1;  \/\/\/< atom 1 number$/;"	m	struct:ProtoMol::PAR::Improper
atom1	framework/base/PAR.h	/^      std::string atom1;  \/\/\/< atom 1 number$/;"	m	struct:ProtoMol::PAR::Nbfix
atom1	framework/base/PAR.h	/^      std::string atom1; \/\/\/< atom 1 number$/;"	m	struct:ProtoMol::PAR::Hbond
atom1	framework/base/PSF.h	/^      int atom1;      \/\/\/< acceptor atom 1 number$/;"	m	struct:ProtoMol::PSF::Acceptor
atom1	framework/base/PSF.h	/^      int atom1;      \/\/\/< angle atom 1 number$/;"	m	struct:ProtoMol::PSF::Angle
atom1	framework/base/PSF.h	/^      int atom1;      \/\/\/< bonded atom 1 number$/;"	m	struct:ProtoMol::PSF::Bond
atom1	framework/base/PSF.h	/^      int atom1;      \/\/\/< dihedral atom 1 number$/;"	m	struct:ProtoMol::PSF::Dihedral
atom1	framework/base/PSF.h	/^      int atom1;      \/\/\/< donor atom 1 number$/;"	m	struct:ProtoMol::PSF::Donor
atom1	framework/base/PSF.h	/^      int atom1;      \/\/\/< improper atom 1 number$/;"	m	struct:ProtoMol::PSF::Improper
atom1	framework/base/PSF.h	/^      int atom1;      \/\/\/< ngrp atom 1 number$/;"	m	struct:ProtoMol::PSF::Ngrp
atom1	framework/base/PSF.h	/^      int atom1;      \/\/\/< nonbonded atom number$/;"	m	struct:ProtoMol::PSF::Nonbonded
atom1	framework/topology/Angle.h	/^    int atom1;$/;"	m	class:ProtoMol::Angle
atom1	framework/topology/Bond.h	/^      int atom1;$/;"	m	struct:ProtoMol::Bond::Constraint
atom1	framework/topology/Bond.h	/^    int atom1;$/;"	m	class:ProtoMol::Bond
atom1	framework/topology/Torsion.h	/^    int atom1;         \/\/\/< The first atom in this interaction.  $/;"	m	class:ProtoMol::Torsion
atom2	framework/base/PAR.h	/^      std::string atom2;  \/\/\/< atom 2 number$/;"	m	struct:ProtoMol::PAR::Angle
atom2	framework/base/PAR.h	/^      std::string atom2;  \/\/\/< atom 2 number$/;"	m	struct:ProtoMol::PAR::Bond
atom2	framework/base/PAR.h	/^      std::string atom2;  \/\/\/< atom 2 number$/;"	m	struct:ProtoMol::PAR::Dihedral
atom2	framework/base/PAR.h	/^      std::string atom2;  \/\/\/< atom 2 number$/;"	m	struct:ProtoMol::PAR::Improper
atom2	framework/base/PAR.h	/^      std::string atom2;  \/\/\/< atom 2 number$/;"	m	struct:ProtoMol::PAR::Nbfix
atom2	framework/base/PAR.h	/^      std::string atom2; \/\/\/< atom 2 number$/;"	m	struct:ProtoMol::PAR::Hbond
atom2	framework/base/PSF.h	/^      int atom2;      \/\/\/< acceptor atom 2 number$/;"	m	struct:ProtoMol::PSF::Acceptor
atom2	framework/base/PSF.h	/^      int atom2;      \/\/\/< angle atom 2 number$/;"	m	struct:ProtoMol::PSF::Angle
atom2	framework/base/PSF.h	/^      int atom2;      \/\/\/< bonded atom 2 number$/;"	m	struct:ProtoMol::PSF::Bond
atom2	framework/base/PSF.h	/^      int atom2;      \/\/\/< dihedral atom 2 number$/;"	m	struct:ProtoMol::PSF::Dihedral
atom2	framework/base/PSF.h	/^      int atom2;      \/\/\/< donor atom 2 number$/;"	m	struct:ProtoMol::PSF::Donor
atom2	framework/base/PSF.h	/^      int atom2;      \/\/\/< improper atom 2 number$/;"	m	struct:ProtoMol::PSF::Improper
atom2	framework/base/PSF.h	/^      int atom2;      \/\/\/< ngrp atom 2 number$/;"	m	struct:ProtoMol::PSF::Ngrp
atom2	framework/topology/Angle.h	/^    int atom2;$/;"	m	class:ProtoMol::Angle
atom2	framework/topology/Bond.h	/^      int atom2;$/;"	m	struct:ProtoMol::Bond::Constraint
atom2	framework/topology/Bond.h	/^    int atom2;$/;"	m	class:ProtoMol::Bond
atom2	framework/topology/Torsion.h	/^    int atom2;         \/\/\/< The second atom in this interaction.       $/;"	m	class:ProtoMol::Torsion
atom3	framework/base/PAR.h	/^      std::string atom3;  \/\/\/< atom 3 number$/;"	m	struct:ProtoMol::PAR::Angle
atom3	framework/base/PAR.h	/^      std::string atom3;  \/\/\/< atom 3 number$/;"	m	struct:ProtoMol::PAR::Dihedral
atom3	framework/base/PAR.h	/^      std::string atom3;  \/\/\/< atom 3 number$/;"	m	struct:ProtoMol::PAR::Improper
atom3	framework/base/PSF.h	/^      int atom3;      \/\/\/< angle atom 3 number$/;"	m	struct:ProtoMol::PSF::Angle
atom3	framework/base/PSF.h	/^      int atom3;      \/\/\/< dihedral atom 3 number$/;"	m	struct:ProtoMol::PSF::Dihedral
atom3	framework/base/PSF.h	/^      int atom3;      \/\/\/< improper atom 3 number$/;"	m	struct:ProtoMol::PSF::Improper
atom3	framework/base/PSF.h	/^      int atom3;      \/\/\/< ngrp atom 3 number$/;"	m	struct:ProtoMol::PSF::Ngrp
atom3	framework/topology/Angle.h	/^    int atom3;$/;"	m	class:ProtoMol::Angle
atom3	framework/topology/Torsion.h	/^    int atom3;         \/\/\/< The third atom in this interaction.  $/;"	m	class:ProtoMol::Torsion
atom4	framework/base/PAR.h	/^      std::string atom4;  \/\/\/< atom 4 number$/;"	m	struct:ProtoMol::PAR::Dihedral
atom4	framework/base/PAR.h	/^      std::string atom4;  \/\/\/< atom 4 number$/;"	m	struct:ProtoMol::PAR::Improper
atom4	framework/base/PSF.h	/^      int atom4;      \/\/\/< dihedral atom 4 number$/;"	m	struct:ProtoMol::PSF::Dihedral
atom4	framework/base/PSF.h	/^      int atom4;      \/\/\/< improper atom 4 number$/;"	m	struct:ProtoMol::PSF::Improper
atom4	framework/topology/Torsion.h	/^    int atom4;         \/\/\/< The fourth atom in this interaction.$/;"	m	class:ProtoMol::Torsion
atomNum	framework/base/Atom.h	/^    int atomNum;$/;"	m	struct:ProtoMol::Atom
atomTypeToSymbolName	framework/topology/topologyutilities.cpp	/^  string atomTypeToSymbolName(const string& type) {$/;"	f	namespace:ProtoMol
atomTypes	framework/topology/GenericTopology.h	/^    std::vector<AtomType> atomTypes;  $/;"	m	class:ProtoMol::GenericTopology
atom_name	framework/base/PSF.h	/^      std::string atom_name;    \/\/\/< atom name$/;"	m	struct:ProtoMol::PSF::Atom
atom_type	framework/base/PSF.h	/^      std::string atom_type;    \/\/\/< atom type$/;"	m	struct:ProtoMol::PSF::Atom
atoms	framework/base/Molecule.h	/^    std::vector<int> atoms;$/;"	m	struct:ProtoMol::Molecule
atoms	framework/base/PDB.h	/^    std::vector<Atom> atoms;$/;"	m	struct:ProtoMol::PDB
atoms	framework/base/PSF.h	/^    std::vector<Atom> atoms;$/;"	m	class:ProtoMol::PSF
atoms	framework/topology/GenericTopology.h	/^    std::vector<Atom>     atoms;  $/;"	m	class:ProtoMol::GenericTopology
averagingPositions	framework/integrators/MOLLYIntegrator.cpp	/^  void MOLLYIntegrator::averagingPositions(){$/;"	f	class:ProtoMol::MOLLYIntegrator
b	framework/base/PAR.h	/^      Real b;             \/\/\/< sigma$/;"	m	struct:ProtoMol::PAR::Nbfix
b1	framework/integrators/BSplineMOLLYIntegrator.h	/^      int b1,b2;$/;"	m	struct:ProtoMol::BSplineMOLLYIntegrator::BondIndex
b14	framework/base/PAR.h	/^      Real b14;           \/\/\/< sigma 14$/;"	m	struct:ProtoMol::PAR::Nbfix
b2	framework/integrators/BSplineMOLLYIntegrator.h	/^      int b1,b2;$/;"	m	struct:ProtoMol::BSplineMOLLYIntegrator::BondIndex
back	framework/base/Vector3DBlock.h	/^    const_reference back() const                                 {return vec.back();}           $/;"	f	class:ProtoMol::Vector3DBlock
back	framework/base/Vector3DBlock.h	/^    reference back()                                             {return vec.back();}                 $/;"	f	class:ProtoMol::Vector3DBlock
backward	framework/base/FFTComplex.cpp	/^    void backward(){zfft3d(-1,myNZ,myNY,myNX,myArray,myNZ,myNY,myFFTCoeff);}$/;"	f	class:ProtoMol::FFTInternal
backward	framework/base/FFTComplex.cpp	/^  void FFTComplex::backward(){$/;"	f	class:ProtoMol::FFTComplex
backward	framework/integrators/Integrator.cpp	/^  void Integrator::backward(){$/;"	f	class:ProtoMol::Integrator
basisCell	framework/topology/ArrayCellListStructure.h	/^    T1 basisCell(const T1& t1) const{$/;"	f	class:ProtoMol::ArrayCellListStructure
bcast	framework/parallel/Parallel-FD.cpp	/^  void Parallel::bcast(Vector3DBlock* coords) {$/;"	f	class:ProtoMol::Parallel
bcast	framework/parallel/Parallel-FD.cpp	/^  void Parallel::bcast(Vector3DBlock*) {}$/;"	f	class:ProtoMol::Parallel
bcast	framework/parallel/Parallel-FD.cpp	/^  void Parallel::bcast(int& n) {$/;"	f	class:ProtoMol::Parallel
bcast	framework/parallel/Parallel-FD.cpp	/^  void Parallel::bcast(int&) {}$/;"	f	class:ProtoMol::Parallel
bcast	framework/parallel/Parallel.cpp	/^  void Parallel::bcast(Vector3DBlock* coords) {$/;"	f	class:ProtoMol::Parallel
bcast	framework/parallel/Parallel.cpp	/^  void Parallel::bcast(Vector3DBlock*) {}$/;"	f	class:ProtoMol::Parallel
bcast	framework/parallel/Parallel.cpp	/^  void Parallel::bcast(int& n) {$/;"	f	class:ProtoMol::Parallel
bcast	framework/parallel/Parallel.cpp	/^  void Parallel::bcast(int&) {}$/;"	f	class:ProtoMol::Parallel
bcastSlaves	framework/parallel/Parallel-FD.cpp	/^  void Parallel::bcastSlaves(Real* begin, Real* end) {$/;"	f	class:ProtoMol::Parallel
bcastSlaves	framework/parallel/Parallel-FD.cpp	/^  void Parallel::bcastSlaves(Real*, Real*){}$/;"	f	class:ProtoMol::Parallel
bcastSlaves	framework/parallel/Parallel.cpp	/^  void Parallel::bcastSlaves(Real* begin, Real* end) {$/;"	f	class:ProtoMol::Parallel
bcastSlaves	framework/parallel/Parallel.cpp	/^  void Parallel::bcastSlaves(Real*, Real*){}$/;"	f	class:ProtoMol::Parallel
begin	compilerTests/pngTest.cpp	/^  unsigned char* begin() const{return &p[0];}$/;"	f	class:PPM
begin	framework/base/Array_Fastest.h	/^    const_iterator begin() const { return m_pArrayElements; }$/;"	f	class:ProtoMol::Array
begin	framework/base/Array_Fastest.h	/^    const_iterator begin() const { return m_pElements; }$/;"	f	class:ProtoMol::RefArray
begin	framework/base/Array_Fastest.h	/^    iterator       begin()       { return m_pArrayElements; }$/;"	f	class:ProtoMol::Array
begin	framework/base/Array_Fastest.h	/^    iterator       begin()       { return m_pElements; }$/;"	f	class:ProtoMol::RefArray
begin	framework/base/Array_NoPartialSpecialization.h	/^      const_iterator begin() const { return m_pElements; }$/;"	f	class:ProtoMol::Array::RefArray
begin	framework/base/Array_NoPartialSpecialization.h	/^      iterator       begin()       { return m_pElements; }$/;"	f	class:ProtoMol::Array::RefArray
begin	framework/base/Array_NoPartialSpecialization.h	/^    const_iterator begin() const { return m_pArrayElements; }$/;"	f	class:ProtoMol::Array
begin	framework/base/Array_NoPartialSpecialization.h	/^    iterator       begin()       { return m_pArrayElements; }$/;"	f	class:ProtoMol::Array
begin	framework/base/Configuration.h	/^    const_iterator begin() const {return myValues.begin();}$/;"	f	class:ProtoMol::Configuration
begin	framework/base/Configuration.h	/^    iterator begin() {return myValues.begin();}$/;"	f	class:ProtoMol::Configuration
begin	framework/base/PGM.h	/^    unsigned char* begin() const{return &p[0];}$/;"	f	class:ProtoMol::PGM
begin	framework/base/PPM.h	/^    unsigned char* begin() const{return &p[0];}$/;"	f	class:ProtoMol::PPM
begin	framework/base/Vector3DBlock.h	/^    const_iterator begin() const                                 {return vec.begin();}                      $/;"	f	class:ProtoMol::Vector3DBlock
begin	framework/base/Vector3DBlock.h	/^    iterator begin()                                             {return vec.begin();}                              $/;"	f	class:ProtoMol::Vector3DBlock
begin	framework/frontend/Factory.h	/^    static const_iterator begin(){$/;"	f	class:ProtoMol::Factory
begin	framework/frontend/OutputCollection.h	/^    const_iterator begin() const {return myOutputList.begin();}$/;"	f	class:ProtoMol::OutputCollection
begin	framework/frontend/OutputCollection.h	/^    iterator       begin()       {return myOutputList.begin();}$/;"	f	class:ProtoMol::OutputCollection
begin	framework/topology/ArrayCellListStructure.h	/^    const_iterator begin() const { return myBeginConst;}$/;"	f	class:ProtoMol::ArrayCellListStructure
begin	framework/topology/ArrayCellListStructure.h	/^    iterator       begin()       { return myBegin;}$/;"	f	class:ProtoMol::ArrayCellListStructure
blocksCorrection	framework/base/MultiGrid.h	/^  inline void MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::blocksCorrection(unsigned int nBlocks){$/;"	f	class:ProtoMol::MultiGrid
bond1	framework/integrators/BSplineMOLLYIntegrator.h	/^      int angle,bond1,bond2;$/;"	m	struct:ProtoMol::BSplineMOLLYIntegrator::AngleIndex
bond2	framework/integrators/BSplineMOLLYIntegrator.h	/^      int angle,bond1,bond2;$/;"	m	struct:ProtoMol::BSplineMOLLYIntegrator::AngleIndex
bondList	framework/base/Molecule.h	/^    std::vector<int> bondList;$/;"	m	struct:ProtoMol::Molecule
bondRattleShakeConstraints	framework/topology/GenericTopology.h	/^    std::vector<Bond::Constraint> bondRattleShakeConstraints; $/;"	m	class:ProtoMol::GenericTopology
bonds	framework/base/PAR.h	/^    std::vector<Bond> bonds;$/;"	m	class:ProtoMol::PAR
bonds	framework/base/PSF.h	/^    std::vector<Bond> bonds;$/;"	m	class:ProtoMol::PSF
bonds	framework/topology/GenericTopology.h	/^    std::vector<Bond>     bonds; $/;"	m	class:ProtoMol::GenericTopology
bottom	framework/integrators/Integrator.cpp	/^  Integrator* Integrator::bottom(){$/;"	f	class:ProtoMol::Integrator
bottom	framework/integrators/Integrator.cpp	/^  const Integrator* Integrator::bottom() const{$/;"	f	class:ProtoMol::Integrator
boundaryConditions	framework/forces/NonbondedFullEwaldSystemForce.h	/^    PeriodicBoundaryConditions boundaryConditions;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
boundaryConditions	framework/forces/NonbondedPMEwaldSystemForce.h	/^    PeriodicBoundaryConditions boundaryConditions;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
boundaryConditions	framework/topology/SemiGenericTopology.h	/^    BoundaryConditions boundaryConditions;$/;"	m	class:ProtoMol::SemiGenericTopology
boundingbox	framework/base/Vector3DBlock.cpp	/^  void Vector3DBlock::boundingbox(Vector3D& minbb, Vector3D& maxbb) const{$/;"	f	class:ProtoMol::Vector3DBlock
brent	framework/frontend/OutputCache.cpp	/^  Real OutputCache::brent(Real ax, Real bx, Real cx, Real tol, Real &xmin, int dihindex, bool max) const{$/;"	f	class:ProtoMol::OutputCache
brentMaxima	framework/frontend/OutputCache.cpp	/^  vector< vector< Real > > OutputCache::brentMaxima(vector<int> dihedralset, bool max) const{$/;"	f	class:ProtoMol::OutputCache
broadcast	framework/parallel/Parallel-FD.cpp	/^  void broadcast(ScalarStructure* energies){$/;"	f	namespace:ProtoMol
broadcast	framework/parallel/Parallel-FD.cpp	/^  void broadcast(T* begin, T* end){$/;"	f	namespace:ProtoMol
broadcast	framework/parallel/Parallel-FD.cpp	/^  void broadcast(Vector3DBlock* coords){$/;"	f	namespace:ProtoMol
broadcast	framework/parallel/Parallel.cpp	/^  void broadcast(ScalarStructure* energies){$/;"	f	namespace:ProtoMol
broadcast	framework/parallel/Parallel.cpp	/^  void broadcast(T* begin, T* end){$/;"	f	namespace:ProtoMol
broadcast	framework/parallel/Parallel.cpp	/^  void broadcast(Vector3DBlock* coords){$/;"	f	namespace:ProtoMol
broadcastScalar	framework/parallel/Parallel-FD.cpp	/^  void broadcastScalar(T& begin){$/;"	f	namespace:ProtoMol
broadcastScalar	framework/parallel/Parallel.cpp	/^  void broadcastScalar(T& begin){$/;"	f	namespace:ProtoMol
buf	framework/base/sstream_local.h	/^    std::string                 buf;$/;"	m	class:std::stringbuf
bufsize	framework/base/sstream_local.h	/^    streamsize                  bufsize;$/;"	m	class:std::stringbuf
buildCellLists	framework/topology/buildCellLists.cpp	/^  void buildCellLists(const Topology<PeriodicBoundaryConditions,CubicCellManager>* topo,$/;"	f	namespace:ProtoMol
buildCellLists	framework/topology/buildCellLists.cpp	/^  void buildCellLists(const Topology<VacuumBoundaryConditions,CubicCellManager>* topo,$/;"	f	namespace:ProtoMol
buildExclusionTable	framework/frontend/buildTopology.cpp	/^    void buildExclusionTable(GenericTopology* topo, const ExclusionType& exclusionType) {$/;"	f	namespace:ProtoMol
buildLatticeVectors	framework/topology/PeriodicBoundaryConditions.cpp	/^  vector<Vector3D>  PeriodicBoundaryConditions::buildLatticeVectors(Real cutoff) const{$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
buildLatticeVectors	framework/topology/VacuumBoundaryConditions.cpp	/^  vector<Vector3D> VacuumBoundaryConditions::buildLatticeVectors(Real) const{$/;"	f	class:ProtoMol::VacuumBoundaryConditions
buildMolecularCenterOfMass	framework/topology/topologyutilities.cpp	/^  void buildMolecularCenterOfMass(const Vector3DBlock *positions, $/;"	f	namespace:ProtoMol
buildMolecularMomentum	framework/topology/topologyutilities.cpp	/^  void buildMolecularMomentum(const Vector3DBlock *velocities, $/;"	f	namespace:ProtoMol
buildMoleculeTable	framework/frontend/buildTopology.cpp	/^    void buildMoleculeTable(GenericTopology *topo){$/;"	f	namespace:ProtoMol
buildRattleShakeBondConstraintList	framework/topology/topologyutilities.cpp	/^  void buildRattleShakeBondConstraintList(GenericTopology * topology, vector<Bond::Constraint>& bondConstraints){$/;"	f	namespace:ProtoMol
buildTopology	framework/frontend/buildTopology.cpp	/^    void buildTopology(GenericTopology* topo,const PSF& psf, const PAR& par, bool dihedralMultPSF){$/;"	f	namespace:ProtoMol
build_angle_list	framework/topology/topologyutilities.cpp	/^  void build_angle_list (const GenericTopology *topo, const unsigned int atomID,const unsigned int inAtomID, const unsigned int outAtomID, const unsigned int exclAtomID, Real rotAngle, vector<AngleInfo> *angles) {$/;"	f	namespace:ProtoMol
c	tools/bccAnalyzer.cpp	/^  Vector3DIdx v0,c,v1;$/;"	m	class:PairVector3D	file:
c	tools/bccAnalyzer.cpp	/^  const Vector3D c;$/;"	m	class:radialCmpVector3D	file:
calcAngle	framework/forces/AngleSystemForce.h	/^  inline void AngleSystemForce<TBoundaryConditions>::calcAngle(const TBoundaryConditions &boundary,$/;"	f	class:ProtoMol::AngleSystemForce
calcAngleEnergy	framework/forces/AngleSystemForce.h	/^  inline Real AngleSystemForce<TBoundaryConditions>::calcAngleEnergy(const TBoundaryConditions &boundary,$/;"	f	class:ProtoMol::AngleSystemForce
calcBond	framework/forces/BondSystemForce.h	/^  inline void BondSystemForce<TBoundaryConditions>::calcBond(const TBoundaryConditions &boundary,$/;"	f	class:ProtoMol::BondSystemForce
calcBondEnergy	framework/forces/BondSystemForce.h	/^  inline Real BondSystemForce<TBoundaryConditions>::calcBondEnergy(const TBoundaryConditions &boundary,$/;"	f	class:ProtoMol::BondSystemForce
calcDelGstats	framework/integrators/ShadowHMCIntegrator.cpp	/^    void ShadowHMCIntegrator::calcDelGstats( Real  muH, Real  varH,$/;"	f	class:ProtoMol::ShadowHMCIntegrator
calcError	framework/integrators/ModifierMetaRattle.cpp	/^  Real ModifierMetaRattle::calcError() const {$/;"	f	class:ProtoMol::ModifierMetaRattle
calcError	framework/integrators/ModifierMetaShake.cpp	/^  Real ModifierMetaShake::calcError() const {$/;"	f	class:ProtoMol::ModifierMetaShake
calcHessiansBondsAnglesHBonds	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  void BSplineMOLLYIntegrator::calcHessiansBondsAnglesHBonds() {$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
calcMGStepVar	framework/integrators/ShadowHMCIntegrator.cpp	/^    void ShadowHMCIntegrator::calcMGStepVar( Real &mu, Real &var, int numSteps ) {$/;"	f	class:ProtoMol::ShadowHMCIntegrator
calcMOLLYForcesHalfKickOneDrift	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  void BSplineMOLLYIntegrator::calcMOLLYForcesHalfKickOneDrift(){$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
calcMOLLYForcesOneKickOneDrift	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  void BSplineMOLLYIntegrator::calcMOLLYForcesOneKickOneDrift(){$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
calcShadow	framework/integrators/ModifierShadow.cpp	/^    Real ModifierShadow::calcShadow() {$/;"	f	class:ProtoMol::ModifierShadow
calcTorsion	framework/forces/MTorsionSystemForce.h	/^  inline void MTorsionSystemForce<TBoundaryConditions>::calcTorsion(const TBoundaryConditions &boundary,$/;"	f	class:ProtoMol::MTorsionSystemForce
calcTorsionEnergy	framework/forces/MTorsionSystemForce.h	/^  inline Real MTorsionSystemForce<TBoundaryConditions>::calcTorsionEnergy(const TBoundaryConditions &boundary,$/;"	f	class:ProtoMol::MTorsionSystemForce
calculateDissipativeAndRandomForces	framework/integrators/DMDLeapfrogIntegrator.cpp	/^  void DMDLeapfrogIntegrator::calculateDissipativeAndRandomForces()$/;"	f	class:ProtoMol::DMDLeapfrogIntegrator
calculateDissipativeForces	framework/integrators/DMDLeapfrogIntegrator.cpp	/^  void DMDLeapfrogIntegrator::calculateDissipativeForces()$/;"	f	class:ProtoMol::DMDLeapfrogIntegrator
calculateForces	framework/integrators/STSIntegrator.cpp	/^  void STSIntegrator::calculateForces() {$/;"	f	class:ProtoMol::STSIntegrator
calculateForces	framework/integrators/StandardIntegrator.cpp	/^  void StandardIntegrator::calculateForces(){$/;"	f	class:ProtoMol::StandardIntegrator
calculateMOLLYForcesBonded	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  void BSplineMOLLYIntegrator::calculateMOLLYForcesBonded() {$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
calculateMOLLYForcesHBonded	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  void BSplineMOLLYIntegrator::calculateMOLLYForcesHBonded() {$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
capacity	framework/base/Vector3DBlock.h	/^    size_type capacity() const                                   {return vec.capacity();}            $/;"	f	class:ProtoMol::Vector3DBlock
cellListNext	framework/base/Atom.h	/^    mutable int cellListNext;$/;"	m	struct:ProtoMol::Atom
cellLists	framework/topology/Topology.h	/^    mutable typename CellManager::CellListStructure cellLists;$/;"	m	class:ProtoMol::Topology
cellManager	framework/topology/Topology.h	/^    CellManager cellManager;$/;"	m	class:ProtoMol::Topology
centerOfMass	framework/frontend/OutputCache.cpp	/^  Vector3D OutputCache::centerOfMass() const{$/;"	f	class:ProtoMol::OutputCache
centerOfMass	framework/topology/topologyutilities.cpp	/^  Vector3D centerOfMass(const Vector3DBlock *positions, $/;"	f	namespace:ProtoMol
cerr	framework/base/Report.cpp	/^    MyStreamer report(&(std::cerr));$/;"	v
chainID	framework/base/PDB.h	/^      std::string chainID;	   \/\/\/< chain_id	   $/;"	m	struct:ProtoMol::PDB::Atom
chainID	framework/base/PDB.h	/^      std::string chainID;	   \/\/\/< chain_id	   $/;"	m	struct:ProtoMol::PDB::Ter
changeDirectory	framework/base/systemutilities.cpp	/^  bool changeDirectory(const string& fileName){$/;"	f	namespace:ProtoMol
char_type	framework/base/sstream_local.h	/^    typedef char        char_type;$/;"	t	class:std::stringbuf
charge	framework/base/AtomType.h	/^    Real charge;            \/\/\/< The charge of this atom type.$/;"	m	struct:ProtoMol::AtomType
charge	framework/base/PDB.h	/^      std::string charge;	   \/\/\/< charge		   $/;"	m	struct:ProtoMol::PDB::Atom
charge	framework/base/PSF.h	/^      Real charge;              \/\/\/< charge [e]$/;"	m	struct:ProtoMol::PSF::Atom
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::Empty&,         const RepType& v){return (v.empty());}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::Negative&,      RepType v){return (v < 0);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::Negative&,      RepType v){return (v < 0.0);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::Negative&,      const RepType& v){for(unsigned int i=0;i<v.size();i++) if(v[i] >= 0.0) return false; return true;}$/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NoConstraints&, RepType  ){return true;}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NoConstraints&, RepType){return true;}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NoConstraints&, const RepType&  ){return true;}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NotEmpty&,      const RepType& v){return (v != "");}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NotEmpty&,      const RepType& v){return (v.size()  > 0);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NotNegative&,   RepType v){return (v >= 0);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NotNegative&,   RepType v){return (v >= 0.0);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NotNegative&,   const RepType& v){for(unsigned int i=0;i<v.size();i++) if(v[i] <  0.0) return false; return true;}$/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NotPositive&,   RepType v){return (v <= 0);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NotPositive&,   RepType v){return (v <= 0.0);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NotPositive&,   const RepType& v){for(unsigned int i=0;i<v.size();i++) if(v[i] >  0.0) return false; return true;}$/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NotZero&,       RepType v){return (0U != v);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NotZero&,       RepType v){return (v != 0);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NotZero&,       RepType v){return (v != 0.0);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NotZero&,       const RepType& v){for(unsigned int i=0;i<v.size();i++) if(v[i] == 0.0) return false; return true;}$/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::NotZero&,       const RepType& v){return (v.normSquared() != 0);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::Positive&,      RepType v){return (v > 0);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::Positive&,      RepType v){return (v > 0.0);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::Positive&,      RepType v){return (v > 0U);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::Positive&,      const RepType& v){for(unsigned int i=0;i<v.size();i++) if(v[i] <= 0.0) return false; return true;}$/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::Zero&,          RepType v){return (0U == v);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::Zero&,          RepType v){return (v  == 0);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::Zero&,          RepType v){return (v  == 0.0);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::Zero&,          const RepType& v){for(unsigned int i=0;i<v.size();i++) if(v[i] != 0.0) return false; return true;}$/;"	f	struct:ProtoMol::ValueTraits
check	framework/base/ValueType.h	/^    static bool check(const ConstraintValueType::Zero&,          const RepType& v){return (v.normSquared() == 0);}    $/;"	f	struct:ProtoMol::ValueTraits
check	framework/forces/oneAtomContraints.h	/^    static bool check(const GenericTopology* topo, int i, int j){return (!equal(topo->atoms[i].scaledMass,topo->atoms[j].scaledMass));}$/;"	f	struct:ProtoMol::HBondConstraint
check	framework/forces/oneAtomContraints.h	/^    static bool check(const GenericTopology* topo, int i, int j){return (topo->atoms[i].molecule != topo->atoms[j].molecule);}$/;"	f	struct:ProtoMol::NotSameMoleculeConstraint
check	framework/forces/oneAtomContraints.h	/^    static bool check(const GenericTopology* topo, int i, int j){return (topo->atoms[i].molecule == topo->atoms[j].molecule);}$/;"	f	struct:ProtoMol::SameMoleculeConstraint
check	framework/forces/oneAtomContraints.h	/^    static bool check(const GenericTopology*, int i, int j){$/;"	f	struct:ProtoMol::DebugPreConstraint
check	framework/forces/oneAtomContraints.h	/^    static bool check(const GenericTopology*, int){return true;}$/;"	f	struct:ProtoMol::DebugPostConstraint
check	framework/forces/oneAtomContraints.h	/^    static bool check(const GenericTopology*, int){return true;}$/;"	f	struct:ProtoMol::DebugPreConstraint
check	framework/forces/oneAtomContraints.h	/^    static bool check(const GenericTopology*, int){return true;}$/;"	f	struct:ProtoMol::NoConstraint
check	framework/forces/oneAtomContraints.h	/^    static bool check(const GenericTopology*, int, int){return true;}$/;"	f	struct:ProtoMol::DebugPostConstraint
check	framework/forces/oneAtomContraints.h	/^    static bool check(const GenericTopology*, int, int){return true;}$/;"	f	struct:ProtoMol::NoConstraint
check	framework/forces/oneAtomContraints.h	/^    static void check(const GenericTopology*, int i, int j, const Vector3D& diff, Real energy, const Vector3D& force){$/;"	f	struct:ProtoMol::DebugPostConstraint
check	framework/forces/oneAtomContraints.h	/^    static void check(const GenericTopology*, int, int, const Vector3D&, Real, const Vector3D&){}$/;"	f	struct:ProtoMol::DebugPreConstraint
check	framework/forces/oneAtomContraints.h	/^    static void check(const GenericTopology*, int, int, const Vector3D&, Real, const Vector3D&){}$/;"	f	struct:ProtoMol::HBondConstraint
check	framework/forces/oneAtomContraints.h	/^    static void check(const GenericTopology*, int, int, const Vector3D&, Real, const Vector3D&){}$/;"	f	struct:ProtoMol::NoConstraint
check	framework/forces/oneAtomContraints.h	/^    static void check(const GenericTopology*, int, int, const Vector3D&, Real, const Vector3D&){}$/;"	f	struct:ProtoMol::NotSameMoleculeConstraint
check	framework/forces/oneAtomContraints.h	/^    static void check(const GenericTopology*, int, int, const Vector3D&, Real, const Vector3D&){}$/;"	f	struct:ProtoMol::SameMoleculeConstraint
check	framework/topology/ExclusionTable.h	/^  inline  ExclusionClass ExclusionTable::check(int atom1, int atom2) const {$/;"	f	class:ProtoMol::ExclusionTable
checkBoundaries	framework/topology/ArrayCellListStructure.h	/^    bool checkBoundaries(const T1& t1) const{$/;"	f	class:ProtoMol::ArrayCellListStructure
checkMoleculePairDistances	framework/topology/SemiGenericTopology.h	/^    virtual bool checkMoleculePairDistances(const Vector3DBlock& positions) const{$/;"	f	class:ProtoMol::SemiGenericTopology
checkParameterTypes	framework/base/Makeable.cpp	/^  bool Makeable::checkParameterTypes(const vector<Value>& values) const{$/;"	f	class:ProtoMol::Makeable
checkParameters	framework/base/Makeable.cpp	/^  bool Makeable::checkParameters(const vector<Value>& values) const{$/;"	f	class:ProtoMol::Makeable
checkParameters	framework/base/Makeable.cpp	/^  bool Makeable::checkParameters(string& errMsg, const vector<Value>& values) const{$/;"	f	class:ProtoMol::Makeable
checkReallyFast	framework/topology/ExclusionTable.h	/^  inline  bool ExclusionTable::checkReallyFast(int atom1, int atom2) const {$/;"	f	class:ProtoMol::ExclusionTable
clear	compilerTests/pngTest.cpp	/^void PPM::clear(){$/;"	f	class:PPM
clear	framework/base/Array_NoPartialSpecialization.h	/^    void clear()$/;"	f	class:ProtoMol::Array
clear	framework/base/Grid.h	/^  void Grid<TInterpolation>::clear(){$/;"	f	class:ProtoMol::Grid
clear	framework/base/MultiGrid.h	/^  inline void MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::clear(){$/;"	f	class:ProtoMol::MultiGrid
clear	framework/base/PAR.cpp	/^  void PAR::clear(){$/;"	f	class:ProtoMol::PAR
clear	framework/base/PDB.cpp	/^  void PDB::clear(){$/;"	f	class:ProtoMol::PDB
clear	framework/base/PGM.cpp	/^  void PGM::clear(){$/;"	f	class:ProtoMol::PGM
clear	framework/base/PPM.cpp	/^  void PPM::clear(){$/;"	f	class:ProtoMol::PPM
clear	framework/base/PSF.cpp	/^  void PSF::clear(){$/;"	f	class:ProtoMol::PSF
clear	framework/base/ReducedHessAngle.cpp	/^  void ReducedHessAngle::clear()$/;"	f	class:ProtoMol::ReducedHessAngle
clear	framework/base/ScalarStructure.cpp	/^  void ScalarStructure::clear() {$/;"	f	class:ProtoMol::ScalarStructure
clear	framework/base/Value.h	/^      virtual bool clear() { bool tmp = ok; ok = false; return tmp;}$/;"	f	class:ProtoMol::Value::Holder
clear	framework/base/Value.h	/^  inline bool Value::clear()  {$/;"	f	class:ProtoMol::Value
clear	framework/base/Vector3DBlock.h	/^    void clear()                                                 {       vec.clear();}       $/;"	f	class:ProtoMol::Vector3DBlock
clear	framework/base/XSC.cpp	/^  void XSC::clear(){$/;"	f	class:ProtoMol::XSC
clear	framework/base/XYZ.cpp	/^  void XYZ::clear(){$/;"	f	class:ProtoMol::XYZ
clear	framework/base/mathutilities.h	/^  inline void WindowAve::clear() { while( !data.empty() ) data.pop(); }$/;"	f	class:ProtoMol::WindowAve
clear	framework/frontend/Factory.h	/^    void clear(){$/;"	f	class:ProtoMol::FactoryBase
clear	framework/topology/ExclusionTable.cpp	/^  void ExclusionTable::clear(void) {$/;"	f	class:ProtoMol::ExclusionTable
clearCache	framework/frontend/OutputFile.cpp	/^  void OutputFile::clearCache() {$/;"	f	class:ProtoMol::OutputFile
client_alive	framework/imd/IMDElf.cpp	/^  bool IMDElf::client_alive() {$/;"	f	class:ProtoMol::IMDElf
clientsock	framework/imd/IMDElf.h	/^    void *clientsock;$/;"	m	class:ProtoMol::IMDElf
clone	framework/base/Value.h	/^      virtual PlaceHolder* clone() const { return new Holder(*this);}$/;"	f	class:ProtoMol::Value::Holder
close	framework/frontend/OutputFile.cpp	/^  bool OutputFile::close(){$/;"	f	class:ProtoMol::OutputFile
close	framework/io/File.cpp	/^  void File::close(){$/;"	f	class:ProtoMol::File
coarseToFine	framework/base/MultiGrid.h	/^    void coarseToFine(int level){coarseToFine(level,0,1);}$/;"	f	class:ProtoMol::MultiGrid
coarseToFine	framework/base/MultiGrid.h	/^  inline void MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::coarseToFine(int level, unsigned int block, unsigned int nBlocks){$/;"	f	class:ProtoMol::MultiGrid
coeffs	framework/integrators/ModifierShadow.h	/^            std::vector< Real > coeffs;$/;"	m	class:ProtoMol::ModifierShadow
cohesive	framework/forces/PaulTrapExtendedForce.h	/^    Real cohesive(Real potentialEnergy){return (potentialEnergy-myPaulUHom)*myPaulF;}$/;"	f	class:ProtoMol::PaulTrapExtendedForce
commX	framework/parallel/Parallel-FD.cpp	/^  MPI_Comm  commX  = MPI_COMM_NULL;$/;"	v
commY	framework/parallel/Parallel-FD.cpp	/^  MPI_Comm  commY  = MPI_COMM_NULL;$/;"	v
computeMolecularPressure	framework/topology/topologyutilities.cpp	/^  Real computeMolecularPressure(const ScalarStructure* energies, $/;"	f	namespace:ProtoMol
computeOthers	framework/forces/HarmDihedralSystemForce.h	/^    bool computeOthers;$/;"	m	class:ProtoMol::HarmDihedralSystemForce
computePhiDihedral	framework/topology/topologyutilities.cpp	/^  Real computePhiDihedral(const GenericTopology *topo, const Vector3DBlock *positions, int index){$/;"	f	namespace:ProtoMol
computePhiDihedralEnergy	framework/topology/topologyutilities.cpp	/^  Real computePhiDihedralEnergy(const GenericTopology *topo, int index, Real phi){$/;"	f	namespace:ProtoMol
computePressure	framework/topology/topologyutilities.cpp	/^  Real computePressure(const GenericTopology* topology,$/;"	f	namespace:ProtoMol
computePressure	framework/topology/topologyutilities.cpp	/^  Real computePressure(const ScalarStructure* energies, $/;"	f	namespace:ProtoMol
confstrings	framework/frontend/OutputDihedrals.h	/^    std::vector< std::string > confstrings;$/;"	m	class:ProtoMol::OutputDihedrals
confstringsCounter	framework/frontend/OutputDihedrals.h	/^    std::vector< int > confstringsCounter;$/;"	m	class:ProtoMol::OutputDihedrals
connect	framework/imd/IMDElf.cpp	/^  int IMDElf::connect(void *s) {$/;"	f	class:ProtoMol::IMDElf
const0	framework/base/fft.c	/^static  int const0 = 0;$/;"	v	file:
const1	framework/base/fft.c	/^static  int const1 = 1;$/;"	v	file:
const16384	framework/base/fft.c	/^static  int const16384 = 16384;$/;"	v	file:
constFalse	framework/base/fft.c	/^static  int constFalse = 0;$/;"	v	file:
constTrue	framework/base/fft.c	/^static  int constTrue = 1;$/;"	v	file:
const_iterator	framework/base/Array_Fastest.h	/^    typedef const T * const_iterator;$/;"	t	class:ProtoMol::Array
const_iterator	framework/base/Array_Fastest.h	/^    typedef const T * const_iterator;$/;"	t	class:ProtoMol::RefArray
const_iterator	framework/base/Array_NoPartialSpecialization.h	/^      typedef const T * const_iterator;$/;"	t	class:ProtoMol::Array::RefArray
const_iterator	framework/base/Array_NoPartialSpecialization.h	/^    typedef const T * const_iterator;$/;"	t	class:ProtoMol::Array
const_iterator	framework/base/Configuration.h	/^    typedef ValueMapType::const_iterator                  const_iterator;$/;"	t	class:ProtoMol::Configuration
const_iterator	framework/base/Vector3DBlock.h	/^    typedef std::vector<Vector3D>::const_iterator            const_iterator;                             $/;"	t	class:ProtoMol::Vector3DBlock
const_iterator	framework/frontend/Factory.h	/^    typedef typename std::set<const Type*>::const_iterator                  const_iterator;$/;"	t	class:ProtoMol::Factory
const_iterator	framework/frontend/HelpTextFactory.h	/^    typedef HelpTextMapType::const_iterator  const_iterator;$/;"	t	class:ProtoMol::HelpTextFactory
const_iterator	framework/frontend/OutputCollection.h	/^    typedef std::list<Output*>::const_iterator const_iterator;$/;"	t	class:ProtoMol::OutputCollection
const_iterator	framework/topology/ArrayCellListStructure.h	/^    typedef TContainer::const_iterator    const_iterator;$/;"	t	class:ProtoMol::ArrayCellListStructure
const_pointer	framework/base/Array_Fastest.h	/^    typedef const T * const_pointer;$/;"	t	class:ProtoMol::Array
const_pointer	framework/base/Array_Fastest.h	/^    typedef const T * const_pointer;$/;"	t	class:ProtoMol::RefArray
const_pointer	framework/base/Array_NoPartialSpecialization.h	/^      typedef const T * const_pointer;$/;"	t	class:ProtoMol::Array::RefArray
const_pointer	framework/base/Array_NoPartialSpecialization.h	/^    typedef const T * const_pointer;$/;"	t	class:ProtoMol::Array
const_pointer	framework/topology/ArrayCellListStructure.h	/^    typedef TContainer::const_pointer     const_pointer;$/;"	t	class:ProtoMol::ArrayCellListStructure
const_reference	framework/base/Array_Fastest.h	/^    typedef const T & const_reference;$/;"	t	class:ProtoMol::Array
const_reference	framework/base/Array_Fastest.h	/^    typedef const T & const_reference;$/;"	t	class:ProtoMol::RefArray
const_reference	framework/base/Array_NoPartialSpecialization.h	/^      typedef const T & const_reference;$/;"	t	class:ProtoMol::Array::RefArray
const_reference	framework/base/Array_NoPartialSpecialization.h	/^    typedef const T & const_reference;$/;"	t	class:ProtoMol::Array
const_reference	framework/base/Vector3DBlock.h	/^    typedef std::vector<Vector3D>::const_reference           const_reference;                            $/;"	t	class:ProtoMol::Vector3DBlock
const_reference	framework/topology/ArrayCellListStructure.h	/^    typedef TContainer::const_reference   const_reference;$/;"	t	class:ProtoMol::ArrayCellListStructure
const_reverse_iterator	framework/base/Vector3DBlock.h	/^    typedef std::vector<Vector3D>::const_reverse_iterator    const_reverse_iterator;                     $/;"	t	class:ProtoMol::Vector3DBlock
convert	framework/base/Matrix3by3.cpp	/^  void convert(const Matrix3by3& from, double to[16])$/;"	f	namespace:ProtoMol
convert	framework/base/Matrix3by3.cpp	/^  void convert(const Matrix3by3& from, float to[9])$/;"	f	namespace:ProtoMol
convert	framework/base/ValueType.h	/^    static bool convert(Real v, RepType& r)               { r = (v != 0.0); return true;}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(Real v, RepType& r){ $/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(RepType v,           RepType& r){ r=v; return true;}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(RepType v,       RepType& r){ r=v; return true;}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(RepType v, RepType& r)            { r=v; return true;}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(RepType v, RepType& r)            {r=v; return true;}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(RepType v, RepType& r)           { r=v; return true;}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(bool v, RepType& r)               { r = (v?1:0); return true; }$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(bool v, RepType& r)               {r = (v ? 1.0 : 0.0); return true;}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(bool v, RepType& r)              { r = (v?1:0); return true;}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(int v, RepType& r)                { r = (v != 0); return true;}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(int v, RepType& r)                {r = static_cast<Real>(v); return true;}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(int v, RepType& r){ $/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(std::string v,        RepType& r) { return toInt(v,r);}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(std::string v,        RepType& r) {return toBool(v,r);}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(std::string v,        RepType& r) {return toReal(v,r);}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(std::string v,        RepType& r){ return toUInt(v,r);}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(std::string v,        RepType& r){ return toVector(v,r);}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(std::string v,        RepType& r){ return toVector3D(v,r);}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(unsigned int v, RepType& r)       { r = (v != 0); return true;}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(unsigned int v, RepType& r)       {r = static_cast<Real>(v); return true;}$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    static bool convert(unsigned int v, RepType& r){ $/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    template<typename T> static RepType convert(T v)            {RepType tmp; convert(v,tmp);return tmp;} $/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    template<typename T> static RepType convert(T v)        {RepType tmp; convert(v,tmp);return tmp;} $/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    template<typename T> static bool    convert(T v, RepType& r){r = toString(v); return true;} \/\/ !NB everything is ok$/;"	f	struct:ProtoMol::ValueTraits
convert	framework/base/ValueType.h	/^    template<typename T> static bool    convert(T, RepType&){return false;} $/;"	f	struct:ProtoMol::ValueTraits
convertFromJacobian	framework/base/ReducedHessAngle.cpp	/^  void ReducedHessAngle::convertFromJacobian(Real **jac,int n)$/;"	f	class:ProtoMol::ReducedHessAngle
convertTest	framework/base/ValueType.h	/^    template<typename T> static bool    convertTest(T v)        {RepType tmp; return convert(v,tmp);} $/;"	f	struct:ProtoMol::ValueTraits
convertTest	framework/base/ValueType.h	/^    template<typename T> static bool    convertTest(T v)    {RepType tmp; return convert(v,tmp);} $/;"	f	struct:ProtoMol::ValueTraits
coords	framework/base/PDB.h	/^    Vector3DBlock coords;$/;"	m	struct:ProtoMol::PDB
coords	framework/base/XYZ.h	/^    Vector3DBlock coords;$/;"	m	struct:ProtoMol::XYZ
copy	framework/base/Array_Fastest.h	/^    void copy(const Array<T,N> & A, const T & Init=T())$/;"	f	class:ProtoMol::Array
copy	framework/base/Array_Fastest.h	/^    void copy(const RefArray<T,1> & SA, const T & Init=T())$/;"	f	class:ProtoMol::RefArray
copy	framework/base/Array_Fastest.h	/^    void copy(const RefArray<T,N> & SA, const T & Init=T())$/;"	f	class:ProtoMol::RefArray
copy	framework/base/Array_NoPartialSpecialization.h	/^      void copy(const RefArray<1> & SA, const T & Init=T())$/;"	f	class:ProtoMol::Array::RefArray
copy	framework/base/Array_NoPartialSpecialization.h	/^      void copy(const RefArray<N> & SA, const T & Init=T())$/;"	f	class:ProtoMol::Array::RefArray
copy	framework/base/Array_NoPartialSpecialization.h	/^    void copy(const Array<T,N> & A, const T & Init=T())$/;"	f	class:ProtoMol::Array
copy	framework/base/Makeable.h	/^    static T* copy(T* obj){$/;"	f	class:ProtoMol::Makeable
correction	framework/base/MultiGrid.h	/^    void correction(int level){correction(level,0,1);};$/;"	f	class:ProtoMol::MultiGrid
correction	framework/base/MultiGrid.h	/^  inline void MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::correction(int level, unsigned int block, unsigned int nBlocks){$/;"	f	class:ProtoMol::MultiGrid
correctionTerm	framework/forces/NonbondedFullEwaldSystemForce.h	/^				     TSwitchingFunction>::correctionTerm(const RealTopologyType* realTopo,$/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
correctionTerm	framework/forces/NonbondedMultiGridSystemForce.h	/^				     smooth>::correctionTerm(const RealTopologyType* realTopo,$/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
correctionTerm	framework/forces/NonbondedPMEwaldSystemForce.h	/^				   TSwitchingFunction>::correctionTerm(const RealTopologyType* realTopo,$/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
coulombScalingFactor	framework/topology/GenericTopology.h	/^    Real coulombScalingFactor;$/;"	m	class:ProtoMol::GenericTopology
createRattleModifier	framework/integrators/Integrator.cpp	/^  Modifier* Integrator::createRattleModifier(Real eps, int maxIter){$/;"	f	class:ProtoMol::Integrator
createRattleModifier	framework/integrators/NPTVerletIntegrator.cpp	/^  Modifier* NPTVerletIntegrator::createRattleModifier(Real eps, int maxIter){$/;"	f	class:ProtoMol::NPTVerletIntegrator
createRattleModifier	framework/integrators/NVTVerletIntegrator.cpp	/^  Modifier* NVTVerletIntegrator::createRattleModifier(Real eps, int maxIter){$/;"	f	class:ProtoMol::NVTVerletIntegrator
createShadowModifier	framework/integrators/Integrator.cpp	/^  Modifier * Integrator::createShadowModifier( int order2k, int freq ) {$/;"	f	class:ProtoMol::Integrator
createShakeModifier	framework/integrators/Integrator.cpp	/^  Modifier*  Integrator::createShakeModifier(Real eps, int maxIter){$/;"	f	class:ProtoMol::Integrator
createShakeModifier	framework/integrators/NPTVerletIntegrator.cpp	/^  Modifier* NPTVerletIntegrator::createShakeModifier(Real eps, int maxIter){$/;"	f	class:ProtoMol::NPTVerletIntegrator
createShakeModifier	framework/integrators/NVTVerletIntegrator.cpp	/^  Modifier* NVTVerletIntegrator::createShakeModifier(Real eps, int maxIter){$/;"	f	class:ProtoMol::NVTVerletIntegrator
createTables	framework/topology/BankLennardJonesParameterTable.h	/^    void createTables( unsigned int numComp, unsigned int tableSize ) {$/;"	f	struct:ProtoMol::BankLennardJonesParameterTable
cross	framework/base/Vector3D.h	/^    Vector3D cross(const Vector3D& b) const  {return (*this)^b;}$/;"	f	struct:ProtoMol::Vector3D
cutoff	framework/forces/oneAtomContraints.h	/^    static Real cutoff(const TS& swf, const TF&){return swf.cutoffSquared();}$/;"	f	struct:ProtoMol::Cutoff
cutoff	framework/forces/oneAtomContraints.h	/^    static Real cutoff(const TS&, const TF& nf){return nf.cutoffSquared();}$/;"	f	struct:ProtoMol::Cutoff
cutoff	framework/topology/C1SwitchingFunction.h	/^    Real cutoff() const{return myCutoff;}$/;"	f	class:ProtoMol::C1SwitchingFunction
cutoff	framework/topology/C2SwitchingFunction.h	/^    Real cutoff() const{return myCutoff;}$/;"	f	class:ProtoMol::C2SwitchingFunction
cutoff	framework/topology/CmpCnCnSwitchingFunction.h	/^    Real cutoff() const{return myCutoff;}$/;"	f	class:ProtoMol::CmpCnCnSwitchingFunction
cutoff	framework/topology/CnSwitchingFunction.h	/^    Real cutoff() const{return myCutoff;}$/;"	f	class:ProtoMol::CnSwitchingFunction
cutoff	framework/topology/ComplementSwitchingFunction.h	/^    Real cutoff() const{return Constant::MAXREAL;}$/;"	f	class:ProtoMol::ComplementSwitchingFunction
cutoff	framework/topology/CutoffSwitchingFunction.h	/^    Real cutoff() const{return myCutoff;}$/;"	f	class:ProtoMol::CutoffSwitchingFunction
cutoff	framework/topology/RangeSwitchingFunction.h	/^    Real cutoff() const{return std::max(myR1,myOrigFunc.cutoff());}$/;"	f	class:ProtoMol::RangeSwitchingFunction
cutoff	framework/topology/ShiftSwitchingFunction.h	/^    Real cutoff() const{return myCutoff;}$/;"	f	class:ProtoMol::ShiftSwitchingFunction
cutoff	framework/topology/UniversalSwitchingFunction.h	/^    Real cutoff() const{return Constant::MAXREAL;}$/;"	f	class:ProtoMol::UniversalSwitchingFunction
cutoffSquared	framework/forces/CoulombEwaldRealTableForce.h	/^    Real cutoffSquared() const{return myCutoff2;}$/;"	f	class:ProtoMol::CoulombEwaldRealTableForce
cutoffSquared	framework/forces/CoulombMultiGridDirectTableForce.h	/^    Real cutoffSquared() const{return myCutoff2;}$/;"	f	class:ProtoMol::CoulombMultiGridDirectTableForce
cutoffSquared	framework/forces/CoulombTableForce.h	/^    Real cutoffSquared() const{return myCutoff2;}$/;"	f	class:ProtoMol::CoulombTableForce
cutoffSquared	framework/forces/LennardJonesTableForce.h	/^    Real cutoffSquared() const{return myCutoff2;}$/;"	f	class:ProtoMol::LennardJonesTableForce
cutoffSquared	framework/topology/C1SwitchingFunction.h	/^    Real cutoffSquared() const{return myCutoff2;}$/;"	f	class:ProtoMol::C1SwitchingFunction
cutoffSquared	framework/topology/C2SwitchingFunction.h	/^    Real cutoffSquared() const{return myCutoff2;}$/;"	f	class:ProtoMol::C2SwitchingFunction
cutoffSquared	framework/topology/CmpCnCnSwitchingFunction.h	/^    Real cutoffSquared() const{return myCutoff2;}$/;"	f	class:ProtoMol::CmpCnCnSwitchingFunction
cutoffSquared	framework/topology/CnSwitchingFunction.h	/^    Real cutoffSquared() const{return myCutoff2;}$/;"	f	class:ProtoMol::CnSwitchingFunction
cutoffSquared	framework/topology/ComplementSwitchingFunction.h	/^    Real cutoffSquared() const{return Constant::MAXREAL;}$/;"	f	class:ProtoMol::ComplementSwitchingFunction
cutoffSquared	framework/topology/CutoffSwitchingFunction.h	/^    Real cutoffSquared() const{return myCutoff2;}$/;"	f	class:ProtoMol::CutoffSwitchingFunction
cutoffSquared	framework/topology/RangeSwitchingFunction.h	/^    Real cutoffSquared() const{return std::max(myR1Squared,myOrigFunc.cutoffSquared());}$/;"	f	class:ProtoMol::RangeSwitchingFunction
cutoffSquared	framework/topology/ShiftSwitchingFunction.h	/^    Real cutoffSquared() const{return myCutoff2;}$/;"	f	class:ProtoMol::ShiftSwitchingFunction
cutoffSquared	framework/topology/UniversalSwitchingFunction.h	/^    Real cutoffSquared() const{return Constant::MAXREAL;}$/;"	f	class:ProtoMol::UniversalSwitchingFunction
d2swcoef	framework/topology/CnSwitchingFunction.cpp	/^    Real  CnSwitchingFunction::d2swcoef[][MAXEQNN] = {$/;"	m	class:ProtoMol::CnSwitchingFunction	file:
d2swcoef	framework/topology/CnSwitchingFunction.h	/^                d2swcoef[][MAXEQNN];$/;"	m	class:ProtoMol::CnSwitchingFunction
dKernel	framework/forces/CoulombForce.h	/^      static Real dKernel(Real r)                     {r=1.0\/r;return (-r*r);}$/;"	f	class:ProtoMol::CoulombForce::C1
dKernel	framework/forces/CoulombForce.h	/^      static Real dKernel(Real r)                     {r=1.0\/r;return (-r*r);}$/;"	f	class:ProtoMol::CoulombForce::C2
dKernel	framework/forces/CoulombForce.h	/^      static Real dKernel(Real r)                     {r=1.0\/r;return (-r*r);}$/;"	f	class:ProtoMol::CoulombForce::C3
dKernel	framework/forces/CoulombForce.h	/^      static Real dKernel(Real r)                     {r=1.0\/r;return (-r*r);}$/;"	f	class:ProtoMol::CoulombForce::C4
dKernelR	framework/forces/CoulombForce.h	/^      static Real dKernelR(Real rr)                   {return (-rr*rr);}$/;"	f	class:ProtoMol::CoulombForce::C1
dKernelR	framework/forces/CoulombForce.h	/^      static Real dKernelR(Real rr)                   {return (-rr*rr);}$/;"	f	class:ProtoMol::CoulombForce::C2
dKernelR	framework/forces/CoulombForce.h	/^      static Real dKernelR(Real rr)                   {return (-rr*rr);}$/;"	f	class:ProtoMol::CoulombForce::C3
dKernelR	framework/forces/CoulombForce.h	/^      static Real dKernelR(Real rr)                   {return (-rr*rr);}$/;"	f	class:ProtoMol::CoulombForce::C4
dSmooth	framework/forces/CoulombForce.h	/^      static Real dSmooth(Real r,Real \/*c*\/,Real cr)      {return (-r*cr*cr*cr);}$/;"	f	class:ProtoMol::CoulombForce::C1
dSmooth	framework/forces/CoulombForce.h	/^      static Real dSmooth(Real r,Real c,Real cr)      {c=r*cr*cr;return (cr*c*(1.5*r*c-2.5));}$/;"	f	class:ProtoMol::CoulombForce::C2
dSmooth	framework/forces/CoulombForce.h	/^      static Real dSmooth(Real r,Real c,Real cr)      {c=r*r*cr*cr;return (r*cr*cr*cr*(-4.375 + c * (5.25 - 1.875 * c)));}$/;"	f	class:ProtoMol::CoulombForce::C3
dSmooth	framework/forces/CoulombForce.h	/^      static Real dSmooth(Real r,Real c,Real cr)      {c=r*r*cr*cr;return(-r*cr*cr*cr*(6.5625-c*(11.8125-c*(8.4375-c*2.1875))));$/;"	f	class:ProtoMol::CoulombForce::C4
dSmoothKernel	framework/forces/CoulombForce.h	/^      static Real dSmoothKernel(Real r,Real c,Real cr){return (r<c ? dSmooth(r,c,cr) : dKernel(r));}$/;"	f	class:ProtoMol::CoulombForce::C1
dSmoothKernel	framework/forces/CoulombForce.h	/^      static Real dSmoothKernel(Real r,Real c,Real cr){return (r<c ? dSmooth(r,c,cr) : dKernel(r));}$/;"	f	class:ProtoMol::CoulombForce::C2
dSmoothKernel	framework/forces/CoulombForce.h	/^      static Real dSmoothKernel(Real r,Real c,Real cr){return (r<c ? dSmooth(r,c,cr) : dKernel(r));}$/;"	f	class:ProtoMol::CoulombForce::C3
dSmoothKernel	framework/forces/CoulombForce.h	/^      static Real dSmoothKernel(Real r,Real c,Real cr){return (r<c ? dSmooth(r,c,cr) : dKernel(r));}$/;"	f	class:ProtoMol::CoulombForce::C4
dTheta	framework/base/BSpline.h	/^    Real* dTheta;\/\/\/< derivatives of Bk$/;"	m	class:ProtoMol::BSpline
dTheta	framework/base/Hermite.h	/^    Real* dTheta;$/;"	m	class:ProtoMol::Hermite
dTheta	framework/base/Lagrange.h	/^    Real* dTheta; \/\/\/< derivatives of lk$/;"	m	class:ProtoMol::Lagrange
data	framework/base/mathutilities.h	/^    std::queue< Real > data;$/;"	m	class:ProtoMol::WindowAve
datatype	framework/parallel/Parallel-FD.cpp	/^    static const MPI_Datatype datatype;$/;"	m	struct:ProtoMol::MPITypeTraits	file:
datatype	framework/parallel/Parallel-FD.cpp	/^  const MPI_Datatype MPITypeTraits<Real>::datatype = MY_MPI_REAL;  $/;"	m	class:ProtoMol::MPITypeTraits	file:
datatype	framework/parallel/Parallel-FD.cpp	/^  const MPI_Datatype MPITypeTraits<int>::datatype = MPI_INT;  $/;"	m	class:ProtoMol::MPITypeTraits	file:
datatype	framework/parallel/Parallel.cpp	/^    static const MPI_Datatype datatype;$/;"	m	struct:ProtoMol::MPITypeTraits	file:
datatype	framework/parallel/Parallel.cpp	/^  const MPI_Datatype MPITypeTraits<Real>::datatype = MY_MPI_REAL;  $/;"	m	class:ProtoMol::MPITypeTraits	file:
datatype	framework/parallel/Parallel.cpp	/^  const MPI_Datatype MPITypeTraits<int>::datatype = MPI_INT;  $/;"	m	class:ProtoMol::MPITypeTraits	file:
debug	framework/base/Report.h	/^      debug() : myLevel(1) {}$/;"	f	class:ProtoMol::Report::debug
debug	framework/base/Report.h	/^      debug(short l) : myLevel(l) {}$/;"	f	class:ProtoMol::Report::debug
debug	framework/base/Report.h	/^    class debug{$/;"	c	namespace:ProtoMol::Report
debug	framework/base/Value.cpp	/^  string Value::debug() const {$/;"	f	class:ProtoMol::Value
declareInputValue	framework/frontend/InputValue.h	150;"	d
defaultBlockSize	framework/forces/NonbondedFullSystemForceBase.cpp	/^  const unsigned int NonbondedFullSystemForceBase::defaultBlockSize = 64;$/;"	m	class:ProtoMol::NonbondedFullSystemForceBase	file:
defaultBlockSize	framework/forces/NonbondedFullSystemForceBase.h	/^    static const unsigned int defaultBlockSize;$/;"	m	class:ProtoMol::NonbondedFullSystemForceBase
defaultBlockSize	framework/forces/NonbondedSimpleFullSystemForceBase.cpp	/^  const unsigned int NonbondedSimpleFullSystemForceBase::defaultBlockSize = 64;$/;"	m	class:ProtoMol::NonbondedSimpleFullSystemForceBase	file:
defaultBlockSize	framework/forces/NonbondedSimpleFullSystemForceBase.h	/^    static const unsigned int defaultBlockSize;$/;"	m	class:ProtoMol::NonbondedSimpleFullSystemForceBase
defaultCharmmType	framework/io/PARWriter.cpp	/^  const PAR::CharmmTypeEnum PARWriter::defaultCharmmType=PAR::CHARMM28;$/;"	m	class:ProtoMol::PARWriter	file:
defaultCharmmType	framework/io/PARWriter.h	/^    static const PAR::CharmmTypeEnum defaultCharmmType;$/;"	m	class:ProtoMol::PARWriter
defaultScale	framework/io/XFigWriter.cpp	/^  static const Real defaultScale = 1000.0;$/;"	v	file:
defaultValue	framework/base/Parameter.h	/^    Value       defaultValue;$/;"	m	struct:ProtoMol::Parameter
defaultValue	framework/frontend/HelpTextFactory.h	/^    Value                  defaultValue;$/;"	m	struct:ProtoMol::HelpText
defbuf	framework/base/sstream_local.h	/^    char                        defbuf;$/;"	m	class:std::stringbuf
defineInputValue	framework/frontend/InputValue.h	159;"	d
defineInputValueAndText	framework/frontend/InputValue.h	169;"	d
defineInputValueWithAliases	framework/frontend/InputValue.h	164;"	d
defineInputValueWithAliasesAndText	framework/frontend/InputValue.h	174;"	d
defined	framework/base/Configuration.cpp	/^  bool Configuration::defined(const string& keyword) const{$/;"	f	class:ProtoMol::Configuration
defined	framework/base/Value.h	/^  inline bool Value::defined() const {$/;"	f	class:ProtoMol::Value
degreesOfFreedom	framework/topology/GenericTopology.h	/^    int degreesOfFreedom;$/;"	m	class:ProtoMol::GenericTopology
deleteExternalModifiers	framework/integrators/Integrator.cpp	/^  void Integrator::deleteExternalModifiers(){$/;"	f	class:ProtoMol::Integrator
deleteInternalModifiers	framework/integrators/Integrator.cpp	/^  void Integrator::deleteInternalModifiers(){$/;"	f	class:ProtoMol::Integrator
deleteModifier	framework/integrators/Integrator.cpp	/^  void Integrator::deleteModifier(Modifier* modifier){$/;"	f	class:ProtoMol::Integrator
deltaM	framework/base/Atom.h	/^    Real deltaM, deltaQ;$/;"	m	struct:ProtoMol::Atom
deltaMu	framework/base/ScalarStructure.h	/^  inline Real ScalarStructure::deltaMu() const {$/;"	f	class:ProtoMol::ScalarStructure
deltaQ	framework/base/Atom.h	/^    Real deltaM, deltaQ;$/;"	m	struct:ProtoMol::Atom
density	framework/frontend/OutputCache.cpp	/^  Real OutputCache::density() const{$/;"	f	class:ProtoMol::OutputCache
det	framework/base/Matrix3by3.cpp	/^  Real Matrix3by3::det()$/;"	f	class:ProtoMol::Matrix3by3
dftmod	framework/base/Grid.h	/^  void Grid<TInterpolation>::dftmod(unsigned int order, unsigned int n, Real* interpolation, Real* interpolationMod){$/;"	f	class:ProtoMol::Grid
difference_type	framework/base/Array_Fastest.h	/^    typedef ptrdiff_t difference_type;$/;"	t	class:ProtoMol::Array
difference_type	framework/base/Array_Fastest.h	/^    typedef ptrdiff_t difference_type;$/;"	t	class:ProtoMol::RefArray
difference_type	framework/base/Array_NoPartialSpecialization.h	/^      typedef ptrdiff_t difference_type;$/;"	t	class:ProtoMol::Array::RefArray
difference_type	framework/base/Array_NoPartialSpecialization.h	/^    typedef ptrdiff_t difference_type;$/;"	t	class:ProtoMol::Array
difference_type	framework/base/Vector3DBlock.h	/^    typedef std::vector<Vector3D>::difference_type           difference_type;                            $/;"	t	class:ProtoMol::Vector3DBlock
difference_type	framework/topology/ArrayCellListStructure.h	/^    typedef TContainer::difference_type   difference_type;$/;"	t	class:ProtoMol::ArrayCellListStructure
diffusion	framework/frontend/OutputCache.cpp	/^  Real OutputCache::diffusion() const{$/;"	f	class:ProtoMol::OutputCache
dihID	framework/frontend/OutputState.h	/^      int dihID;$/;"	m	struct:ProtoMol::OutputState::orderParam
dihInc	framework/frontend/OutputDihedrals.cpp	/^  std::vector< std::vector< Real > > OutputDihedrals::dihInc(std::vector<int> dihedralset) {$/;"	f	class:ProtoMol::OutputDihedrals
dihedralList	framework/base/Molecule.h	/^    std::vector<int> dihedralList;$/;"	m	struct:ProtoMol::Molecule
dihedralPhi	framework/frontend/OutputCache.cpp	/^  Real OutputCache::dihedralPhi(int index) const{$/;"	f	class:ProtoMol::OutputCache
dihedralPhis	framework/frontend/OutputCache.cpp	/^  vector<Real> OutputCache::dihedralPhis(vector<int> dihedralset) const{$/;"	f	class:ProtoMol::OutputCache
dihedrals	framework/base/PAR.h	/^    std::vector<Dihedral> dihedrals;$/;"	m	class:ProtoMol::PAR
dihedrals	framework/base/PSF.h	/^    std::vector<Dihedral> dihedrals;$/;"	m	class:ProtoMol::PSF
dihedrals	framework/topology/GenericTopology.h	/^    std::vector<Torsion>  dihedrals;$/;"	m	class:ProtoMol::GenericTopology
dim	framework/integrators/EquilibriumMOLLYIntegrator.cpp	/^					  int dim, const int (&index)[maxGDim],$/;"	v
dim	framework/integrators/EquilibriumMOLLYIntegrator.cpp	/^					  int dim, int (&index)[maxGDim],$/;"	v
dim	framework/integrators/EquilibriumMOLLYIntegrator.h	/^    void luBksb(Real (&m)[maxGDim][maxGDim], int dim, const int (&index)[maxGDim], Real (&b)[maxGDim]) const;$/;"	m	class:ProtoMol::EquilibriumMOLLYIntegrator
dim	framework/integrators/EquilibriumMOLLYIntegrator.h	/^    void luDcmp(Real (&m)[maxGDim][maxGDim], int dim, int (&index)[maxGDim], Real& d) const;$/;"	m	class:ProtoMol::EquilibriumMOLLYIntegrator
dimensions	framework/base/Array_Fastest.h	/^    size_t dimensions()  const { return 1; }$/;"	f	class:ProtoMol::RefArray
dimensions	framework/base/Array_Fastest.h	/^    size_t dimensions()  const { return N; } $/;"	f	class:ProtoMol::Array
dimensions	framework/base/Array_Fastest.h	/^    size_t dimensions()  const { return N; }$/;"	f	class:ProtoMol::RefArray
dimensions	framework/base/Array_NoPartialSpecialization.h	/^      unsigned int dimensions()  const { return 1; }$/;"	f	class:ProtoMol::Array::RefArray
dimensions	framework/base/Array_NoPartialSpecialization.h	/^      unsigned int dimensions()  const { return N; }$/;"	f	class:ProtoMol::Array::RefArray
dimensions	framework/base/Array_NoPartialSpecialization.h	/^    unsigned int dimensions()  const { return N; } $/;"	f	class:ProtoMol::Array
direct	framework/base/MultiGrid.h	/^    void direct(){direct(0,1);};$/;"	f	class:ProtoMol::MultiGrid
direct	framework/base/MultiGrid.h	/^  inline void MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::direct(unsigned int block, unsigned int nBlocks){$/;"	f	class:ProtoMol::MultiGrid
disable	framework/integrators/Modifier.h	/^    void disable() const{myEnable=false;}$/;"	f	class:ProtoMol::Modifier
display	compilerTests/glutTest.cpp	/^static void display(){$/;"	f	file:
displs	framework/parallel/Parallel-FD.cpp	/^  int*    displs     = NULL;$/;"	v
distCount	framework/base/Proxy.h	/^    int  distCount()       const {return myCount;}$/;"	f	class:ProtoMol::Proxy
distance	framework/base/PAR.h	/^      Real distance;      \/\/\/< distance$/;"	m	struct:ProtoMol::PAR::Bond
distribute	framework/base/Proxy.h	/^    void distribute()  const {myCount++;}$/;"	f	class:ProtoMol::Proxy
distribute	framework/parallel/Parallel-FD.cpp	/^  void Parallel::distribute(ScalarStructure* energies, Vector3DBlock* coords) {$/;"	f	class:ProtoMol::Parallel
distribute	framework/parallel/Parallel-FD.cpp	/^  void Parallel::distribute(ScalarStructure*, Vector3DBlock*){}$/;"	f	class:ProtoMol::Parallel
distribute	framework/parallel/Parallel.cpp	/^  void Parallel::distribute(ScalarStructure* energies, Vector3DBlock* coords) {$/;"	f	class:ProtoMol::Parallel
distribute	framework/parallel/Parallel.cpp	/^  void Parallel::distribute(ScalarStructure*, Vector3DBlock*){}$/;"	f	class:ProtoMol::Parallel
distributed	framework/base/Proxy.h	/^    bool distributed() const {return (myCount > 0);}$/;"	f	class:ProtoMol::Proxy
divide	framework/base/Vector3D.h	/^    Vector3D divide(Real w) const {return (*this)\/w;}$/;"	f	struct:ProtoMol::Vector3D
do2ndHalfKick	framework/integrators/NPTVerletIntegrator.cpp	/^  void NPTVerletIntegrator::do2ndHalfKick() {$/;"	f	class:ProtoMol::NPTVerletIntegrator
do2ndHalfKick	framework/integrators/NVTVerletIntegrator.cpp	/^  void NVTVerletIntegrator::do2ndHalfKick() {$/;"	f	class:ProtoMol::NVTVerletIntegrator
doAveragingPositions	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  Vector3DBlock* BSplineMOLLYIntegrator::doAveragingPositions() {$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
doAveragingPositions	framework/integrators/EquilibriumMOLLYIntegrator.cpp	/^  Vector3DBlock* EquilibriumMOLLYIntegrator::doAveragingPositions()$/;"	f	class:ProtoMol::EquilibriumMOLLYIntegrator
doBarrier	framework/parallel/Parallel-FD.cpp	/^  void doBarrier(){$/;"	f	namespace:ProtoMol
doBarrier	framework/parallel/Parallel.cpp	/^  void doBarrier(){$/;"	f	namespace:ProtoMol
doDrift	framework/integrators/LangevinImpulseIntegrator.cpp	/^  void LangevinImpulseIntegrator::doDrift() {$/;"	f	class:ProtoMol::LangevinImpulseIntegrator
doDrift	framework/integrators/NPTVerletIntegrator.cpp	/^  void NPTVerletIntegrator::doDrift() {$/;"	f	class:ProtoMol::NPTVerletIntegrator
doDrift	framework/integrators/NVTVerletIntegrator.cpp	/^  void NVTVerletIntegrator::doDrift() {$/;"	f	class:ProtoMol::NVTVerletIntegrator
doDrift	framework/integrators/PaulTrapIntegrator.cpp	/^  void PaulTrapIntegrator::doDrift(void) {$/;"	f	class:ProtoMol::PaulTrapIntegrator
doDrift	framework/integrators/STSIntegrator.cpp	/^  void STSIntegrator::doDrift() {$/;"	f	class:ProtoMol::STSIntegrator
doDriftOrNextIntegrator	framework/integrators/MTSIntegrator.cpp	/^  void MTSIntegrator::doDriftOrNextIntegrator() {$/;"	f	class:ProtoMol::MTSIntegrator
doDriftOrNextIntegrator	framework/integrators/STSIntegrator.cpp	/^  void STSIntegrator::doDriftOrNextIntegrator() {$/;"	f	class:ProtoMol::STSIntegrator
doEvaluate	framework/forces/ElectricFieldSystemForce.h	/^  inline void ElectricFieldSystemForce<TBoundaryConditions,TSwitchingFunction,TConstraint>::doEvaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::ElectricFieldSystemForce
doEvaluate	framework/forces/ExternalGravitationSystemForce.cpp	/^  void ExternalGravitationSystemForce::doEvaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::ExternalGravitationSystemForce
doEvaluate	framework/forces/ExternalMagneticFieldExtendedForce.cpp	/^  void ExternalMagneticFieldExtendedForce::doEvaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::ExternalMagneticFieldExtendedForce
doEvaluate	framework/forces/FrictionExtendedForce.cpp	/^  void FrictionExtendedForce::doEvaluate(const GenericTopology*,$/;"	f	class:ProtoMol::FrictionExtendedForce
doEvaluate	framework/forces/NonbondedCutoffForce.h	/^  void NonbondedCutoffForce<TCellManager,TOneAtomPair,TForce,TImplForce>::doEvaluate(const GenericTopology* topo,  unsigned int n){$/;"	f	class:ProtoMol::NonbondedCutoffForce
doEvaluate	framework/forces/NonbondedFullSystemForce.h	/^  void NonbondedFullSystemForce<TOneAtomPair>::doEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedFullSystemForce
doEvaluate	framework/forces/NonbondedSimpleFullSystemForce.h	/^  void NonbondedSimpleFullSystemForce<TOneAtomPair>::doEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedSimpleFullSystemForce
doEvaluate	framework/forces/PaulTrapExtendedForce.h	/^  inline void PaulTrapExtendedForce<TBoundaryConditions>::doEvaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::PaulTrapExtendedForce
doEvaluate	framework/forces/SphericalSystemForce.cpp	/^  void SphericalSystemForce::doEvaluate(const GenericTopology* \/*topo*\/,$/;"	f	class:ProtoMol::SphericalSystemForce
doExecute	framework/integrators/ModifierAveraging.h	/^    virtual void doExecute(){$/;"	f	class:ProtoMol::ModifierAveraging
doExecute	framework/integrators/ModifierFriction.h	/^    virtual void doExecute(){$/;"	f	class:ProtoMol::ModifierFriction
doExecute	framework/integrators/ModifierIncrementTimestep.h	/^    virtual void doExecute(){$/;"	f	class:ProtoMol::ModifierIncrementTimestep
doExecute	framework/integrators/ModifierMollification.h	/^    virtual void doExecute(){$/;"	f	class:ProtoMol::ModifierMollification
doExecute	framework/integrators/ModifierNPTRattle.cpp	/^  void ModifierNPTRattleDetails::doExecute(){$/;"	f	class:ProtoMol::ModifierNPTRattleDetails
doExecute	framework/integrators/ModifierNPTShake.cpp	/^  void ModifierNPTShakeDetails::doExecute(){$/;"	f	class:ProtoMol::ModifierNPTShakeDetails
doExecute	framework/integrators/ModifierNVTRattle.cpp	/^  void ModifierNVTRattleDetails::doExecute(){$/;"	f	class:ProtoMol::ModifierNVTRattleDetails
doExecute	framework/integrators/ModifierNVTShake.cpp	/^  void ModifierNVTShakeDetails::doExecute(){$/;"	f	class:ProtoMol::ModifierNVTShakeDetails
doExecute	framework/integrators/ModifierPostForceBarostat.h	/^    virtual void doExecute(){$/;"	f	class:ProtoMol::ModifierPostForceBarostat
doExecute	framework/integrators/ModifierPostForceThermostat.h	/^    virtual void doExecute(){$/;"	f	class:ProtoMol::ModifierPostForceThermostat
doExecute	framework/integrators/ModifierPreForceBarostat.h	/^    virtual void doExecute(){$/;"	f	class:ProtoMol::ModifierPreForceBarostat
doExecute	framework/integrators/ModifierPreForceThermostat.h	/^    virtual void doExecute(){$/;"	f	class:ProtoMol::ModifierPreForceThermostat
doExecute	framework/integrators/ModifierRattle.cpp	/^  void ModifierRattle::doExecute(){$/;"	f	class:ProtoMol::ModifierRattle
doExecute	framework/integrators/ModifierRemoveAngularMomentum.h	/^    virtual void doExecute(){$/;"	f	class:ProtoMol::ModifierRemoveAngularMomentum
doExecute	framework/integrators/ModifierRemoveLinearMomentum.h	/^    virtual void doExecute(){$/;"	f	class:ProtoMol::ModifierRemoveLinearMomentum
doExecute	framework/integrators/ModifierShadow.cpp	/^    void ModifierShadow::doExecute() {$/;"	f	class:ProtoMol::ModifierShadow
doExecute	framework/integrators/ModifierShake.cpp	/^  void ModifierShake::doExecute(){$/;"	f	class:ProtoMol::ModifierShake
doFinalize	framework/frontend/OutputBSDL.h	/^    virtual void doFinalize(int){};$/;"	f	class:ProtoMol::OutputBSDL
doFinalize	framework/frontend/OutputDCDTrajectory.cpp	/^  void OutputDCDTrajectory::doFinalize(int){$/;"	f	class:ProtoMol::OutputDCDTrajectory
doFinalize	framework/frontend/OutputDihedrals.cpp	/^  void OutputDihedrals::doFinalize(int){$/;"	f	class:ProtoMol::OutputDihedrals
doFinalize	framework/frontend/OutputFile.cpp	/^  void OutputFile::doFinalize(int){$/;"	f	class:ProtoMol::OutputFile
doFinalize	framework/frontend/OutputFinalPDBPos.cpp	/^  void OutputFinalPDBPos::doFinalize(int step){$/;"	f	class:ProtoMol::OutputFinalPDBPos
doFinalize	framework/frontend/OutputFinalXYZBinPos.cpp	/^  void OutputFinalXYZBinPos::doFinalize(int){$/;"	f	class:ProtoMol::OutputFinalXYZBinPos
doFinalize	framework/frontend/OutputFinalXYZBinVel.cpp	/^  void OutputFinalXYZBinVel::doFinalize(int){$/;"	f	class:ProtoMol::OutputFinalXYZBinVel
doFinalize	framework/frontend/OutputFinalXYZPos.cpp	/^  void OutputFinalXYZPos::doFinalize(int step){$/;"	f	class:ProtoMol::OutputFinalXYZPos
doFinalize	framework/frontend/OutputFinalXYZVel.cpp	/^  void OutputFinalXYZVel::doFinalize(int step){$/;"	f	class:ProtoMol::OutputFinalXYZVel
doFinalize	framework/frontend/OutputPDBFramePos.h	/^    virtual void doFinalize(int){};$/;"	f	class:ProtoMol::OutputPDBFramePos
doFinalize	framework/frontend/OutputREMExchangeRate.cpp	/^  void OutputREMExchangeRate::doFinalize(int \/*step*\/) {$/;"	f	class:ProtoMol::OutputREMExchangeRate
doFinalize	framework/frontend/OutputREMHistory.cpp	/^  void OutputREMHistoryFile::doFinalize(int \/*step*\/) {$/;"	f	class:ProtoMol::OutputREMHistoryFile
doFinalize	framework/frontend/OutputScreen.h	/^    virtual void doFinalize(int){}$/;"	f	class:ProtoMol::OutputScreen
doFinalize	framework/frontend/OutputState.cpp	/^  void OutputState::doFinalize(int){$/;"	f	class:ProtoMol::OutputState
doFinalize	framework/frontend/OutputXYZBinTrajectoryPos.cpp	/^  void OutputXYZBinTrajectoryPos::doFinalize(int){$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryPos
doFinalize	framework/frontend/OutputXYZBinTrajectoryVel.cpp	/^  void OutputXYZBinTrajectoryVel::doFinalize(int){$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryVel
doFinalize	framework/frontend/OutputXYZTrajectoryForce.cpp	/^  void OutputXYZTrajectoryForce::doFinalize(int){$/;"	f	class:ProtoMol::OutputXYZTrajectoryForce
doFinalize	framework/frontend/OutputXYZTrajectoryPos.cpp	/^  void OutputXYZTrajectoryPos::doFinalize(int){$/;"	f	class:ProtoMol::OutputXYZTrajectoryPos
doFinalize	framework/frontend/OutputXYZTrajectoryVel.cpp	/^  void OutputXYZTrajectoryVel::doFinalize(int){$/;"	f	class:ProtoMol::OutputXYZTrajectoryVel
doFirstHalfKick	framework/integrators/BBKIntegrator.cpp	/^  void BBKIntegrator::doFirstHalfKick(){$/;"	f	class:ProtoMol::BBKIntegrator
doFlushCache	framework/frontend/OutputFile.h	/^    virtual void doFlushCache(){};$/;"	f	class:ProtoMol::OutputFile
doFlushCache	framework/frontend/OutputPaulTrap.cpp	/^  void OutputPaulTrap::doFlushCache(){$/;"	f	class:ProtoMol::OutputPaulTrap
doHalfDrift	framework/integrators/PLeapfrogIntegrator.cpp	/^  void PLeapfrogIntegrator::doHalfDrift() {$/;"	f	class:ProtoMol::PLeapfrogIntegrator
doHalfKick	framework/integrators/DMDLeapfrogIntegrator.cpp	/^  void DMDLeapfrogIntegrator::doHalfKick() $/;"	f	class:ProtoMol::DMDLeapfrogIntegrator
doHalfKick	framework/integrators/NPTVerletIntegrator.cpp	/^  void NPTVerletIntegrator::doHalfKick() {$/;"	f	class:ProtoMol::NPTVerletIntegrator
doHalfKick	framework/integrators/NVTVerletIntegrator.cpp	/^  void NVTVerletIntegrator::doHalfKick() {$/;"	f	class:ProtoMol::NVTVerletIntegrator
doHalfKick	framework/integrators/StandardIntegrator.cpp	/^  void StandardIntegrator::doHalfKick(){$/;"	f	class:ProtoMol::StandardIntegrator
doHalfKickIterate	framework/integrators/DMDLeapfrogIntegrator.cpp	/^  void DMDLeapfrogIntegrator::doHalfKickIterate() {$/;"	f	class:ProtoMol::DMDLeapfrogIntegrator
doHalfKickVhat	framework/integrators/DMDLeapfrogIntegrator.cpp	/^  void DMDLeapfrogIntegrator::doHalfKickVhat() $/;"	f	class:ProtoMol::DMDLeapfrogIntegrator
doHalfKickdoDrift	framework/integrators/LeapfrogIntegrator.cpp	/^  void LeapfrogIntegrator::doHalfKickdoDrift() {$/;"	f	class:ProtoMol::LeapfrogIntegrator
doInitialize	framework/frontend/OutputBSDL.cpp	/^  void OutputBSDL::doInitialize(){$/;"	f	class:ProtoMol::OutputBSDL
doInitialize	framework/frontend/OutputDCDTrajectory.cpp	/^  void OutputDCDTrajectory::doInitialize(){$/;"	f	class:ProtoMol::OutputDCDTrajectory
doInitialize	framework/frontend/OutputDiffusion.cpp	/^  void OutputDiffusion::doInitialize(){$/;"	f	class:ProtoMol::OutputDiffusion
doInitialize	framework/frontend/OutputDihedrals.cpp	/^  void OutputDihedrals::doInitialize(){$/;"	f	class:ProtoMol::OutputDihedrals
doInitialize	framework/frontend/OutputEnergies.cpp	/^  void OutputEnergies::doInitialize(){$/;"	f	class:ProtoMol::OutputEnergies
doInitialize	framework/frontend/OutputFinalPDBPos.h	/^    virtual void doInitialize(){};$/;"	f	class:ProtoMol::OutputFinalPDBPos
doInitialize	framework/frontend/OutputFinalXYZBinPos.h	/^    virtual void doInitialize(){};$/;"	f	class:ProtoMol::OutputFinalXYZBinPos
doInitialize	framework/frontend/OutputFinalXYZBinVel.h	/^    virtual void doInitialize(){};$/;"	f	class:ProtoMol::OutputFinalXYZBinVel
doInitialize	framework/frontend/OutputFinalXYZPos.h	/^    virtual void doInitialize(){};$/;"	f	class:ProtoMol::OutputFinalXYZPos
doInitialize	framework/frontend/OutputFinalXYZVel.h	/^    virtual void doInitialize(){};$/;"	f	class:ProtoMol::OutputFinalXYZVel
doInitialize	framework/frontend/OutputMomentum.cpp	/^  void OutputMomentum::doInitialize(){$/;"	f	class:ProtoMol::OutputMomentum
doInitialize	framework/frontend/OutputPDBFramePos.h	/^    virtual void doInitialize(){};$/;"	f	class:ProtoMol::OutputPDBFramePos
doInitialize	framework/frontend/OutputPaulTrap.cpp	/^  void OutputPaulTrap::doInitialize(){$/;"	f	class:ProtoMol::OutputPaulTrap
doInitialize	framework/frontend/OutputREMExchangeRate.cpp	/^  void OutputREMExchangeRate::doInitialize() {$/;"	f	class:ProtoMol::OutputREMExchangeRate
doInitialize	framework/frontend/OutputREMHistory.cpp	/^  void OutputREMHistoryFile::doInitialize() {$/;"	f	class:ProtoMol::OutputREMHistoryFile
doInitialize	framework/frontend/OutputScreen.cpp	/^  void OutputScreen::doInitialize(){$/;"	f	class:ProtoMol::OutputScreen
doInitialize	framework/frontend/OutputState.cpp	/^  void OutputState::doInitialize(){$/;"	f	class:ProtoMol::OutputState
doInitialize	framework/frontend/OutputTemperatures.cpp	/^  void OutputTemperatures::doInitialize(){$/;"	f	class:ProtoMol::OutputTemperatures
doInitialize	framework/frontend/OutputXYZBinTrajectoryPos.cpp	/^  void OutputXYZBinTrajectoryPos::doInitialize(){$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryPos
doInitialize	framework/frontend/OutputXYZBinTrajectoryVel.cpp	/^  void OutputXYZBinTrajectoryVel::doInitialize(){$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryVel
doInitialize	framework/frontend/OutputXYZTrajectoryForce.cpp	/^  void OutputXYZTrajectoryForce::doInitialize(){$/;"	f	class:ProtoMol::OutputXYZTrajectoryForce
doInitialize	framework/frontend/OutputXYZTrajectoryPos.cpp	/^  void OutputXYZTrajectoryPos::doInitialize(){$/;"	f	class:ProtoMol::OutputXYZTrajectoryPos
doInitialize	framework/frontend/OutputXYZTrajectoryVel.cpp	/^  void OutputXYZTrajectoryVel::doInitialize(){$/;"	f	class:ProtoMol::OutputXYZTrajectoryVel
doInitialize	framework/integrators/Modifier.h	/^    virtual void doInitialize(){}$/;"	f	class:ProtoMol::Modifier
doInitialize	framework/integrators/ModifierMetaRattleShake.cpp	/^  void ModifierMetaRattleShake::doInitialize(){$/;"	f	class:ProtoMol::ModifierMetaRattleShake
doInitialize	framework/integrators/ModifierRemoveAngularMomentum.h	/^    virtual void doInitialize(){myStep =0;}$/;"	f	class:ProtoMol::ModifierRemoveAngularMomentum
doInitialize	framework/integrators/ModifierRemoveLinearMomentum.h	/^    virtual void doInitialize(){myStep =0;}$/;"	f	class:ProtoMol::ModifierRemoveLinearMomentum
doInitialize	framework/integrators/ModifierShadow.cpp	/^    void ModifierShadow::doInitialize() {$/;"	f	class:ProtoMol::ModifierShadow
doKeywords	framework/frontend/HelpTextFactory.cpp	/^  string HelpTextFactory::doKeywords() const{$/;"	f	class:ProtoMol::HelpTextFactory
doKick	framework/integrators/StandardIntegrator.cpp	/^  void StandardIntegrator::doKick(){$/;"	f	class:ProtoMol::StandardIntegrator
doKickdoDrift	framework/integrators/LeapfrogIntegrator.cpp	/^  void LeapfrogIntegrator::doKickdoDrift() {$/;"	f	class:ProtoMol::LeapfrogIntegrator
doKickdoDrift	framework/integrators/PLeapfrogIntegrator.cpp	/^  void PLeapfrogIntegrator::doKickdoDrift() {$/;"	f	class:ProtoMol::PLeapfrogIntegrator
doKickdoHalfDrift	framework/integrators/PLeapfrogIntegrator.cpp	/^  void PLeapfrogIntegrator::doKickdoHalfDrift() {$/;"	f	class:ProtoMol::PLeapfrogIntegrator
doMake	framework/forces/AngleSystemForce.h	/^    virtual Force* doMake(std::string&, std::vector<Value>) const {$/;"	f	class:ProtoMol::AngleSystemForce
doMake	framework/forces/BondSystemForce.h	/^    virtual Force* doMake(std::string&, std::vector<Value>) const {$/;"	f	class:ProtoMol::BondSystemForce
doMake	framework/forces/CompareForce.cpp	/^  Force* CompareForce::doMake(string& errMsg, vector<Value> values) const{$/;"	f	class:ProtoMol::CompareForce
doMake	framework/forces/DihedralSystemForce.h	/^    virtual Force* doMake(std::string&, std::vector<Value>) const { return (new DihedralSystemForce());}$/;"	f	class:ProtoMol::DihedralSystemForce
doMake	framework/forces/ElectricFieldSystemForce.h	/^  inline Force* ElectricFieldSystemForce<TBoundaryConditions,TSwitchingFunction,TConstraint>::doMake(std::string& errMsg, std::vector<Value> values) const {$/;"	f	class:ProtoMol::ElectricFieldSystemForce
doMake	framework/forces/ExternalGravitationSystemForce.cpp	/^  Force* ExternalGravitationSystemForce::doMake(string&, vector<Value> values) const {$/;"	f	class:ProtoMol::ExternalGravitationSystemForce
doMake	framework/forces/ExternalMagneticFieldExtendedForce.cpp	/^  Force* ExternalMagneticFieldExtendedForce::doMake(string&, vector<Value> values) const {$/;"	f	class:ProtoMol::ExternalMagneticFieldExtendedForce
doMake	framework/forces/FrictionExtendedForce.cpp	/^  Force* FrictionExtendedForce::doMake(string&, vector<Value> values) const {$/;"	f	class:ProtoMol::FrictionExtendedForce
doMake	framework/forces/HarmDihedralSystemForce.h	/^    virtual Force* doMake(std::string&, std::vector<Value> values) const { $/;"	f	class:ProtoMol::HarmDihedralSystemForce
doMake	framework/forces/ImproperSystemForce.h	/^    virtual Force* doMake(std::string&, std::vector<Value>) const { return (new ImproperSystemForce()); }$/;"	f	class:ProtoMol::ImproperSystemForce
doMake	framework/forces/MagneticDipoleMirrorSystemForce.h	/^  inline Force* MagneticDipoleMirrorSystemForce<TBoundaryConditions>::doMake(std::string&, std::vector<Value> values) const {$/;"	f	class:ProtoMol::MagneticDipoleMirrorSystemForce
doMake	framework/forces/NonbondedCutoffForce.h	/^  Force* NonbondedCutoffForce<TCellManager,TOneAtomPair,TForce,TImplForce>::doMake(std::string& errMsg, std::vector<Value> values) const{$/;"	f	class:ProtoMol::NonbondedCutoffForce
doMake	framework/forces/NonbondedFullEwaldSystemForce.h	/^					TSwitchingFunction>::doMake(std::string& errMsg, std::vector<Value> values) const{$/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
doMake	framework/forces/NonbondedFullSystemForce.h	/^  Force* NonbondedFullSystemForce<TOneAtomPair>::doMake(std::string& errMsg, std::vector<Value> values) const{$/;"	f	class:ProtoMol::NonbondedFullSystemForce
doMake	framework/forces/NonbondedMultiGridSystemForce.h	/^				       smooth>::doMake(std::string& errMsg, std::vector<Value> values) const{$/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
doMake	framework/forces/NonbondedPMEwaldSystemForce.h	/^				     real,reciprocal,correction,TInterpolation,TSwitchingFunction>::doMake(std::string& errMsg,std::vector<Value> values) const{$/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
doMake	framework/forces/NonbondedSimpleFullSystemForce.h	/^    virtual Force* doMake(std::string& errMsg, std::vector<Value> values) const{$/;"	f	class:ProtoMol::NonbondedSimpleFullSystemForce
doMake	framework/forces/PaulTrapExtendedForce.h	/^  inline Force* PaulTrapExtendedForce<TBoundaryConditions>::doMake(std::string&, std::vector<Value> values) const {$/;"	f	class:ProtoMol::PaulTrapExtendedForce
doMake	framework/forces/SphericalSystemForce.cpp	/^  Force* SphericalSystemForce::doMake(string& errMsg, vector<Value> values) const {$/;"	f	class:ProtoMol::SphericalSystemForce
doMake	framework/forces/TimeForce.cpp	/^  Force* TimeForce::doMake(string& errMsg, vector<Value> values) const{$/;"	f	class:ProtoMol::TimeForce
doMake	framework/forces/WrapperMetaForce.cpp	/^  Force* WrapperMetaForce::doMake(string& errMsg, vector<Value> val) const{$/;"	f	class:ProtoMol::WrapperMetaForce
doMake	framework/frontend/ForceFactoryDetails.cpp	/^  Force* ForceFactoryDetails::doMake(string& errMsg, const string& idInput, vector<Value> values) const{$/;"	f	class:ProtoMol::ForceFactoryDetails
doMake	framework/frontend/IntegratorFactoryDetails.cpp	/^  Integrator* IntegratorFactoryDetails::doMake(string& errMsg, const string& definition) const{$/;"	f	class:ProtoMol::IntegratorFactoryDetails
doMake	framework/frontend/OutputBSDL.cpp	/^  Output* OutputBSDL::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputBSDL
doMake	framework/frontend/OutputDCDTrajectory.cpp	/^  Output* OutputDCDTrajectory::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputDCDTrajectory
doMake	framework/frontend/OutputDiffusion.cpp	/^  Output* OutputDiffusion::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputDiffusion
doMake	framework/frontend/OutputDihedrals.cpp	/^  Output* OutputDihedrals::doMake(std::string& , const std::vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputDihedrals
doMake	framework/frontend/OutputEnergies.cpp	/^  Output* OutputEnergies::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputEnergies
doMake	framework/frontend/OutputFactoryDetails.cpp	/^  Output* OutputFactoryDetails::doMake(string& errMsg, const string& id, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputFactoryDetails
doMake	framework/frontend/OutputFinalPDBPos.cpp	/^  Output* OutputFinalPDBPos::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputFinalPDBPos
doMake	framework/frontend/OutputFinalXYZBinPos.cpp	/^  Output* OutputFinalXYZBinPos::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputFinalXYZBinPos
doMake	framework/frontend/OutputFinalXYZBinVel.cpp	/^  Output* OutputFinalXYZBinVel::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputFinalXYZBinVel
doMake	framework/frontend/OutputFinalXYZPos.cpp	/^  Output* OutputFinalXYZPos::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputFinalXYZPos
doMake	framework/frontend/OutputFinalXYZVel.cpp	/^  Output* OutputFinalXYZVel::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputFinalXYZVel
doMake	framework/frontend/OutputMomentum.cpp	/^  Output* OutputMomentum::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputMomentum
doMake	framework/frontend/OutputPDBFramePos.cpp	/^  Output* OutputPDBFramePos::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputPDBFramePos
doMake	framework/frontend/OutputPaulTrap.cpp	/^  Output* OutputPaulTrap::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputPaulTrap
doMake	framework/frontend/OutputREMExchangeRate.cpp	/^  Output *OutputREMExchangeRate::doMake(string & \/*errMesg*\/, const vector<Value> &values) const {$/;"	f	class:ProtoMol::OutputREMExchangeRate
doMake	framework/frontend/OutputREMHistory.cpp	/^  Output *OutputREMHistoryFile::doMake(string & \/*errMesg*\/, const vector<Value> &values) const {$/;"	f	class:ProtoMol::OutputREMHistoryFile
doMake	framework/frontend/OutputScreen.cpp	/^  Output* OutputScreen::doMake(string&, const  vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputScreen
doMake	framework/frontend/OutputState.cpp	/^  Output* OutputState::doMake(std::string& , const std::vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputState
doMake	framework/frontend/OutputTemperatures.cpp	/^  Output* OutputTemperatures::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputTemperatures
doMake	framework/frontend/OutputXYZBinTrajectoryPos.cpp	/^  Output* OutputXYZBinTrajectoryPos::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryPos
doMake	framework/frontend/OutputXYZBinTrajectoryVel.cpp	/^  Output* OutputXYZBinTrajectoryVel::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryVel
doMake	framework/frontend/OutputXYZTrajectoryForce.cpp	/^  Output* OutputXYZTrajectoryForce::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputXYZTrajectoryForce
doMake	framework/frontend/OutputXYZTrajectoryPos.cpp	/^  Output* OutputXYZTrajectoryPos::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputXYZTrajectoryPos
doMake	framework/frontend/OutputXYZTrajectoryVel.cpp	/^  Output* OutputXYZTrajectoryVel::doMake(string&, const vector<Value>& values) const{$/;"	f	class:ProtoMol::OutputXYZTrajectoryVel
doMake	framework/frontend/TopologyFactoryDetails.cpp	/^  GenericTopology* TopologyFactoryDetails::doMake(string& errMsg, const string& id, const vector<Value>& values) const{$/;"	f	class:ProtoMol::TopologyFactoryDetails
doMake	framework/imd/HapticSystemForce.cpp	/^  Force* HapticSystemForce::doMake(string& , vector<Value> values) const {$/;"	f	class:ProtoMol::HapticSystemForce
doMake	framework/integrators/BBKIntegrator.cpp	/^  STSIntegrator* BBKIntegrator::doMake(string& , const vector<Value>& values,ForceGroup* fg)const{$/;"	f	class:ProtoMol::BBKIntegrator
doMake	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  MTSIntegrator* BSplineMOLLYIntegrator::doMake(std::string& errMsg, const std::vector<Value>& values, ForceGroup* fg, StandardIntegrator *nextIntegrator)const{$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
doMake	framework/integrators/DLMCIntegrator.cpp	/^  MTSIntegrator*  DLMCIntegrator::doMake(string& , const vector<Value>& values, $/;"	f	class:ProtoMol::DLMCIntegrator
doMake	framework/integrators/DMDLeapfrogIntegrator.cpp	/^  STSIntegrator* DMDLeapfrogIntegrator::doMake(string& , const vector<Value>& values,ForceGroup* fg)const{$/;"	f	class:ProtoMol::DMDLeapfrogIntegrator
doMake	framework/integrators/DihedralHMCIntegrator.cpp	/^  MTSIntegrator* DihedralHMCIntegrator::doMake(string& , const vector<Value>& values, $/;"	f	class:ProtoMol::DihedralHMCIntegrator
doMake	framework/integrators/EquilibriumMOLLYIntegrator.cpp	/^  MTSIntegrator* EquilibriumMOLLYIntegrator::doMake(string& , const vector<Value>& values,ForceGroup* fg, StandardIntegrator *nextIntegrator)const{$/;"	f	class:ProtoMol::EquilibriumMOLLYIntegrator
doMake	framework/integrators/HMCIntegrator.cpp	/^    MTSIntegrator*  HMCIntegrator::doMake(string& , const vector<Value>& values, $/;"	f	class:ProtoMol::HMCIntegrator
doMake	framework/integrators/ImpulseIntegrator.cpp	/^  MTSIntegrator* ImpulseIntegrator::doMake(string&, const vector<Value>& values,ForceGroup* fg, StandardIntegrator *nextIntegrator)const{$/;"	f	class:ProtoMol::ImpulseIntegrator
doMake	framework/integrators/LangevinImpulseIntegrator.cpp	/^  STSIntegrator* LangevinImpulseIntegrator::doMake(string& , const vector<Value>& values,ForceGroup* fg)const{$/;"	f	class:ProtoMol::LangevinImpulseIntegrator
doMake	framework/integrators/LeapfrogIntegrator.cpp	/^  STSIntegrator* LeapfrogIntegrator::doMake(string& , const vector<Value>& values,ForceGroup* fg)const{$/;"	f	class:ProtoMol::LeapfrogIntegrator
doMake	framework/integrators/NPTVerletIntegrator.cpp	/^  STSIntegrator* NPTVerletIntegrator::doMake(string& , const vector<Value>& values,ForceGroup* fg)const{$/;"	f	class:ProtoMol::NPTVerletIntegrator
doMake	framework/integrators/NVTVerletIntegrator.cpp	/^  STSIntegrator* NVTVerletIntegrator::doMake(string& , const vector<Value>& values,ForceGroup* fg)const{$/;"	f	class:ProtoMol::NVTVerletIntegrator
doMake	framework/integrators/NoseNVTLeapfrogIntegrator.cpp	/^  STSIntegrator* NoseNVTLeapfrogIntegrator::doMake(string&, const vector<Value>& values,ForceGroup* fg)const{$/;"	f	class:ProtoMol::NoseNVTLeapfrogIntegrator
doMake	framework/integrators/PLeapfrogIntegrator.cpp	/^  STSIntegrator* PLeapfrogIntegrator::doMake(string& , const vector<Value>& values,ForceGroup* fg)const{$/;"	f	class:ProtoMol::PLeapfrogIntegrator
doMake	framework/integrators/PaulTrapIntegrator.cpp	/^  STSIntegrator* PaulTrapIntegrator::doMake(string& errMsg, const vector<Value>& values,ForceGroup* fg)const{$/;"	f	class:ProtoMol::PaulTrapIntegrator
doMake	framework/integrators/ShadowHMCIntegrator.cpp	/^    MTSIntegrator * ShadowHMCIntegrator::doMake( string &errMsg,$/;"	f	class:ProtoMol::ShadowHMCIntegrator
doMake	framework/topology/Topology.h	/^    virtual GenericTopology* doMake(std::string& errMsg, std::vector<Value> values)const{$/;"	f	class:ProtoMol::Topology
doMakeCollection	framework/frontend/OutputFactoryDetails.cpp	/^  OutputCollection* OutputFactoryDetails::doMakeCollection(string& errMsg, const Configuration* config) const{$/;"	f	class:ProtoMol::OutputFactoryDetails
doMollification	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  void BSplineMOLLYIntegrator::doMollification(Vector3DBlock*){$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
doMollification	framework/integrators/EquilibriumMOLLYIntegrator.cpp	/^  void EquilibriumMOLLYIntegrator::doMollification(Vector3DBlock*){$/;"	f	class:ProtoMol::EquilibriumMOLLYIntegrator
doOneAtomPair	framework/forces/OneAtomPair.h	/^			  TConstraint>::doOneAtomPair(const int i, const int j) {$/;"	f	class:ProtoMol::OneAtomPair
doOneAtomPair	framework/forces/OneAtomPairFull.h	/^			      TConstraint>::doOneAtomPair(const int i, const int j) {$/;"	f	class:ProtoMol::OneAtomPairFull
doOneAtomPair	framework/forces/OneAtomPairTwo.h	/^			     TConstraint>::doOneAtomPair(const int i, const int j) {$/;"	f	class:ProtoMol::OneAtomPairTwo
doOneAtomPair	framework/forces/OneAtomPairTwoFull.h	/^				 TConstraint>::doOneAtomPair(const int i, const int j) {$/;"	f	class:ProtoMol::OneAtomPairTwoFull
doOneAtomPair	framework/forces/OneMollyPair.h	/^			   TNonbondedForce>::doOneAtomPair(const int i, const int j) {$/;"	f	class:ProtoMol::OneMollyPair
doOneAtomPair	framework/forces/OneMollyPairTwo.h	/^			      TNonbondedForceSecond>::doOneAtomPair(const int i, const int j) {$/;"	f	class:ProtoMol::OneMollyPairTwo
doPrint	framework/frontend/ForceFactoryDetails.cpp	/^  string ForceFactoryDetails::doPrint()const{$/;"	f	class:ProtoMol::ForceFactoryDetails
doPrint	framework/frontend/IntegratorFactoryDetails.cpp	/^  string IntegratorFactoryDetails::doPrint()const{$/;"	f	class:ProtoMol::IntegratorFactoryDetails
doPrint	framework/frontend/OutputFactoryDetails.cpp	/^  string OutputFactoryDetails::doPrint()const{$/;"	f	class:ProtoMol::OutputFactoryDetails
doPrint	framework/frontend/TopologyFactoryDetails.cpp	/^  string TopologyFactoryDetails::doPrint()const{$/;"	f	class:ProtoMol::TopologyFactoryDetails
doPrint	framework/integrators/ModifierAveraging.h	/^    virtual std::string doPrint()const{return std::string("Averaging");};$/;"	f	class:ProtoMol::ModifierAveraging
doPrint	framework/integrators/ModifierFriction.h	/^    virtual std::string doPrint()const{return std::string("Friction");};$/;"	f	class:ProtoMol::ModifierFriction
doPrint	framework/integrators/ModifierIncrementTimestep.h	/^    virtual std::string doPrint()const{return std::string("IncrementTimestep");};$/;"	f	class:ProtoMol::ModifierIncrementTimestep
doPrint	framework/integrators/ModifierMollification.h	/^    virtual std::string doPrint()const{return std::string("Mollification");};$/;"	f	class:ProtoMol::ModifierMollification
doPrint	framework/integrators/ModifierNPTRattle.h	/^    virtual std::string doPrint()const{return std::string("NPTRattle");};$/;"	f	class:ProtoMol::ModifierNPTRattleDetails
doPrint	framework/integrators/ModifierNPTShake.h	/^    virtual std::string doPrint()const{return std::string("NPTShake");};$/;"	f	class:ProtoMol::ModifierNPTShakeDetails
doPrint	framework/integrators/ModifierNVTRattle.h	/^    virtual std::string doPrint()const{return std::string("NPTRattle");};$/;"	f	class:ProtoMol::ModifierNVTRattleDetails
doPrint	framework/integrators/ModifierNVTShake.h	/^    virtual std::string doPrint()const{return std::string("NVTShake");};$/;"	f	class:ProtoMol::ModifierNVTShakeDetails
doPrint	framework/integrators/ModifierPostForceBarostat.h	/^    virtual std::string doPrint()const{return std::string("PostForceBarostat");};$/;"	f	class:ProtoMol::ModifierPostForceBarostat
doPrint	framework/integrators/ModifierPostForceThermostat.h	/^    virtual std::string doPrint()const{return std::string("PostForceThermostat");};$/;"	f	class:ProtoMol::ModifierPostForceThermostat
doPrint	framework/integrators/ModifierPreForceBarostat.h	/^    virtual std::string doPrint()const{return std::string("PreForceBarostat");};$/;"	f	class:ProtoMol::ModifierPreForceBarostat
doPrint	framework/integrators/ModifierPreForceThermostat.h	/^    virtual std::string doPrint()const{return std::string("PreForceThermostat");};$/;"	f	class:ProtoMol::ModifierPreForceThermostat
doPrint	framework/integrators/ModifierRattle.h	/^    virtual std::string doPrint()const{return std::string("Rattle");};$/;"	f	class:ProtoMol::ModifierRattle
doPrint	framework/integrators/ModifierRemoveAngularMomentum.h	/^    virtual std::string doPrint()const{return std::string("RemoveAngularMomentum");};$/;"	f	class:ProtoMol::ModifierRemoveAngularMomentum
doPrint	framework/integrators/ModifierRemoveLinearMomentum.h	/^    virtual std::string doPrint()const{return std::string("RemoveLinearMomentum");};$/;"	f	class:ProtoMol::ModifierRemoveLinearMomentum
doPrint	framework/integrators/ModifierShadow.h	/^            virtual std::string doPrint() const {$/;"	f	class:ProtoMol::ModifierShadow
doPrint	framework/integrators/ModifierShake.h	/^    virtual std::string doPrint()const{return std::string("Shake");};$/;"	f	class:ProtoMol::ModifierShake
doRegisterAllExemplarsConfiguration	framework/frontend/OutputFactoryDetails.cpp	/^  void OutputFactoryDetails::doRegisterAllExemplarsConfiguration(Configuration* config) const {$/;"	f	class:ProtoMol::OutputFactoryDetails
doRegisterAllExemplarsConfiguration	framework/frontend/TopologyFactoryDetails.cpp	/^  void TopologyFactoryDetails::doRegisterAllExemplarsConfiguration(Configuration* config) const {$/;"	f	class:ProtoMol::TopologyFactoryDetails
doRegisterExemplar	framework/frontend/Factory.h	/^    void doRegisterExemplar(const std::string& id, const Type* exemplar){$/;"	f	class:ProtoMol::Factory
doRegisterExemplar	framework/frontend/Factory.h	/^    void doRegisterExemplar(const std::string& id, const Type* exemplar,const std::vector<std::string>& aliases) {$/;"	f	class:ProtoMol::Factory
doRegisterExemplar	framework/frontend/HelpTextFactory.cpp	/^  void HelpTextFactory::doRegisterExemplar(const string& id, const HelpText& helpText){$/;"	f	class:ProtoMol::HelpTextFactory
doRegisterExemplars	framework/frontend/HelpTextFactory.cpp	/^  void HelpTextFactory::doRegisterExemplars(const Configuration* config){$/;"	f	class:ProtoMol::HelpTextFactory
doRegisterHelpText	framework/frontend/ForceFactoryDetails.cpp	/^  void ForceFactoryDetails::doRegisterHelpText() const{$/;"	f	class:ProtoMol::ForceFactoryDetails
doRegisterHelpText	framework/frontend/IntegratorFactoryDetails.cpp	/^  void IntegratorFactoryDetails::doRegisterHelpText() const{$/;"	f	class:ProtoMol::IntegratorFactoryDetails
doRegisterHelpText	framework/frontend/OutputFactoryDetails.cpp	/^  void OutputFactoryDetails::doRegisterHelpText() const{$/;"	f	class:ProtoMol::OutputFactoryDetails
doRegisterHelpText	framework/frontend/TopologyFactoryDetails.cpp	/^  void TopologyFactoryDetails::doRegisterHelpText() const{$/;"	f	class:ProtoMol::TopologyFactoryDetails
doRun	framework/frontend/OutputBSDL.cpp	/^  void OutputBSDL::doRun(int){$/;"	f	class:ProtoMol::OutputBSDL
doRun	framework/frontend/OutputDCDTrajectory.cpp	/^  void OutputDCDTrajectory::doRun(int){$/;"	f	class:ProtoMol::OutputDCDTrajectory
doRun	framework/frontend/OutputFile.cpp	/^  void OutputFile::doRun(int step){$/;"	f	class:ProtoMol::OutputFile
doRun	framework/frontend/OutputFinalPDBPos.h	/^    virtual void doRun(int){};$/;"	f	class:ProtoMol::OutputFinalPDBPos
doRun	framework/frontend/OutputFinalXYZBinPos.h	/^    virtual void doRun(int){};$/;"	f	class:ProtoMol::OutputFinalXYZBinPos
doRun	framework/frontend/OutputFinalXYZBinVel.h	/^    virtual void doRun(int){};$/;"	f	class:ProtoMol::OutputFinalXYZBinVel
doRun	framework/frontend/OutputFinalXYZPos.h	/^    virtual void doRun(int){};$/;"	f	class:ProtoMol::OutputFinalXYZPos
doRun	framework/frontend/OutputFinalXYZVel.h	/^    virtual void doRun(int){};$/;"	f	class:ProtoMol::OutputFinalXYZVel
doRun	framework/frontend/OutputPDBFramePos.cpp	/^  void OutputPDBFramePos::doRun(int step){$/;"	f	class:ProtoMol::OutputPDBFramePos
doRun	framework/frontend/OutputScreen.cpp	/^  void OutputScreen::doRun(int step){$/;"	f	class:ProtoMol::OutputScreen
doRun	framework/frontend/OutputXYZBinTrajectoryPos.cpp	/^  void OutputXYZBinTrajectoryPos::doRun(int){$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryPos
doRun	framework/frontend/OutputXYZBinTrajectoryVel.cpp	/^  void OutputXYZBinTrajectoryVel::doRun(int){$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryVel
doRun	framework/frontend/OutputXYZTrajectoryForce.cpp	/^  void OutputXYZTrajectoryForce::doRun(int){$/;"	f	class:ProtoMol::OutputXYZTrajectoryForce
doRun	framework/frontend/OutputXYZTrajectoryPos.cpp	/^  void OutputXYZTrajectoryPos::doRun(int){$/;"	f	class:ProtoMol::OutputXYZTrajectoryPos
doRun	framework/frontend/OutputXYZTrajectoryVel.cpp	/^  void OutputXYZTrajectoryVel::doRun(int){$/;"	f	class:ProtoMol::OutputXYZTrajectoryVel
doRunCached	framework/frontend/OutputDiffusion.cpp	/^  void OutputDiffusion::doRunCached(int step){$/;"	f	class:ProtoMol::OutputDiffusion
doRunCached	framework/frontend/OutputDihedrals.cpp	/^  void OutputDihedrals::doRunCached(int){$/;"	f	class:ProtoMol::OutputDihedrals
doRunCached	framework/frontend/OutputEnergies.cpp	/^  void OutputEnergies::doRunCached(int){$/;"	f	class:ProtoMol::OutputEnergies
doRunCached	framework/frontend/OutputMomentum.cpp	/^  void OutputMomentum::doRunCached(int){$/;"	f	class:ProtoMol::OutputMomentum
doRunCached	framework/frontend/OutputPaulTrap.cpp	/^  void OutputPaulTrap::doRunCached(int step){$/;"	f	class:ProtoMol::OutputPaulTrap
doRunCached	framework/frontend/OutputREMExchangeRate.cpp	/^  void OutputREMExchangeRate::doRunCached(int \/*step*\/) {$/;"	f	class:ProtoMol::OutputREMExchangeRate
doRunCached	framework/frontend/OutputREMHistory.cpp	/^  void OutputREMHistoryFile::doRunCached(int \/*step*\/) {$/;"	f	class:ProtoMol::OutputREMHistoryFile
doRunCached	framework/frontend/OutputState.cpp	/^  void OutputState::doRunCached(int){$/;"	f	class:ProtoMol::OutputState
doRunCached	framework/frontend/OutputTemperatures.cpp	/^  void OutputTemperatures::doRunCached(int){$/;"	f	class:ProtoMol::OutputTemperatures
doSearch	framework/frontend/HelpTextFactory.cpp	/^  string HelpTextFactory::doSearch(const string& id) const{$/;"	f	class:ProtoMol::HelpTextFactory
doSecondHalfKick	framework/integrators/BBKIntegrator.cpp	/^  void BBKIntegrator::doSecondHalfKick(){$/;"	f	class:ProtoMol::BBKIntegrator
doSetParameters	framework/forces/AngleSystemForce.h	/^    virtual void doSetParameters(std::string&, std::vector<Value>){}$/;"	f	class:ProtoMol::AngleSystemForce
doSetParameters	framework/forces/BondSystemForce.h	/^    virtual void doSetParameters(std::string&, std::vector<Value>){}$/;"	f	class:ProtoMol::BondSystemForce
doSetParameters	framework/forces/CompareForce.cpp	/^  void CompareForce::doSetParameters(std::string& errMsg, std::vector<Value> values){$/;"	f	class:ProtoMol::CompareForce
doSetParameters	framework/forces/DihedralSystemForce.h	/^    virtual void doSetParameters(std::string&, std::vector<Value>){}$/;"	f	class:ProtoMol::DihedralSystemForce
doSetParameters	framework/forces/Force.h	/^    virtual void doSetParameters(std::string& , std::vector<Value> ){Report::report << Report::error << "setParameters not implemented for force "<<this->getId()<<Report::endr;};$/;"	f	class:ProtoMol::Force
doSetParameters	framework/forces/HarmDihedralSystemForce.h	/^    virtual void doSetParameters(std::string&, std::vector<Value> values){$/;"	f	class:ProtoMol::HarmDihedralSystemForce
doSetParameters	framework/forces/ImproperSystemForce.h	/^    virtual void doSetParameters(std::string&, std::vector<Value>){}$/;"	f	class:ProtoMol::ImproperSystemForce
doSetParameters	framework/forces/TimeForce.cpp	/^  void TimeForce::doSetParameters(std::string& errMsg, std::vector<Value> values){$/;"	f	class:ProtoMol::TimeForce
doUncache	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  void BSplineMOLLYIntegrator::doUncache(){$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
doUncache	framework/integrators/Integrator.h	/^    virtual void doUncache(){}$/;"	f	class:ProtoMol::Integrator
doUncache	framework/integrators/PaulTrapIntegrator.cpp	/^  void PaulTrapIntegrator::doUncache(){$/;"	f	class:ProtoMol::PaulTrapIntegrator
doUnregisterExemplar	framework/frontend/Factory.h	/^    bool doUnregisterExemplar(const std::string& id) {$/;"	f	class:ProtoMol::Factory
doUnregisterExemplar	framework/frontend/HelpTextFactory.cpp	/^  bool HelpTextFactory::doUnregisterExemplar(const string& id){$/;"	f	class:ProtoMol::HelpTextFactory
dohint	framework/base/Report.cpp	/^    MyStreamer& dohint(MyStreamer& stream){$/;"	f	namespace:ProtoMol::Report
done	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    bool done() {return (i==the_end);}$/;"	f	class:ProtoMol::CellListEnumerator
done	framework/topology/CellListEnumerator_standard.h	/^    bool done() {return (i==the_end);}$/;"	f	class:ProtoMol::CellListEnumerator
donors	framework/base/PSF.h	/^    std::vector<Donor> donors;$/;"	m	class:ProtoMol::PSF
donthint	framework/base/Report.cpp	/^    MyStreamer& donthint(MyStreamer& stream){$/;"	f	namespace:ProtoMol::Report
dot	framework/base/Vector3D.h	/^    Real dot(const Vector3D& b) const { return (*this)*b;}$/;"	f	struct:ProtoMol::Vector3D
drawBox	compilerTests/glutTest.cpp	/^static void drawBox(){$/;"	f	file:
dswcoef	framework/topology/CnSwitchingFunction.cpp	/^    Real CnSwitchingFunction::dswcoef[][MAXEQNN] = {$/;"	m	class:ProtoMol::CnSwitchingFunction	file:
dswcoef	framework/topology/CnSwitchingFunction.h	/^                dswcoef[][MAXEQNN],$/;"	m	class:ProtoMol::CnSwitchingFunction
dtor	framework/base/mathutilities.cpp	/^  vector<Real> dtor(const vector<Real>& deg){$/;"	f	namespace:ProtoMol
dtor	framework/base/mathutilities.h	/^  inline Real dtor(Real degree) { $/;"	f	namespace:ProtoMol
e1	framework/topology/PeriodicBoundaryConditions.h	/^    const Vector3D& e1()     const {return myE1;}$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
e1	framework/topology/VacuumBoundaryConditions.cpp	/^  Vector3D VacuumBoundaryConditions::e1()     const {return Vector3D(0,0,0);}$/;"	f	class:ProtoMol::VacuumBoundaryConditions
e1r	framework/topology/PeriodicBoundaryConditions.h	/^    const Vector3D& e1r()    const {return myE1r;}$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
e1r	framework/topology/VacuumBoundaryConditions.cpp	/^  Vector3D VacuumBoundaryConditions::e1r()    const {return Vector3D(0,0,0);}$/;"	f	class:ProtoMol::VacuumBoundaryConditions
e2	framework/topology/PeriodicBoundaryConditions.h	/^    const Vector3D& e2()     const {return myE2;}$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
e2	framework/topology/VacuumBoundaryConditions.cpp	/^  Vector3D VacuumBoundaryConditions::e2()     const {return Vector3D(0,0,0);}$/;"	f	class:ProtoMol::VacuumBoundaryConditions
e2r	framework/topology/PeriodicBoundaryConditions.h	/^    const Vector3D& e2r()    const {return myE2r;}$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
e2r	framework/topology/VacuumBoundaryConditions.cpp	/^  Vector3D VacuumBoundaryConditions::e2r()    const {return Vector3D(0,0,0);}$/;"	f	class:ProtoMol::VacuumBoundaryConditions
e3	framework/topology/PeriodicBoundaryConditions.h	/^    const Vector3D& e3()     const {return myE3;}$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
e3	framework/topology/VacuumBoundaryConditions.cpp	/^  Vector3D VacuumBoundaryConditions::e3()     const {return Vector3D(0,0,0);}$/;"	f	class:ProtoMol::VacuumBoundaryConditions
e3r	framework/topology/PeriodicBoundaryConditions.h	/^    const Vector3D& e3r()    const {return myE3r;}$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
e3r	framework/topology/VacuumBoundaryConditions.cpp	/^  Vector3D VacuumBoundaryConditions::e3r()    const {return Vector3D(0,0,0);}$/;"	f	class:ProtoMol::VacuumBoundaryConditions
elapsed	framework/base/Cycles.h	/^    static __inline double elapsed(ticks t1, ticks t0)$/;"	f	namespace:ProtoMol::Private
elapsed	framework/base/Cycles.h	/^    static inline double elapsed(ticks t1, ticks t0) \/* time in nanoseconds *\/$/;"	f	namespace:ProtoMol::Private
elapsed	framework/base/Cycles.h	/^    static inline double elapsed(ticks t1, ticks t0)$/;"	f	namespace:ProtoMol::Private
elementName	framework/base/PDB.h	/^      std::string elementName;     \/\/\/< atom_name	   $/;"	m	struct:ProtoMol::PDB::Atom
elementNum	framework/base/PDB.h	/^      int         elementNum;	   \/\/\/< serial_size	   $/;"	m	struct:ProtoMol::PDB::Atom
elementNum	framework/base/PDB.h	/^      int         elementNum;	   \/\/\/< serial_size	   $/;"	m	struct:ProtoMol::PDB::Ter
elementType	framework/base/PDB.h	/^      std::string elementType;     \/\/\/< record_name        $/;"	m	struct:ProtoMol::PDB::Atom
elementType	framework/base/PDB.h	/^      std::string elementType;     \/\/\/< record_name        $/;"	m	struct:ProtoMol::PDB::Ter
emin	framework/base/PAR.h	/^      Real emin;         \/\/\/< well depth$/;"	m	struct:ProtoMol::PAR::Hbond
empty	framework/base/Array_Fastest.h	/^    bool empty()           const { return m_nArrayElements==0; }$/;"	f	class:ProtoMol::Array
empty	framework/base/Array_NoPartialSpecialization.h	/^    bool empty()           const { return m_nArrayElements==0; }$/;"	f	class:ProtoMol::Array
empty	framework/base/Configuration.cpp	/^  bool Configuration::empty(const string& keyword) const{$/;"	f	class:ProtoMol::Configuration
empty	framework/base/ValueType.h	/^    static Type empty(){return "";}$/;"	f	struct:ProtoMol::ValueTraits
empty	framework/base/ValueType.h	/^    static Type empty(){return 0.0;}$/;"	f	struct:ProtoMol::ValueTraits
empty	framework/base/ValueType.h	/^    static Type empty(){return 0;}$/;"	f	struct:ProtoMol::ValueTraits
empty	framework/base/ValueType.h	/^    static Type empty(){return Type("");}$/;"	f	struct:ProtoMol::ValueTraits
empty	framework/base/ValueType.h	/^    static Type empty(){return Vector3D(0.0,0.0,0.0);}$/;"	f	struct:ProtoMol::ValueTraits
empty	framework/base/ValueType.h	/^    static Type empty(){return std::vector<Real>();}$/;"	f	struct:ProtoMol::ValueTraits
empty	framework/base/ValueType.h	/^    static Type empty(){return true;}$/;"	f	struct:ProtoMol::ValueTraits
empty	framework/base/Vector3DBlock.h	/^    bool empty() const                                           {return vec.empty();}                          $/;"	f	class:ProtoMol::Vector3DBlock
empty	framework/frontend/Factory.h	/^    static bool empty(){$/;"	f	class:ProtoMol::Factory
empty	framework/frontend/HelpTextFactory.cpp	/^  bool HelpTextFactory::empty(){$/;"	f	class:ProtoMol::HelpTextFactory
empty	framework/topology/ExclusionTable.h	/^    bool empty() const{return (myTable.empty());}$/;"	f	class:ProtoMol::ExclusionTable
enable	framework/integrators/Modifier.h	/^    void enable() const{myEnable=true;}$/;"	f	class:ProtoMol::Modifier
end	compilerTests/pngTest.cpp	/^  unsigned char* end() const{return &p[3*w*h];}$/;"	f	class:PPM
end	framework/base/Array_Fastest.h	/^    const_iterator end()   const { return m_pArrayElements+m_nArrayElements; }$/;"	f	class:ProtoMol::Array
end	framework/base/Array_Fastest.h	/^    const_iterator end()   const { return m_pElements+size(); } $/;"	f	class:ProtoMol::RefArray
end	framework/base/Array_Fastest.h	/^    const_iterator end()   const { return m_pElements+size(); }$/;"	f	class:ProtoMol::RefArray
end	framework/base/Array_Fastest.h	/^    iterator       end()         { return m_pArrayElements+m_nArrayElements; }$/;"	f	class:ProtoMol::Array
end	framework/base/Array_Fastest.h	/^    iterator       end()         { return m_pElements+size(); }$/;"	f	class:ProtoMol::RefArray
end	framework/base/Array_NoPartialSpecialization.h	/^      const_iterator end()   const { return m_pElements+size(); } $/;"	f	class:ProtoMol::Array::RefArray
end	framework/base/Array_NoPartialSpecialization.h	/^      const_iterator end()   const { return m_pElements+size(); }$/;"	f	class:ProtoMol::Array::RefArray
end	framework/base/Array_NoPartialSpecialization.h	/^      iterator       end()         { return m_pElements+size(); }$/;"	f	class:ProtoMol::Array::RefArray
end	framework/base/Array_NoPartialSpecialization.h	/^    const_iterator end()   const { return m_pArrayElements+m_nArrayElements; }$/;"	f	class:ProtoMol::Array
end	framework/base/Array_NoPartialSpecialization.h	/^    iterator       end()         { return m_pArrayElements+m_nArrayElements; }$/;"	f	class:ProtoMol::Array
end	framework/base/Configuration.h	/^    const_iterator end() const {return myValues.end();} $/;"	f	class:ProtoMol::Configuration
end	framework/base/Configuration.h	/^    iterator end() {return myValues.end();}$/;"	f	class:ProtoMol::Configuration
end	framework/base/PGM.h	/^    unsigned char* end() const{return &p[w*h];}$/;"	f	class:ProtoMol::PGM
end	framework/base/PPM.h	/^    unsigned char* end() const{return &p[3*w*h];}$/;"	f	class:ProtoMol::PPM
end	framework/base/Vector3DBlock.h	/^    const_iterator end() const                                   {return vec.end();}                  $/;"	f	class:ProtoMol::Vector3DBlock
end	framework/base/Vector3DBlock.h	/^    iterator end()                                               {return vec.end();}                               $/;"	f	class:ProtoMol::Vector3DBlock
end	framework/frontend/Factory.h	/^    static const_iterator end(){$/;"	f	class:ProtoMol::Factory
end	framework/frontend/OutputCollection.h	/^    const_iterator end()   const {return myOutputList.end();} $/;"	f	class:ProtoMol::OutputCollection
end	framework/frontend/OutputCollection.h	/^    iterator       end()         {return myOutputList.end();}$/;"	f	class:ProtoMol::OutputCollection
end	framework/topology/ArrayCellListStructure.h	/^    const_iterator end()   const { return myEndConst; } $/;"	f	class:ProtoMol::ArrayCellListStructure
end	framework/topology/ArrayCellListStructure.h	/^    iterator       end()         { return myEnd; }$/;"	f	class:ProtoMol::ArrayCellListStructure
endr	framework/base/Report.cpp	/^    MyStreamer& endr(MyStreamer& stream){$/;"	f	namespace:ProtoMol::Report
energies	framework/forces/OneAtomPair.h	/^    ScalarStructure* energies;$/;"	m	class:ProtoMol::OneAtomPair
energies	framework/forces/OneAtomPairFull.h	/^    ScalarStructure* energies;$/;"	m	class:ProtoMol::OneAtomPairFull
energies	framework/forces/OneAtomPairTwo.h	/^    ScalarStructure* energies;$/;"	m	class:ProtoMol::OneAtomPairTwo
energies	framework/forces/OneAtomPairTwoFull.h	/^    ScalarStructure* energies;$/;"	m	class:ProtoMol::OneAtomPairTwoFull
energy	framework/base/MultiGrid.h	/^    Real energy(int level){return energy(level,0,1);};$/;"	f	class:ProtoMol::MultiGrid
energy	framework/base/MultiGrid.h	/^  inline Real MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::energy(int level, unsigned int block, unsigned int nBlocks){$/;"	f	class:ProtoMol::MultiGrid
enumerator	framework/forces/NonbondedCutoffForce.h	/^    EnumeratorType enumerator;$/;"	m	class:ProtoMol::NonbondedCutoffForce
enumerator	framework/forces/NonbondedFullEwaldSystemForce.h	/^    EnumeratorType enumerator;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
enumerator	framework/forces/NonbondedMultiGridSystemForce.h	/^    EnumeratorType enumerator;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
enumerator	framework/forces/NonbondedPMEwaldSystemForce.h	/^    EnumeratorType enumerator;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
epsilon	framework/base/PAR.h	/^      Real epsilon;        \/\/\/< well depth or number of effective electrons (see description of negative below)$/;"	m	struct:ProtoMol::PAR::Nonbonded
epsilon14	framework/base/PAR.h	/^      Real epsilon14;       \/\/\/< VDW parameter well depth or number of effective electrons (see above)$/;"	m	struct:ProtoMol::PAR::Nonbonded
epsilonEnergy	framework/forces/PaulTrapExtendedForce.h	/^    Real epsilonEnergy(Real potentialEnergy){return potentialEnergy*myPaulF;}$/;"	f	class:ProtoMol::PaulTrapExtendedForce
equal	framework/base/Value.cpp	/^  inline bool Value::equal(const Value& v1, const Value& v2){$/;"	f	class:ProtoMol::Value
equal	framework/base/mathutilities.h	/^  inline bool equal(Real x, Real y){$/;"	f	namespace:ProtoMol
equal	framework/base/mathutilities.h	/^  inline bool equal(Real x, Real y, Real epsilon){ $/;"	f	namespace:ProtoMol
equal	framework/base/stringutilities.cpp	/^  bool equal(const string& s1, const string& s2){$/;"	f	namespace:ProtoMol
equalBegin	framework/base/stringutilities.cpp	/^  bool equalBegin(const string& s1, const string& s2){$/;"	f	namespace:ProtoMol
equalBeginNocase	framework/base/stringutilities.cpp	/^  bool equalBeginNocase(const string& s1, const string& s2){$/;"	f	namespace:ProtoMol
equalConstraint	framework/base/Value.h	/^  inline bool Value::equalConstraint(const Value& v) const{$/;"	f	class:ProtoMol::Value
equalEnd	framework/base/stringutilities.cpp	/^  bool equalEnd(const string& s1, const string& s2){$/;"	f	namespace:ProtoMol
equalEndNocase	framework/base/stringutilities.cpp	/^  bool equalEndNocase(const string& s1, const string& s2){$/;"	f	namespace:ProtoMol
equalNocase	framework/base/stringutilities.cpp	/^  bool equalNocase(const string& s1, const string& s2){$/;"	f	namespace:ProtoMol
equalStart	framework/base/stringutilities.cpp	/^  bool equalStart(const string& s1, const string& s2){$/;"	f	namespace:ProtoMol
equalStartNocase	framework/base/stringutilities.cpp	/^  bool equalStartNocase(const string& s1, const string& s2){$/;"	f	namespace:ProtoMol
equalTerminate	framework/base/stringutilities.cpp	/^  bool equalTerminate(const string& s1, const string& s2){$/;"	f	namespace:ProtoMol
equalTerminateNocase	framework/base/stringutilities.cpp	/^  bool equalTerminateNocase(const string& s1, const string& s2){$/;"	f	namespace:ProtoMol
equalType	framework/base/Value.cpp	/^  inline bool Value::equalType(const Value& v1, const Value& v2){$/;"	f	class:ProtoMol::Value
equalType	framework/base/Value.h	/^  inline bool Value::equalType(const Value& v) const{$/;"	f	class:ProtoMol::Value
equalTypeAndConstraint	framework/base/Value.h	/^  inline bool Value::equalTypeAndConstraint(const Value& v) const{$/;"	f	class:ProtoMol::Value
equalWildcard	framework/base/stringutilities.cpp	/^  int equalWildcard(const string& wildcard, const string& name){$/;"	f	namespace:ProtoMol
erase	framework/base/Vector3DBlock.h	/^    iterator erase(iterator first, iterator last)                {return vec.erase(first,last);}$/;"	f	class:ProtoMol::Vector3DBlock
erase	framework/base/Vector3DBlock.h	/^    iterator erase(iterator pos)                                 {return vec.erase(pos);}$/;"	f	class:ProtoMol::Vector3DBlock
erf	framework/base/mathutilities.h	/^  inline Real erf(Real x){return myerf(x);}$/;"	f	namespace:ProtoMol
erfc	framework/base/mathutilities.h	/^  inline Real erfc(Real x){return (1.0-myerf(x));}$/;"	f	namespace:ProtoMol
error	framework/base/Report.cpp	/^    MyStreamer& error(MyStreamer& stream){$/;"	f	namespace:ProtoMol::Report
evaluate	framework/base/ReducedHessAngle.cpp	/^  void ReducedHessAngle::evaluate(const Vector3D& atom_i, \/\/position of atom i$/;"	f	class:ProtoMol::ReducedHessAngle
evaluate	framework/forces/AngleSystemForce.h	/^  inline void AngleSystemForce<TBoundaryConditions>::evaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::AngleSystemForce
evaluate	framework/forces/BondSystemForce.h	/^  inline void BondSystemForce<TBoundaryConditions>::evaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::BondSystemForce
evaluate	framework/forces/DihedralSystemForce.h	/^  inline void DihedralSystemForce<TBoundaryConditions>::evaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::DihedralSystemForce
evaluate	framework/forces/ElectricFieldSystemForce.h	/^  inline void ElectricFieldSystemForce<TBoundaryConditions,TSwitchingFunction,TConstraint>::evaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::ElectricFieldSystemForce
evaluate	framework/forces/ExtendedCompareForce.cpp	/^  void ExtendedCompareForce::evaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::ExtendedCompareForce
evaluate	framework/forces/ExtendedTimeForce.cpp	/^  void ExtendedTimeForce::evaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::ExtendedTimeForce
evaluate	framework/forces/ExternalGravitationSystemForce.cpp	/^  void ExternalGravitationSystemForce::evaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::ExternalGravitationSystemForce
evaluate	framework/forces/ExternalMagneticFieldExtendedForce.cpp	/^  void ExternalMagneticFieldExtendedForce::evaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::ExternalMagneticFieldExtendedForce
evaluate	framework/forces/FrictionExtendedForce.cpp	/^  void FrictionExtendedForce::evaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::FrictionExtendedForce
evaluate	framework/forces/HarmDihedralSystemForce.h	/^  inline void HarmDihedralSystemForce<TBoundaryConditions>::evaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::HarmDihedralSystemForce
evaluate	framework/forces/ImproperSystemForce.h	/^  inline void ImproperSystemForce<TBoundaryConditions>::evaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::ImproperSystemForce
evaluate	framework/forces/MagneticDipoleMirrorSystemForce.h	/^  inline void MagneticDipoleMirrorSystemForce<TBoundaryConditions>::evaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::MagneticDipoleMirrorSystemForce
evaluate	framework/forces/NonbondedCutoffMollyForce.h	/^  void NonbondedCutoffMollyForce<TCellManager,TOneAtomPair>::evaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedCutoffMollyForce
evaluate	framework/forces/NonbondedCutoffSystemForce.h	/^  void NonbondedCutoffSystemForce<TCellManager,TOneAtomPair>::evaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedCutoffSystemForce
evaluate	framework/forces/NonbondedFullEwaldSystemForce.h	/^				     TSwitchingFunction>::evaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
evaluate	framework/forces/NonbondedFullSystemForce.h	/^    virtual void evaluate(const GenericTopology* to, $/;"	f	class:ProtoMol::NonbondedFullSystemForce
evaluate	framework/forces/NonbondedMultiGridSystemForce.h	/^				     smooth>::evaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
evaluate	framework/forces/NonbondedPMEwaldSystemForce.h	/^				   TSwitchingFunction>::evaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
evaluate	framework/forces/NonbondedSimpleFullSystemForce.h	/^    virtual void evaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedSimpleFullSystemForce
evaluate	framework/forces/PaulTrapExtendedForce.h	/^  inline void PaulTrapExtendedForce<TBoundaryConditions>::evaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::PaulTrapExtendedForce
evaluate	framework/forces/SphericalSystemForce.h	/^  inline void SphericalSystemForce::evaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::SphericalSystemForce
evaluate	framework/forces/SystemCompareForce.cpp	/^  void SystemCompareForce::evaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::SystemCompareForce
evaluate	framework/forces/SystemTimeForce.cpp	/^  void SystemTimeForce::evaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::SystemTimeForce
evaluate	framework/imd/HapticSystemForce.cpp	/^  void HapticSystemForce::evaluate (const GenericTopology* topo,$/;"	f	class:ProtoMol::HapticSystemForce
evaluateExtendedForces	framework/forces/ForceGroup.cpp	/^  void ForceGroup::evaluateExtendedForces(GenericTopology* topo, $/;"	f	class:ProtoMol::ForceGroup
evaluateMollyForces	framework/forces/ForceGroup.cpp	/^  void ForceGroup::evaluateMollyForces(GenericTopology* topo, $/;"	f	class:ProtoMol::ForceGroup
evaluateSystemForces	framework/forces/ForceGroup.cpp	/^  void ForceGroup::evaluateSystemForces(GenericTopology* topo, $/;"	f	class:ProtoMol::ForceGroup
exchange	tools/rem/sequential/replica.cc	/^void Replica::exchange(Replica other) {$/;"	f	class:Replica
excl	framework/topology/ExclusionTable.h	/^    ExclusionClass excl;$/;"	m	struct:ProtoMol::ExclusionPair
exclude	framework/topology/GenericTopology.h	/^    ExclusionType  exclude;$/;"	m	class:ProtoMol::GenericTopology
exclusions	framework/topology/GenericTopology.h	/^    ExclusionTable exclusions;$/;"	m	class:ProtoMol::GenericTopology
execute	framework/integrators/Modifier.h	/^    void execute(){$/;"	f	class:ProtoMol::Modifier
expfactor	framework/forces/MagneticDipoleForce.h	/^    Real volum, expfactor, realChi, kappa;$/;"	m	class:ProtoMol::MagneticDipoleForce
expn	framework/base/LookUpTableBase.h	/^    static int expn(Real a){$/;"	f	class:ProtoMol::LookUpTableBase
f	framework/base/LookUpTableBase.h	/^    typedef union { TReal f; TInt i; } Conv;$/;"	m	union:ProtoMol::LookUpTableBase::<anonymous>
f	framework/base/Report.cpp	/^    MyStreamer&  MyStreamer::operator<< (ostream& (*f)(ostream&)) {$/;"	f	class:ProtoMol::Report::MyStreamer
f	framework/base/Report.cpp	/^    MyStreamer&  MyStreamer::operator<< (std::ios& (*f)(std::ios&)) {$/;"	f	class:ProtoMol::Report::MyStreamer
f	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (MyStreamer& (*f)(MyStreamer&)){$/;"	f	class:ProtoMol::Report::MyStreamer
faces	compilerTests/glutTest.cpp	/^static GLint faces[6][4] = {  \/* Vertex indices for the 6 faces of a cube. *\/$/;"	v	file:
fact	framework/base/mathutilities.h	/^  inline int fact(int n){$/;"	f	namespace:ProtoMol
fftBack	framework/base/Grid.h	/^    void fftBack(){myFFT.backward();}$/;"	f	class:ProtoMol::Grid
fftForward	framework/base/Grid.h	/^    void fftForward(){myFFT.forward();}$/;"	f	class:ProtoMol::Grid
fftcoeff_	framework/base/fft.c	/^void fftcoeff_(int *n,zomplex * coeff)$/;"	f
fftfact_	framework/base/fft.c	/^void fftfact_(int *n,int *nf,int *f)$/;"	f
fill_header	framework/imd/imd.cpp	/^    static void fill_header(IMDheader *header, IMDType type, int32 length) {$/;"	f	namespace:ProtoMol::IMD	file:
finalize	framework/frontend/Output.cpp	/^  void Output::finalize(int step){$/;"	f	class:ProtoMol::Output
finalize	framework/frontend/OutputCollection.cpp	/^  void OutputCollection::finalize(int step){$/;"	f	class:ProtoMol::OutputCollection
finalize	framework/parallel/Parallel-FD.cpp	/^  void Parallel::finalize(){$/;"	f	class:ProtoMol::Parallel
finalize	framework/parallel/Parallel.cpp	/^  void Parallel::finalize(){$/;"	f	class:ProtoMol::Parallel
finalized	framework/parallel/Parallel.h	/^    static bool finalized()            {return myFinalized;}$/;"	f	class:ProtoMol::Parallel
find	framework/base/Configuration.cpp	/^  Configuration::const_iterator Configuration::find(const string& keyword) const{$/;"	f	class:ProtoMol::Configuration
find	framework/base/Configuration.cpp	/^  Configuration::iterator Configuration::find(const string& keyword){$/;"	f	class:ProtoMol::Configuration
find	framework/frontend/Factory.h	/^    static const Type* find(const std::string& id){$/;"	f	class:ProtoMol::Factory
find	framework/topology/ArrayCellListStructure.h	/^    const_iterator find(const T1& t1) const {$/;"	f	class:ProtoMol::ArrayCellListStructure
find	framework/topology/ArrayCellListStructure.h	/^    iterator find(const T1& t1) {$/;"	f	class:ProtoMol::ArrayCellListStructure
findCell	framework/topology/CubicCellManager.h	/^    Cell findCell(const Vector3D &position) const {$/;"	f	class:ProtoMol::CubicCellManager
findNextNeighbor	framework/frontend/buildTopology.cpp	/^    void findNextNeighbor(int a, vector<int>& v, vector<PairInt>& p, vector<char>& unused, $/;"	f	namespace:ProtoMol
findPeriodic	framework/topology/ArrayCellListStructure.h	/^    const_iterator findPeriodic(const T1& t1) const{$/;"	f	class:ProtoMol::ArrayCellListStructure
findPeriodic	framework/topology/ArrayCellListStructure.h	/^    iterator findPeriodic(const T1& t1) {$/;"	f	class:ProtoMol::ArrayCellListStructure
find_free_port	framework/imd/IMDElf.cpp	/^  int IMDElf::find_free_port(void *sock, int defport) {$/;"	f	class:ProtoMol::IMDElf
fineToCoarse	framework/base/MultiGrid.h	/^    void fineToCoarse(int level){fineToCoarse(level,0,1);}$/;"	f	class:ProtoMol::MultiGrid
fineToCoarse	framework/base/MultiGrid.h	/^  inline void MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::fineToCoarse(int level, unsigned int block, unsigned int nBlocks){$/;"	f	class:ProtoMol::MultiGrid
first	framework/base/simpleTypes.h	/^    unsigned int first,second;$/;"	m	struct:ProtoMol::PairIntSorted
first	framework/frontend/Output.h	/^    bool first() const {return myFirst;}$/;"	f	class:ProtoMol::Output
first	framework/parallel/Parallel-FD.cpp	/^  bool first = true;$/;"	v
first	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    struct CellPair {int first; int second;};$/;"	m	struct:ProtoMol::CellListEnumerator::CellPair
first	framework/topology/CellListEnumerator_standard.h	/^    struct CellPair {int first; int second;};$/;"	m	struct:ProtoMol::CellListEnumerator::CellPair
first_run	tools/rem/sequential/replica.h	/^  bool first_run;$/;"	m	class:Replica
fitplane	framework/base/Vector3DBlock.cpp	/^  bool Vector3DBlock::fitplane(Vector3D& normal, Real& d, Real& err, int limit) const{$/;"	f	class:ProtoMol::Vector3DBlock
fixDiffTable	framework/integrators/ModifierShadow.cpp	/^    void ModifierShadow::fixDiffTable() {$/;"	f	class:ProtoMol::ModifierShadow
flipcounts	framework/frontend/OutputDihedrals.h	/^    std::vector< std::vector< int > > flipcounts;$/;"	m	class:ProtoMol::OutputDihedrals
float4	framework/io/DCDTrajectoryReader.h	/^    typedef TypeSelection::Float<4>::type float4;$/;"	t	class:ProtoMol::DCDTrajectoryReader
float4	framework/io/DCDTrajectoryWriter.h	/^    typedef TypeSelection::Float<4>::type float4;$/;"	t	class:ProtoMol::DCDTrajectoryWriter
fluctuationLI	framework/integrators/LangevinImpulseIntegrator.cpp	/^  void LangevinImpulseIntegrator::fluctuationLI() {$/;"	f	class:ProtoMol::LangevinImpulseIntegrator
flushCache	framework/frontend/OutputFile.cpp	/^  void OutputFile::flushCache() {$/;"	f	class:ProtoMol::OutputFile
force	framework/parallel/Parallel-FD.cpp	/^  bool force = false;$/;"	v
forceConstant	framework/base/PAR.h	/^      Real forceConstant; \/\/\/< force constant$/;"	m	struct:ProtoMol::PAR::Angle
forceConstant	framework/base/PAR.h	/^      Real forceConstant; \/\/\/< force constant$/;"	m	struct:ProtoMol::PAR::Bond
forceConstant	framework/base/PAR.h	/^      Real forceConstant; \/\/\/< force constant$/;"	m	struct:ProtoMol::PAR::Improper
forceConstant	framework/base/PAR.h	/^      std::vector< Real > forceConstant;  \/\/\/< force constant$/;"	m	struct:ProtoMol::PAR::Dihedral
forceConstant	framework/topology/Angle.h	/^    Real forceConstant;$/;"	m	class:ProtoMol::Angle
forceConstant	framework/topology/Torsion.h	/^    std::vector< Real > forceConstant; \/\/\/< The force constant ($k$ value) for this interaction.  $/;"	m	class:ProtoMol::Torsion
forces	framework/forces/OneAtomPair.h	/^    Vector3DBlock* forces;$/;"	m	class:ProtoMol::OneAtomPair
forces	framework/forces/OneAtomPairFull.h	/^    Vector3DBlock* forces;$/;"	m	class:ProtoMol::OneAtomPairFull
forces	framework/forces/OneAtomPairTwo.h	/^    Vector3DBlock* forces;$/;"	m	class:ProtoMol::OneAtomPairTwo
forces	framework/forces/OneAtomPairTwoFull.h	/^    Vector3DBlock* forces;$/;"	m	class:ProtoMol::OneAtomPairTwoFull
forces	framework/frontend/IntegratorFactoryDetails.h	/^      std::vector<std::string> forces;$/;"	m	struct:ProtoMol::IntegratorFactoryDetails::IntegratorInput
forces	framework/integrators/IntegratorDefinition.h	/^    std::vector<MakeableDefinition> forces;$/;"	m	struct:ProtoMol::IntegratorDefinition
forward	framework/base/FFTComplex.cpp	/^    void forward() {zfft3d( 1,myNZ,myNY,myNX,myArray,myNZ,myNY,myFFTCoeff);}$/;"	f	class:ProtoMol::FFTInternal
forward	framework/base/FFTComplex.cpp	/^  void FFTComplex::forward(){$/;"	f	class:ProtoMol::FFTComplex
forward	framework/integrators/Integrator.cpp	/^  void Integrator::forward(){$/;"	f	class:ProtoMol::Integrator
friction	framework/integrators/NoseNVTLeapfrogIntegrator.cpp	/^  void NoseNVTLeapfrogIntegrator::friction() {$/;"	f	class:ProtoMol::NoseNVTLeapfrogIntegrator
front	framework/base/Vector3DBlock.h	/^    const_reference front() const                                {return vec.front();}              $/;"	f	class:ProtoMol::Vector3DBlock
front	framework/base/Vector3DBlock.h	/^    reference front()                                            {return vec.front();}$/;"	f	class:ProtoMol::Vector3DBlock
gather	framework/parallel/Parallel-FD.cpp	/^  void Parallel::gather(Real *data, int num, Real *data_array, int address) {$/;"	f	class:ProtoMol::Parallel
gather	framework/parallel/Parallel-FD.cpp	/^  void Parallel::gather(Real*, int, Real*, int ) {}$/;"	f	class:ProtoMol::Parallel
gather	framework/parallel/Parallel.cpp	/^  void Parallel::gather(Real *data, int num, Real *data_array, int address) {$/;"	f	class:ProtoMol::Parallel
gather	framework/parallel/Parallel.cpp	/^  void Parallel::gather(Real*, int, Real*, int ) {}$/;"	f	class:ProtoMol::Parallel
gcd_	framework/base/fft.c	/^int gcd_(int* n1,int* n2)$/;"	f
general_rotation	framework/topology/topologyutilities.cpp	/^  void general_rotation(unsigned int innerAtom1, unsigned int innerAtom2, Vector3DBlock *positions, Vector3DBlock *velocities,vector<AngleInfo> *angles) {$/;"	f	namespace:ProtoMol
general_rotation	framework/topology/topologyutilities.cpp	/^  void general_rotation(unsigned int innerAtom1, unsigned int innerAtom2, Vector3DBlock *positions, vector<AngleInfo> *angles) {$/;"	f	namespace:ProtoMol
get	compilerTests/pngTest.cpp	/^  unsigned char get(unsigned int i, unsigned int j) const {return (p[(h-i-1)*w*3+j*3]+p[(h-i-1)*w*3+j*3+1]+p[(h-i-1)*w*3+j*3+2])\/3;}$/;"	f	class:PPM
get	framework/base/Configuration.cpp	/^  Value Configuration::get(const string& keyword) const{$/;"	f	class:ProtoMol::Configuration
get	framework/base/Configuration.cpp	/^  vector<Value> Configuration::get(const vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::Configuration
get	framework/base/PGM.h	/^    unsigned char get(unsigned int x, unsigned int y) const {return p[(h-y-1)*w+x];}$/;"	f	class:ProtoMol::PGM
get	framework/base/PPM.h	/^    unsigned char get(unsigned int x, unsigned int y) const {return (p[(h-y-1)*w*3+x*3]+p[(h-y-1)*w*3+x*3+1]+p[(h-y-1)*w*3+x*3+2])\/3;}$/;"	f	class:ProtoMol::PPM
get	framework/base/Value.h	/^      virtual bool get(Real & v) const              { return (ValueTraits<Real>::convert(holder,v) && ok);}$/;"	f	class:ProtoMol::Value::Holder
get	framework/base/Value.h	/^      virtual bool get(Vector3D & v) const          { return (ValueTraits<Vector3D>::convert(holder,v) && ok);}$/;"	f	class:ProtoMol::Value::Holder
get	framework/base/Value.h	/^      virtual bool get(bool & v) const              { return (ValueTraits<bool>::convert(holder,v) && ok);}$/;"	f	class:ProtoMol::Value::Holder
get	framework/base/Value.h	/^      virtual bool get(int & v) const               { return (ValueTraits<int>::convert(holder,v) && ok);}$/;"	f	class:ProtoMol::Value::Holder
get	framework/base/Value.h	/^      virtual bool get(std::string & v) const       { return (ValueTraits<std::string>::convert(holder,v) && ok);}$/;"	f	class:ProtoMol::Value::Holder
get	framework/base/Value.h	/^      virtual bool get(std::vector<Real> & v) const { return (ValueTraits<std::vector<Real> >::convert(holder,v) && ok);}$/;"	f	class:ProtoMol::Value::Holder
get	framework/base/Value.h	/^      virtual bool get(unsigned int & v) const      { return (ValueTraits<unsigned int>::convert(holder,v) && ok);}$/;"	f	class:ProtoMol::Value::Holder
get	framework/base/Value.h	/^    T get() const{$/;"	f	class:ProtoMol::Value
get	framework/base/Value.h	/^    bool get(T& value) const{$/;"	f	class:ProtoMol::Value
get	framework/frontend/InputValue.h	/^    bool get(T& val) const {return myValue.get(val); }$/;"	f	class:ProtoMol::InputValue
get	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    void get(CellPair &cp) {cp.first=i->second; cp.second=j->second; }$/;"	f	class:ProtoMol::CellListEnumerator
get	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    void get(int &a,int &b) {a=i->second; b=j->second; }$/;"	f	class:ProtoMol::CellListEnumerator
get	framework/topology/CellListEnumerator_standard.h	/^    void get(CellPair &cp) {cp.first=i->second; cp.second=j->second; }$/;"	f	class:ProtoMol::CellListEnumerator
get	framework/topology/CellListEnumerator_standard.h	/^    void get(int &a,int &b) {a=i->second; b=j->second; }$/;"	f	class:ProtoMol::CellListEnumerator
getActualTime	framework/base/Timer.cpp	/^  TimeRep Timer::getActualTime() const$/;"	f	class:ProtoMol::Timer
getAlias	framework/base/Makeable.cpp	/^  string Makeable::getAlias() const{$/;"	f	class:ProtoMol::Makeable
getAliases	framework/base/Configuration.cpp	/^  vector<string> Configuration::getAliases(const string& keyword) const{$/;"	f	class:ProtoMol::Configuration
getAngle	framework/topology/AngleInfo.cpp	/^  Real AngleInfo::getAngle()const {$/;"	f	class:ProtoMol::AngleInfo
getAngleType	framework/topology/AngleInfo.cpp	/^  AngleInfo::AngleType AngleInfo::getAngleType()const {$/;"	f	class:ProtoMol::AngleInfo
getAtomID	framework/topology/AngleInfo.cpp	/^  unsigned int AngleInfo::getAtomID() const{$/;"	f	class:ProtoMol::AngleInfo
getAtomsBondedtoDihedral	framework/topology/topologyutilities.cpp	/^  void  getAtomsBondedtoDihedral(const GenericTopology* topology,$/;"	f	namespace:ProtoMol
getAutofit	framework/io/XFigWriter.h	/^    bool getAutofit() const {return myAutofit;}$/;"	f	class:ProtoMol::XFigWriter
getAvailableId	framework/parallel/Parallel.h	/^    static int  getAvailableId()       {return myAvailableId;}$/;"	f	class:ProtoMol::Parallel
getAvailableNum	framework/parallel/Parallel.h	/^    static int  getAvailableNum()      {return myAvailableNum;}$/;"	f	class:ProtoMol::Parallel
getAve	framework/base/mathutilities.h	/^  inline Real WindowAve::getAve() { return( data.size() > 0 ? sumItems \/$/;"	f	class:ProtoMol::WindowAve
getAxes	framework/io/XFigWriter.h	/^    bool getAxes() const {return myAxes;}$/;"	f	class:ProtoMol::XFigWriter
getBegin	framework/base/stringutilities.cpp	/^  string getBegin(const string& s,string::size_type n){$/;"	f	namespace:ProtoMol
getBlue	framework/base/PGM.h	/^    unsigned char getBlue(unsigned int x, unsigned int y) const {return p[(h-y-1)*w+x];}$/;"	f	class:ProtoMol::PGM
getBlue	framework/base/PPM.h	/^    unsigned char getBlue(unsigned int x, unsigned int y) const {return p[(h-y-1)*w*3+x*3+2];}$/;"	f	class:ProtoMol::PPM
getBond	framework/topology/AngleInfo.cpp	/^  unsigned int AngleInfo::getBond(unsigned int index) const{$/;"	f	class:ProtoMol::AngleInfo
getBottomTimestep	framework/integrators/Integrator.h	/^  inline Real Integrator::getBottomTimestep() const{$/;"	f	class:ProtoMol::Integrator
getBoundaryConditionsBox	framework/topology/SemiGenericTopology.h	/^    virtual void getBoundaryConditionsBox(Vector3D& minbb,  Vector3D& maxbb) const{$/;"	f	class:ProtoMol::SemiGenericTopology
getBoundingbox	framework/topology/SemiGenericTopology.h	/^    virtual void getBoundingbox(const Vector3DBlock& positions, Vector3D& minbb,  Vector3D& maxbb) const{$/;"	f	class:ProtoMol::SemiGenericTopology
getCRD	framework/io/CRDReader.cpp	/^  Vector3DBlock CRDReader::getCRD() const{$/;"	f	class:ProtoMol::CRDReader
getCellSize	framework/topology/CubicCellManager.h	/^    Real getCellSize(void) const {return myCellSize;}$/;"	f	class:ProtoMol::CubicCellManager
getCellVolume	framework/topology/CubicCellManager.h	/^    Real getCellVolume(void) const {return myRealCellSize.x*myRealCellSize.y*myRealCellSize.z;}$/;"	f	class:ProtoMol::CubicCellManager
getCharmmType	framework/io/PARWriter.cpp	/^  PAR::CharmmTypeEnum PARWriter::getCharmmType() const{$/;"	f	class:ProtoMol::PARWriter
getCharmmTypeDetected	framework/io/PARReader.h	/^  inline PAR::CharmmTypeEnum PARReader::getCharmmTypeDetected() const{$/;"	f	class:ProtoMol::PARReader
getColor	framework/io/XFigWriter.h	/^    bool getColor() const {return myColor;}$/;"	f	class:ProtoMol::XFigWriter
getComment	framework/io/Reader.cpp	/^  const string& Reader::getComment() const{$/;"	f	class:ProtoMol::Reader
getConstraintType	framework/base/Value.h	/^      virtual ConstraintValueType::Enum getConstraintType()const  {return (ConstraintValueType::Enum)Constraint::value;}$/;"	f	class:ProtoMol::Value::Holder
getConstraintType	framework/base/Value.h	/^  inline ConstraintValueType::Enum Value::getConstraintType() const {$/;"	f	class:ProtoMol::Value
getConstraintTypeString	framework/base/Value.h	/^      virtual const std::string & getConstraintTypeString() const { return ConstraintValueType::getString((ConstraintValueType::Enum)Constraint::value); }$/;"	f	class:ProtoMol::Value::Holder
getConstraintTypeString	framework/base/Value.h	/^  inline const std::string & Value::getConstraintTypeString() const {$/;"	f	class:ProtoMol::Value
getCounter	framework/base/Cycles.h	/^    static ticks getCounter(){return Private::getticks();}$/;"	f	class:ProtoMol::Cycles
getCounter	framework/base/MultiGrid.h	/^    long getCounter(){return (myCounterDirect + myCounterCorrection);}$/;"	f	class:ProtoMol::MultiGrid
getCurrentTime	framework/base/Timer.cpp	/^  TimeRep Timer::getCurrentTime()$/;"	f	class:ProtoMol::Timer
getCycles	framework/base/Cycles.h	/^    double getCycles() const{return elapsed(myEndTime,myStartTime);}$/;"	f	class:ProtoMol::Cycles
getDeepForces	framework/forces/WrapperMetaForce.cpp	/^  void WrapperMetaForce::getDeepForces(vector<Force*>& forces) const{$/;"	f	class:ProtoMol::WrapperMetaForce
getDeepMetaForces	framework/forces/ForceGroup.cpp	/^  vector<Force*> ForceGroup::getDeepMetaForces() const{$/;"	f	class:ProtoMol::ForceGroup
getDefaults	framework/topology/PeriodicBoundaryConditions.cpp	/^  vector<Parameter> PeriodicBoundaryConditions::getDefaults(const Vector3DBlock& positions) const{$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
getDefaults	framework/topology/SemiGenericTopology.h	/^    virtual std::vector<Parameter> getDefaults(const Vector3DBlock& positions) const{ return boundaryConditions.getDefaults(positions);}$/;"	f	class:ProtoMol::SemiGenericTopology
getDefaults	framework/topology/VacuumBoundaryConditions.h	/^    std::vector<Parameter> getDefaults(const Vector3DBlock&) const{ return std::vector<Parameter>();}$/;"	f	class:ProtoMol::VacuumBoundaryConditions
getDefinition	framework/base/Makeable.cpp	/^  MakeableDefinition Makeable::getDefinition() const{$/;"	f	class:ProtoMol::Makeable
getDefinition	framework/forces/ForceGroup.cpp	/^  void ForceGroup::getDefinition(vector<MakeableDefinition>& forces) const{$/;"	f	class:ProtoMol::ForceGroup
getDefinitionTypeString	framework/base/Value.cpp	/^  string Value::getDefinitionTypeString() const{$/;"	f	class:ProtoMol::Value
getDihedral	tools/rem/sequential/replica.cc	/^double Replica::getDihedral(int dihedralIndex) const {$/;"	f	class:Replica
getDimX	framework/topology/ArrayCellListStructure.h	/^    int getDimX() const{ return myNX;}$/;"	f	class:ProtoMol::ArrayCellListStructure
getDimY	framework/topology/ArrayCellListStructure.h	/^    int getDimY() const{ return myNY;}$/;"	f	class:ProtoMol::ArrayCellListStructure
getDimZ	framework/topology/ArrayCellListStructure.h	/^    int getDimZ() const{ return myNZ;}$/;"	f	class:ProtoMol::ArrayCellListStructure
getDirectory	tools/rem/sequential/replica.cc	/^string Replica::getDirectory() {$/;"	f	class:Replica
getElement	framework/base/Stack.h	/^  T Stack<T>::getElement(unsigned int index) {$/;"	f	class:ProtoMol::Stack
getEnd	framework/base/stringutilities.cpp	/^  string getEnd(const string& s,string::size_type n){$/;"	f	namespace:ProtoMol
getEnergies	framework/forces/CompareForce.h	/^    const ScalarStructure* getEnergies() const{return myEnergies;}$/;"	f	class:ProtoMol::CompareForce
getEnergy	framework/forces/CoulombEwaldRealForce.h	/^    static Real getEnergy(const ScalarStructure* energies) {return  (*energies)[ScalarStructure::COULOMB];}$/;"	f	class:ProtoMol::CoulombEwaldRealForce
getEnergy	framework/forces/CoulombEwaldRealTableForce.h	/^    static Real getEnergy(const ScalarStructure* energies) {return  (*energies)[ScalarStructure::COULOMB];}$/;"	f	class:ProtoMol::CoulombEwaldRealTableForce
getEnergy	framework/forces/CoulombForce.h	/^    static Real getEnergy(const ScalarStructure* energies) {return  (*energies)[ScalarStructure::COULOMB];}$/;"	f	class:ProtoMol::CoulombForce
getEnergy	framework/forces/CoulombMultiGridDirectForce.h	/^    static Real getEnergy(const ScalarStructure* energies) {return  (*energies)[ScalarStructure::COULOMB];}$/;"	f	class:ProtoMol::CoulombMultiGridDirectForce
getEnergy	framework/forces/CoulombMultiGridDirectTableForce.h	/^    static Real getEnergy(const ScalarStructure* energies) {return  (*energies)[ScalarStructure::COULOMB];}$/;"	f	class:ProtoMol::CoulombMultiGridDirectTableForce
getEnergy	framework/forces/CoulombTableForce.h	/^    static Real getEnergy(const ScalarStructure* energies) {return  (*energies)[ScalarStructure::COULOMB];}$/;"	f	class:ProtoMol::CoulombTableForce
getEnergy	framework/forces/GravitationForce.h	/^    static Real getEnergy(const ScalarStructure* energies) {return (*energies)[ScalarStructure::OTHER];}$/;"	f	class:ProtoMol::GravitationForce
getEnergy	framework/forces/LennardJonesForce.h	/^    static Real getEnergy(const ScalarStructure* energies) {return  (*energies)[ScalarStructure::LENNARDJONES];}  $/;"	f	class:ProtoMol::LennardJonesForce
getEnergy	framework/forces/LennardJonesTableForce.h	/^    static Real getEnergy(const ScalarStructure* energies) {return  (*energies)[ScalarStructure::LENNARDJONES];}$/;"	f	class:ProtoMol::LennardJonesTableForce
getEnergy	framework/forces/MagneticDipoleForce.h	/^    static Real getEnergy(const ScalarStructure* energies) {return (*energies)[ScalarStructure::OTHER];}$/;"	f	class:ProtoMol::MagneticDipoleForce
getEnum	framework/base/AbstractEnumType.h	/^    Enum getEnum() const {return myType;}$/;"	f	class:ProtoMol::AbstractEnumType
getEnum	framework/base/AbstractEnumType.h	/^  typename AbstractEnumType<T, noCase>::Enum AbstractEnumType<T, noCase>::getEnum(const std::string& s){$/;"	f	class:ProtoMol::AbstractEnumType
getEnum	framework/base/AbstractEnumType.h	/^  typename AbstractEnumType<T, noCase>::Enum AbstractEnumType<T, noCase>::getEnum(int n){$/;"	f	class:ProtoMol::AbstractEnumType
getEpsilonVel	framework/integrators/ModifierNPTRattle.h	/^    virtual Real getEpsilonVel() const{return myTheIntegrator->getEpsilonVel();}$/;"	f	class:ProtoMol::ModifierNPTRattle
getEpsilonVel	framework/integrators/ModifierNPTShake.h	/^    virtual Real getEpsilonVel() const{return myTheIntegrator->getEpsilonVel();}$/;"	f	class:ProtoMol::ModifierNPTShake
getEpsilonVel	framework/integrators/NPTVerletIntegrator.h	/^    Real getEpsilonVel() const {return myEpsilonVel;}$/;"	f	class:ProtoMol::NPTVerletIntegrator
getEtaVel	framework/integrators/ModifierNPTRattle.h	/^    virtual Real getEtaVel() const{return myTheIntegrator->getEtaVel();}$/;"	f	class:ProtoMol::ModifierNPTRattle
getEtaVel	framework/integrators/ModifierNPTShake.h	/^    virtual Real getEtaVel() const{return myTheIntegrator->getEtaVel();}$/;"	f	class:ProtoMol::ModifierNPTShake
getEtaVel	framework/integrators/ModifierNVTRattle.h	/^    virtual Real getEtaVel() const{return myTheIntegrator->getEtaVel();}$/;"	f	class:ProtoMol::ModifierNVTRattle
getEtaVel	framework/integrators/ModifierNVTShake.h	/^    virtual Real getEtaVel() const{return myTheIntegrator->getEtaVel();}$/;"	f	class:ProtoMol::ModifierNVTShake
getEtaVel	framework/integrators/NPTVerletIntegrator.h	/^    Real getEtaVel()     const {return myEtaVel;}$/;"	f	class:ProtoMol::NPTVerletIntegrator
getEtaVel	framework/integrators/NVTVerletIntegrator.h	/^    Real getEtaVel()     const {return myEtaVel;}$/;"	f	class:ProtoMol::NVTVerletIntegrator
getFilename	framework/io/File.h	/^  inline std::string File::getFilename() const{$/;"	f	class:ProtoMol::File
getFirstStep	framework/frontend/Output.h	/^    int getFirstStep() const {return myFirstStep;}$/;"	f	class:ProtoMol::Output
getForceGroup	framework/integrators/Integrator.h	/^    ForceGroup* getForceGroup() const{return myForcesToEvaluate;}$/;"	f	class:ProtoMol::Integrator
getForceKeyword	framework/forces/CoulombForce.h	/^      static std::string getForceKeyword()            {return CoulombForce::keyword;}    $/;"	f	class:ProtoMol::CoulombForce::C1
getForceKeyword	framework/forces/CoulombForce.h	/^      static std::string getForceKeyword()            {return CoulombForce::keyword;}    $/;"	f	class:ProtoMol::CoulombForce::C2
getForceKeyword	framework/forces/CoulombForce.h	/^      static std::string getForceKeyword()            {return CoulombForce::keyword;}    $/;"	f	class:ProtoMol::CoulombForce::C3
getForceKeyword	framework/forces/CoulombForce.h	/^      static std::string getForceKeyword()            {return CoulombForce::keyword;}    $/;"	f	class:ProtoMol::CoulombForce::C4
getForceObject	framework/forces/CompareForce.h	/^    Force* getForceObject() const{return myActualForce;}$/;"	f	class:ProtoMol::CompareForce
getForces	framework/forces/CompareForce.h	/^    const Vector3DBlock* getForces() const{return myForces;}$/;"	f	class:ProtoMol::CompareForce
getForces	framework/forces/ForceGroup.cpp	/^  vector<Force*> ForceGroup::getForces() const{$/;"	f	class:ProtoMol::ForceGroup
getForces	framework/integrators/Integrator.h	/^  inline Vector3DBlock* Integrator::getForces() const{$/;"	f	class:ProtoMol::Integrator
getFromZ	framework/io/XFigWriter.h	/^    Real getFromZ() const{return myFromZ;}$/;"	f	class:ProtoMol::XFigWriter
getGreen	framework/base/PGM.h	/^    unsigned char getGreen(unsigned int x, unsigned int y) const {return p[(h-y-1)*w+x];}$/;"	f	class:ProtoMol::PGM
getGreen	framework/base/PPM.h	/^    unsigned char getGreen(unsigned int x, unsigned int y) const {return p[(h-y-1)*w*3+x*3+1];}$/;"	f	class:ProtoMol::PPM
getId	framework/base/Makeable.cpp	/^  string Makeable::getId() const{$/;"	f	class:ProtoMol::Makeable
getId	framework/forces/CoulombEwaldRealForce.h	/^    static std::string getId() {return keyword;}$/;"	f	class:ProtoMol::CoulombEwaldRealForce
getId	framework/forces/CoulombEwaldRealTableForce.h	/^    static std::string getId() {$/;"	f	class:ProtoMol::CoulombEwaldRealTableForce
getId	framework/forces/CoulombForce.h	/^    static std::string getId() {return keyword;}$/;"	f	class:ProtoMol::CoulombForce
getId	framework/forces/CoulombMultiGridDirectForce.h	/^    static std::string getId() {return keyword+" -kernel "+TKernel::keyword;}$/;"	f	class:ProtoMol::CoulombMultiGridDirectForce
getId	framework/forces/CoulombMultiGridDirectTableForce.h	/^    static std::string getId() {$/;"	f	class:ProtoMol::CoulombMultiGridDirectTableForce
getId	framework/forces/CoulombTableForce.h	/^    static std::string getId() {$/;"	f	class:ProtoMol::CoulombTableForce
getId	framework/forces/GravitationForce.h	/^    static std::string getId() {return keyword;}$/;"	f	class:ProtoMol::GravitationForce
getId	framework/forces/LennardJonesForce.h	/^    static std::string getId() {return keyword;}$/;"	f	class:ProtoMol::LennardJonesForce
getId	framework/forces/LennardJonesTableForce.h	/^    static std::string getId() {$/;"	f	class:ProtoMol::LennardJonesTableForce
getId	framework/forces/MagneticDipoleForce.h	/^    static std::string getId() {return keyword;}$/;"	f	class:ProtoMol::MagneticDipoleForce
getId	framework/forces/OneAtomPair.h	/^    static std::string getId() {$/;"	f	class:ProtoMol::OneAtomPair
getId	framework/forces/OneAtomPairFull.h	/^    static std::string getId() {$/;"	f	class:ProtoMol::OneAtomPairFull
getId	framework/forces/OneAtomPairTwo.h	/^    static std::string getId() {$/;"	f	class:ProtoMol::OneAtomPairTwo
getId	framework/forces/OneAtomPairTwoFull.h	/^    static std::string getId() {$/;"	f	class:ProtoMol::OneAtomPairTwoFull
getId	framework/forces/OneMollyPair.h	/^    static std::string getId() {$/;"	f	class:ProtoMol::OneMollyPair
getId	framework/forces/OneMollyPairTwo.h	/^    static std::string getId() {$/;"	f	class:ProtoMol::OneMollyPairTwo
getId	framework/parallel/Parallel.h	/^    static int  getId()                {return myId;}$/;"	f	class:ProtoMol::Parallel
getId	framework/topology/C1SwitchingFunction.h	/^    static const std::string& getId() {return keyword;}$/;"	f	class:ProtoMol::C1SwitchingFunction
getId	framework/topology/C2SwitchingFunction.h	/^    static const std::string& getId() {return keyword;}$/;"	f	class:ProtoMol::C2SwitchingFunction
getId	framework/topology/CmpCnCnSwitchingFunction.h	/^    static const std::string& getId() {return keyword;}$/;"	f	class:ProtoMol::CmpCnCnSwitchingFunction
getId	framework/topology/CnSwitchingFunction.h	/^    static const std::string& getId() {return keyword;}$/;"	f	class:ProtoMol::CnSwitchingFunction
getId	framework/topology/ComplementSwitchingFunction.h	/^    static std::string getId()  {return (keyword + TOriginalSwitchingFunction::getId());}$/;"	f	class:ProtoMol::ComplementSwitchingFunction
getId	framework/topology/CutoffSwitchingFunction.h	/^    static const std::string& getId() {return keyword;}$/;"	f	class:ProtoMol::CutoffSwitchingFunction
getId	framework/topology/RangeSwitchingFunction.h	/^    static std::string getId() {return (keyword + TOriginalSwitchingFunction::getId());}$/;"	f	class:ProtoMol::RangeSwitchingFunction
getId	framework/topology/ShiftSwitchingFunction.h	/^    static const std::string& getId() {return keyword;}$/;"	f	class:ProtoMol::ShiftSwitchingFunction
getId	framework/topology/UniversalSwitchingFunction.h	/^    static const std::string& getId() {return keyword;}$/;"	f	class:ProtoMol::UniversalSwitchingFunction
getIdNoAlias	framework/forces/AngleSystemForce.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::AngleSystemForce
getIdNoAlias	framework/forces/BondSystemForce.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::BondSystemForce
getIdNoAlias	framework/forces/CompareForce.cpp	/^  string CompareForce::getIdNoAlias() const{$/;"	f	class:ProtoMol::CompareForce
getIdNoAlias	framework/forces/DihedralSystemForce.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::DihedralSystemForce
getIdNoAlias	framework/forces/ElectricFieldSystemForce.h	/^    virtual std::string getIdNoAlias() const{$/;"	f	class:ProtoMol::ElectricFieldSystemForce
getIdNoAlias	framework/forces/ExternalGravitationSystemForce.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::ExternalGravitationSystemForce
getIdNoAlias	framework/forces/ExternalMagneticFieldExtendedForce.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::ExternalMagneticFieldExtendedForce
getIdNoAlias	framework/forces/FrictionExtendedForce.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::FrictionExtendedForce
getIdNoAlias	framework/forces/HarmDihedralSystemForce.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::HarmDihedralSystemForce
getIdNoAlias	framework/forces/ImproperSystemForce.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::ImproperSystemForce
getIdNoAlias	framework/forces/MagneticDipoleMirrorSystemForce.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::MagneticDipoleMirrorSystemForce
getIdNoAlias	framework/forces/NonbondedCutoffForce.h	/^  std::string NonbondedCutoffForce<TCellManager,TOneAtomPair,TForce,TImplForce>::getIdNoAlias() const{$/;"	f	class:ProtoMol::NonbondedCutoffForce
getIdNoAlias	framework/forces/NonbondedFullEwaldSystemForce.h	/^					    TSwitchingFunction>::getIdNoAlias() const{$/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
getIdNoAlias	framework/forces/NonbondedFullSystemForce.h	/^    virtual std::string getIdNoAlias() const {return (TOneAtomPair::getId()+ " -algorithm " + keyword);}$/;"	f	class:ProtoMol::NonbondedFullSystemForce
getIdNoAlias	framework/forces/NonbondedMultiGridSystemForce.h	/^					    smooth>::getIdNoAlias() const{$/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
getIdNoAlias	framework/forces/NonbondedPMEwaldSystemForce.h	/^					  real,reciprocal,correction,TInterpolation,TSwitchingFunction>::getIdNoAlias() const{$/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
getIdNoAlias	framework/forces/NonbondedSimpleFullSystemForce.h	/^    virtual std::string getIdNoAlias() const {$/;"	f	class:ProtoMol::NonbondedSimpleFullSystemForce
getIdNoAlias	framework/forces/PaulTrapExtendedForce.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::PaulTrapExtendedForce
getIdNoAlias	framework/forces/SphericalSystemForce.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::SphericalSystemForce
getIdNoAlias	framework/forces/TimeForce.cpp	/^  string TimeForce::getIdNoAlias() const{$/;"	f	class:ProtoMol::TimeForce
getIdNoAlias	framework/forces/WrapperMetaForce.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::WrapperMetaForce
getIdNoAlias	framework/frontend/OutputBSDL.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputBSDL
getIdNoAlias	framework/frontend/OutputDCDTrajectory.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputDCDTrajectory
getIdNoAlias	framework/frontend/OutputDiffusion.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputDiffusion
getIdNoAlias	framework/frontend/OutputDihedrals.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputDihedrals
getIdNoAlias	framework/frontend/OutputEnergies.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputEnergies
getIdNoAlias	framework/frontend/OutputFinalPDBPos.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputFinalPDBPos
getIdNoAlias	framework/frontend/OutputFinalXYZBinPos.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputFinalXYZBinPos
getIdNoAlias	framework/frontend/OutputFinalXYZBinVel.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputFinalXYZBinVel
getIdNoAlias	framework/frontend/OutputFinalXYZPos.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputFinalXYZPos
getIdNoAlias	framework/frontend/OutputFinalXYZVel.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputFinalXYZVel
getIdNoAlias	framework/frontend/OutputMomentum.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputMomentum
getIdNoAlias	framework/frontend/OutputPDBFramePos.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputPDBFramePos
getIdNoAlias	framework/frontend/OutputPaulTrap.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputPaulTrap
getIdNoAlias	framework/frontend/OutputREMExchangeRate.h	/^    virtual std::string getIdNoAlias() const { return keyword; }$/;"	f	class:ProtoMol::OutputREMExchangeRate
getIdNoAlias	framework/frontend/OutputREMHistory.h	/^    virtual std::string getIdNoAlias() const { return keyword; }$/;"	f	class:ProtoMol::OutputREMHistoryFile
getIdNoAlias	framework/frontend/OutputScreen.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputScreen
getIdNoAlias	framework/frontend/OutputState.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputState
getIdNoAlias	framework/frontend/OutputTemperatures.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputTemperatures
getIdNoAlias	framework/frontend/OutputXYZBinTrajectoryPos.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryPos
getIdNoAlias	framework/frontend/OutputXYZBinTrajectoryVel.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryVel
getIdNoAlias	framework/frontend/OutputXYZTrajectoryForce.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputXYZTrajectoryForce
getIdNoAlias	framework/frontend/OutputXYZTrajectoryPos.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputXYZTrajectoryPos
getIdNoAlias	framework/frontend/OutputXYZTrajectoryVel.h	/^    virtual std::string getIdNoAlias() const{ return keyword;}$/;"	f	class:ProtoMol::OutputXYZTrajectoryVel
getIdNoAlias	framework/imd/HapticSystemForce.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::HapticSystemForce
getIdNoAlias	framework/integrators/BBKIntegrator.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::BBKIntegrator
getIdNoAlias	framework/integrators/BSplineMOLLYIntegrator.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
getIdNoAlias	framework/integrators/DLMCIntegrator.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::DLMCIntegrator
getIdNoAlias	framework/integrators/DMDLeapfrogIntegrator.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::DMDLeapfrogIntegrator
getIdNoAlias	framework/integrators/DihedralHMCIntegrator.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::DihedralHMCIntegrator
getIdNoAlias	framework/integrators/EquilibriumMOLLYIntegrator.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::EquilibriumMOLLYIntegrator
getIdNoAlias	framework/integrators/HMCIntegrator.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::HMCIntegrator
getIdNoAlias	framework/integrators/ImpulseIntegrator.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::ImpulseIntegrator
getIdNoAlias	framework/integrators/LangevinImpulseIntegrator.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::LangevinImpulseIntegrator
getIdNoAlias	framework/integrators/LeapfrogIntegrator.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::LeapfrogIntegrator
getIdNoAlias	framework/integrators/NPTVerletIntegrator.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::NPTVerletIntegrator
getIdNoAlias	framework/integrators/NVTVerletIntegrator.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::NVTVerletIntegrator
getIdNoAlias	framework/integrators/NoseNVTLeapfrogIntegrator.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::NoseNVTLeapfrogIntegrator
getIdNoAlias	framework/integrators/PLeapfrogIntegrator.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::PLeapfrogIntegrator
getIdNoAlias	framework/integrators/PaulTrapIntegrator.h	/^    virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::PaulTrapIntegrator
getIdNoAlias	framework/integrators/ShadowHMCIntegrator.h	/^            virtual std::string getIdNoAlias() const{return keyword;}$/;"	f	class:ProtoMol::ShadowHMCIntegrator
getIdNoAlias	framework/topology/Topology.h	/^    virtual std::string getIdNoAlias() const {return std::string(TBoundaryConditions::keyword+TCellManager::keyword);}$/;"	f	class:ProtoMol::Topology
getIdNumber	framework/forces/CompareForce.h	/^    unsigned int getIdNumber() const{return myIdNumber;}$/;"	f	class:ProtoMol::CompareForce
getIdNumber	framework/forces/TimeForce.h	/^    unsigned int getIdNumber() const{return myIdNumber;}$/;"	f	class:ProtoMol::TimeForce
getIdentity	framework/base/Matrix3by3.h	/^  inline const Matrix3by3& Matrix3by3::getIdentity()$/;"	f	class:ProtoMol::Matrix3by3
getInitialTemperature	framework/integrators/MCIntegrator.h	/^    Real getInitialTemperature() const { return myInitialTemperature; }$/;"	f	class:ProtoMol::MCIntegrator
getIntegratorDefinition	framework/integrators/Integrator.cpp	/^  IntegratorDefinition Integrator::getIntegratorDefinition() const{$/;"	f	class:ProtoMol::Integrator
getIntegratorDefinitionAll	framework/integrators/Integrator.cpp	/^  vector<IntegratorDefinition> Integrator::getIntegratorDefinitionAll() const{$/;"	f	class:ProtoMol::Integrator
getKeyword	framework/base/BSpline.h	/^    static const std::string& getKeyword() {return keyword;}$/;"	f	class:ProtoMol::BSpline
getKeyword	framework/base/Hermite.h	/^    static const std::string& getKeyword() {return keyword;}$/;"	f	class:ProtoMol::Hermite
getKeyword	framework/base/Lagrange.h	/^    static const std::string& getKeyword() {return keyword;}$/;"	f	class:ProtoMol::Lagrange
getKeyword	framework/forces/AngleSystemForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::AngleSystemForce
getKeyword	framework/forces/BondSystemForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::BondSystemForce
getKeyword	framework/forces/CompareForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::CompareForce
getKeyword	framework/forces/CoulombForce.h	/^      static std::string getKeyword()                 {return keyword;}$/;"	f	class:ProtoMol::CoulombForce::C1
getKeyword	framework/forces/CoulombForce.h	/^      static std::string getKeyword()                 {return keyword;}$/;"	f	class:ProtoMol::CoulombForce::C2
getKeyword	framework/forces/CoulombForce.h	/^      static std::string getKeyword()                 {return keyword;}$/;"	f	class:ProtoMol::CoulombForce::C3
getKeyword	framework/forces/CoulombForce.h	/^      static std::string getKeyword()                 {return keyword;}$/;"	f	class:ProtoMol::CoulombForce::C4
getKeyword	framework/forces/DihedralSystemForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::DihedralSystemForce
getKeyword	framework/forces/ElectricFieldSystemForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::ElectricFieldSystemForce
getKeyword	framework/forces/ExternalGravitationSystemForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::ExternalGravitationSystemForce
getKeyword	framework/forces/ExternalMagneticFieldExtendedForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::ExternalMagneticFieldExtendedForce
getKeyword	framework/forces/FrictionExtendedForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::FrictionExtendedForce
getKeyword	framework/forces/HarmDihedralSystemForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::HarmDihedralSystemForce
getKeyword	framework/forces/ImproperSystemForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::ImproperSystemForce
getKeyword	framework/forces/MagneticDipoleMirrorSystemForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::MagneticDipoleMirrorSystemForce
getKeyword	framework/forces/NonbondedCutoffForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::NonbondedCutoffForce
getKeyword	framework/forces/NonbondedFullEwaldSystemForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
getKeyword	framework/forces/NonbondedFullSystemForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::NonbondedFullSystemForce
getKeyword	framework/forces/NonbondedMultiGridSystemForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
getKeyword	framework/forces/NonbondedPMEwaldSystemForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
getKeyword	framework/forces/NonbondedSimpleFullSystemForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::NonbondedSimpleFullSystemForce
getKeyword	framework/forces/PaulTrapExtendedForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::PaulTrapExtendedForce
getKeyword	framework/forces/SphericalSystemForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::SphericalSystemForce
getKeyword	framework/forces/TimeForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::TimeForce
getKeyword	framework/forces/WrapperMetaForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::WrapperMetaForce
getKeyword	framework/imd/HapticSystemForce.h	/^    virtual std::string getKeyword() const{return keyword;}$/;"	f	class:ProtoMol::HapticSystemForce
getKeyword	framework/topology/CubicCellManager.h	/^    const std::string& getKeyword() const {return keyword;}$/;"	f	class:ProtoMol::CubicCellManager
getKeyword	framework/topology/GenericTopology.h	/^    static const std::string& getKeyword(){return keyword;}$/;"	f	class:ProtoMol::GenericTopology
getKeyword	framework/topology/PeriodicBoundaryConditions.h	/^    const std::string& getKeyword() const {return keyword;}$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
getKeyword	framework/topology/VacuumBoundaryConditions.h	/^    const std::string& getKeyword() const {return keyword;}$/;"	f	class:ProtoMol::VacuumBoundaryConditions
getLapTime	framework/base/Timer.cpp	/^  TimeRep Timer::getLapTime() const$/;"	f	class:ProtoMol::Timer
getLastStep	framework/frontend/Output.h	/^    int getLastStep() const {return myLastStep;}$/;"	f	class:ProtoMol::Output
getLeftFill	framework/base/stringutilities.cpp	/^  string getLeftFill(const string& s,string::size_type n){$/;"	f	namespace:ProtoMol
getLegend	framework/io/XFigWriter.h	/^    bool getLegend() const {return myLegend;}$/;"	f	class:ProtoMol::XFigWriter
getMasterId	framework/parallel/Parallel.h	/^    static int  getMasterId()          {return myMasterId;}$/;"	f	class:ProtoMol::Parallel
getMax	framework/topology/PeriodicBoundaryConditions.h	/^    const Vector3D& getMax() const {return myMax;}$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
getMax	framework/topology/VacuumBoundaryConditions.cpp	/^  Vector3D VacuumBoundaryConditions::getMax() const {$/;"	f	class:ProtoMol::VacuumBoundaryConditions
getMaxDelta	framework/topology/ExclusionTable.h	/^    int getMaxDelta() const{return myMaxDelta;}$/;"	f	class:ProtoMol::ExclusionTable
getMaxPackages	framework/parallel/Parallel.h	/^    static int  getMaxPackages()       {return myMaxPackages;}$/;"	f	class:ProtoMol::Parallel
getMin	framework/topology/PeriodicBoundaryConditions.h	/^    const Vector3D& getMin() const {return myMin;}$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
getMin	framework/topology/VacuumBoundaryConditions.cpp	/^  Vector3D VacuumBoundaryConditions::getMin() const {$/;"	f	class:ProtoMol::VacuumBoundaryConditions
getMode	framework/parallel/Parallel.h	/^    static ParallelType getMode()      {return myMode;}$/;"	f	class:ProtoMol::Parallel
getNext	framework/frontend/Output.h	/^    int getNext() const {return myNextStep;}$/;"	f	class:ProtoMol::Output
getNext	framework/frontend/OutputCollection.cpp	/^  int  OutputCollection::getNext() const{$/;"	f	class:ProtoMol::OutputCollection
getNextStep	tools/rem/sequential/replica.cc	/^int Replica::getNextStep() const {$/;"	f	class:Replica
getNum	framework/parallel/Parallel.h	/^    static int  getNum()               {return myNum;}$/;"	f	class:ProtoMol::Parallel
getNumAtoms	framework/integrators/NPTVerletIntegrator.h	/^    Real getNumAtoms()   const {return NumAtoms;}$/;"	f	class:ProtoMol::NPTVerletIntegrator
getNumAtoms	framework/integrators/NVTVerletIntegrator.h	/^    Real getNumAtoms()   const {return NumAtoms;}$/;"	f	class:ProtoMol::NVTVerletIntegrator
getNumElements	framework/base/Stack.h	/^  unsigned int Stack<T>::getNumElements() {$/;"	f	class:ProtoMol::Stack
getNumSteps	tools/rem/sequential/replica.cc	/^int Replica::getNumSteps() const {$/;"	f	class:Replica
getNumberOfPackages	framework/parallel/Parallel-FD.cpp	/^  unsigned int Parallel::getNumberOfPackages(unsigned int n) {$/;"	f	class:ProtoMol::Parallel
getNumberOfPackages	framework/parallel/Parallel.cpp	/^  unsigned int Parallel::getNumberOfPackages(unsigned int n) {$/;"	f	class:ProtoMol::Parallel
getOrder	framework/base/BSpline.h	/^    unsigned int getOrder() const {return myInterOrder;}$/;"	f	class:ProtoMol::BSpline
getOrder	framework/base/Hermite.h	/^    unsigned int getOrder() const {return myInterOrder;}$/;"	f	class:ProtoMol::Hermite
getOrder	framework/base/Lagrange.h	/^    unsigned int getOrder() const {return myInterOrder;}$/;"	f	class:ProtoMol::Lagrange
getOutputFreq	framework/frontend/Output.h	/^    int getOutputFreq() const {return myOutputFreq;}$/;"	f	class:ProtoMol::Output
getPDB	framework/io/PDBReader.cpp	/^  PDB PDBReader::getPDB() const{$/;"	f	class:ProtoMol::PDBReader
getParameterSize	framework/forces/AngleSystemForce.h	/^    virtual unsigned int getParameterSize() const{return 0;}$/;"	f	class:ProtoMol::AngleSystemForce
getParameterSize	framework/forces/BondSystemForce.h	/^    virtual unsigned int getParameterSize() const{return 0;}$/;"	f	class:ProtoMol::BondSystemForce
getParameterSize	framework/forces/CompareForce.cpp	/^  unsigned int CompareForce::getParameterSize() const{$/;"	f	class:ProtoMol::CompareForce
getParameterSize	framework/forces/CoulombEwaldRealForce.h	/^    static unsigned int getParameterSize() {return 1;}$/;"	f	class:ProtoMol::CoulombEwaldRealForce
getParameterSize	framework/forces/CoulombEwaldRealTableForce.h	/^    static unsigned int getParameterSize() {$/;"	f	class:ProtoMol::CoulombEwaldRealTableForce
getParameterSize	framework/forces/CoulombForce.h	/^    static unsigned int getParameterSize() {return 0;}$/;"	f	class:ProtoMol::CoulombForce
getParameterSize	framework/forces/CoulombMultiGridDirectForce.h	/^    static unsigned int getParameterSize() {return 1;}$/;"	f	class:ProtoMol::CoulombMultiGridDirectForce
getParameterSize	framework/forces/CoulombMultiGridDirectTableForce.h	/^    static unsigned int getParameterSize() {$/;"	f	class:ProtoMol::CoulombMultiGridDirectTableForce
getParameterSize	framework/forces/CoulombTableForce.h	/^    static unsigned int getParameterSize() {$/;"	f	class:ProtoMol::CoulombTableForce
getParameterSize	framework/forces/DihedralSystemForce.h	/^    virtual unsigned int getParameterSize() const{return 0;}$/;"	f	class:ProtoMol::DihedralSystemForce
getParameterSize	framework/forces/ElectricFieldSystemForce.h	/^    virtual unsigned int getParameterSize() const{return 3+TSwitchingFunction::getParameterSize();}$/;"	f	class:ProtoMol::ElectricFieldSystemForce
getParameterSize	framework/forces/ExternalGravitationSystemForce.h	/^    virtual unsigned int getParameterSize() const{return 1;}$/;"	f	class:ProtoMol::ExternalGravitationSystemForce
getParameterSize	framework/forces/ExternalMagneticFieldExtendedForce.h	/^    virtual unsigned int getParameterSize() const{return 1;}$/;"	f	class:ProtoMol::ExternalMagneticFieldExtendedForce
getParameterSize	framework/forces/FrictionExtendedForce.h	/^    virtual unsigned int getParameterSize() const{return 2;}$/;"	f	class:ProtoMol::FrictionExtendedForce
getParameterSize	framework/forces/GravitationForce.h	/^    static unsigned int getParameterSize() {return 1;}$/;"	f	class:ProtoMol::GravitationForce
getParameterSize	framework/forces/HarmDihedralSystemForce.h	/^    virtual unsigned int getParameterSize() const{return 4;}$/;"	f	class:ProtoMol::HarmDihedralSystemForce
getParameterSize	framework/forces/ImproperSystemForce.h	/^    virtual unsigned int getParameterSize() const{return 0;}$/;"	f	class:ProtoMol::ImproperSystemForce
getParameterSize	framework/forces/LennardJonesForce.h	/^    static unsigned int getParameterSize() {return 0;}$/;"	f	class:ProtoMol::LennardJonesForce
getParameterSize	framework/forces/LennardJonesTableForce.h	/^    static unsigned int getParameterSize() {$/;"	f	class:ProtoMol::LennardJonesTableForce
getParameterSize	framework/forces/MagneticDipoleForce.h	/^    static unsigned int getParameterSize() {return 8;}$/;"	f	class:ProtoMol::MagneticDipoleForce
getParameterSize	framework/forces/MagneticDipoleMirrorSystemForce.h	/^    virtual unsigned int getParameterSize() const{return 6;}$/;"	f	class:ProtoMol::MagneticDipoleMirrorSystemForce
getParameterSize	framework/forces/NonbondedCutoffForce.h	/^    virtual unsigned int getParameterSize() const{return 1+TOneAtomPair::getParameterSize();}$/;"	f	class:ProtoMol::NonbondedCutoffForce
getParameterSize	framework/forces/NonbondedFullEwaldSystemForce.h	/^    virtual unsigned int getParameterSize() const{return (TBoundaryConditions::PERIODIC ? 2:3);}$/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
getParameterSize	framework/forces/NonbondedFullSystemForce.h	/^    virtual unsigned int getParameterSize() const{return 2+TOneAtomPair::getParameterSize();}$/;"	f	class:ProtoMol::NonbondedFullSystemForce
getParameterSize	framework/forces/NonbondedMultiGridSystemForce.h	/^    virtual unsigned int getParameterSize() const{return (1 + (TBoundaryConditions::PERIODIC && smooth?3:0) + (smooth?3:0) + (TBoundaryConditions::VACUUM && smooth?2:0));}$/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
getParameterSize	framework/forces/NonbondedPMEwaldSystemForce.h	/^    virtual unsigned int getParameterSize() const{return (TBoundaryConditions::PERIODIC ? 7:8);}$/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
getParameterSize	framework/forces/NonbondedSimpleFullSystemForce.h	/^    virtual unsigned int getParameterSize() const{return 1+TOneAtomPair::getParameterSize();}$/;"	f	class:ProtoMol::NonbondedSimpleFullSystemForce
getParameterSize	framework/forces/OneAtomPair.h	/^    static unsigned int getParameterSize() {$/;"	f	class:ProtoMol::OneAtomPair
getParameterSize	framework/forces/OneAtomPairFull.h	/^    static unsigned int getParameterSize() {$/;"	f	class:ProtoMol::OneAtomPairFull
getParameterSize	framework/forces/OneAtomPairTwo.h	/^    static unsigned int getParameterSize(){$/;"	f	class:ProtoMol::OneAtomPairTwo
getParameterSize	framework/forces/OneAtomPairTwoFull.h	/^    static unsigned int getParameterSize(){$/;"	f	class:ProtoMol::OneAtomPairTwoFull
getParameterSize	framework/forces/OneMollyPair.h	/^    static unsigned int getParameterSize() {$/;"	f	class:ProtoMol::OneMollyPair
getParameterSize	framework/forces/OneMollyPairTwo.h	/^    static unsigned int getParameterSize(){$/;"	f	class:ProtoMol::OneMollyPairTwo
getParameterSize	framework/forces/PaulTrapExtendedForce.h	/^    virtual unsigned int getParameterSize() const{return 8;}$/;"	f	class:ProtoMol::PaulTrapExtendedForce
getParameterSize	framework/forces/SphericalSystemForce.h	/^    virtual unsigned int getParameterSize() const{return 4;}$/;"	f	class:ProtoMol::SphericalSystemForce
getParameterSize	framework/forces/TimeForce.cpp	/^  unsigned int TimeForce::getParameterSize() const{$/;"	f	class:ProtoMol::TimeForce
getParameterSize	framework/forces/WrapperMetaForce.h	/^    virtual unsigned int getParameterSize() const{return myParameterSize;}$/;"	f	class:ProtoMol::WrapperMetaForce
getParameterSize	framework/frontend/OutputBSDL.h	/^    virtual unsigned int getParameterSize() const {return 5;}$/;"	f	class:ProtoMol::OutputBSDL
getParameterSize	framework/frontend/OutputDCDTrajectory.h	/^    virtual unsigned int getParameterSize() const {return 3;}$/;"	f	class:ProtoMol::OutputDCDTrajectory
getParameterSize	framework/frontend/OutputDiffusion.h	/^    virtual unsigned int getParameterSize() const {return 5;}$/;"	f	class:ProtoMol::OutputDiffusion
getParameterSize	framework/frontend/OutputDihedrals.h	/^    virtual unsigned int getParameterSize() const {return 9;}$/;"	f	class:ProtoMol::OutputDihedrals
getParameterSize	framework/frontend/OutputEnergies.h	/^    virtual unsigned int getParameterSize() const {return 7;}$/;"	f	class:ProtoMol::OutputEnergies
getParameterSize	framework/frontend/OutputFinalPDBPos.h	/^    virtual unsigned int getParameterSize() const {return 2;}$/;"	f	class:ProtoMol::OutputFinalPDBPos
getParameterSize	framework/frontend/OutputFinalXYZBinPos.h	/^    virtual unsigned int getParameterSize() const {return 2;}$/;"	f	class:ProtoMol::OutputFinalXYZBinPos
getParameterSize	framework/frontend/OutputFinalXYZBinVel.h	/^    virtual unsigned int getParameterSize() const {return 1;}$/;"	f	class:ProtoMol::OutputFinalXYZBinVel
getParameterSize	framework/frontend/OutputFinalXYZPos.h	/^    virtual unsigned int getParameterSize() const {return 2;}$/;"	f	class:ProtoMol::OutputFinalXYZPos
getParameterSize	framework/frontend/OutputFinalXYZVel.h	/^    virtual unsigned int getParameterSize() const {return 1;}$/;"	f	class:ProtoMol::OutputFinalXYZVel
getParameterSize	framework/frontend/OutputMomentum.h	/^    virtual unsigned int getParameterSize() const {return 5;}$/;"	f	class:ProtoMol::OutputMomentum
getParameterSize	framework/frontend/OutputPDBFramePos.h	/^    virtual unsigned int getParameterSize() const {return 3;}$/;"	f	class:ProtoMol::OutputPDBFramePos
getParameterSize	framework/frontend/OutputPaulTrap.h	/^    virtual unsigned int getParameterSize() const {return 10;}$/;"	f	class:ProtoMol::OutputPaulTrap
getParameterSize	framework/frontend/OutputREMExchangeRate.h	/^    virtual unsigned int getParameterSize() const { return 5; }$/;"	f	class:ProtoMol::OutputREMExchangeRate
getParameterSize	framework/frontend/OutputREMHistory.h	/^    virtual unsigned int getParameterSize() const { return 5; }$/;"	f	class:ProtoMol::OutputREMHistoryFile
getParameterSize	framework/frontend/OutputScreen.h	/^    virtual unsigned int getParameterSize() const {return 2;}$/;"	f	class:ProtoMol::OutputScreen
getParameterSize	framework/frontend/OutputState.h	/^    virtual unsigned int getParameterSize() const {return 6;}$/;"	f	class:ProtoMol::OutputState
getParameterSize	framework/frontend/OutputTemperatures.h	/^    virtual unsigned int getParameterSize() const {return 6;}$/;"	f	class:ProtoMol::OutputTemperatures
getParameterSize	framework/frontend/OutputXYZBinTrajectoryPos.h	/^    virtual unsigned int getParameterSize() const {return 3;}$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryPos
getParameterSize	framework/frontend/OutputXYZBinTrajectoryVel.h	/^    virtual unsigned int getParameterSize() const {return 2;}$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryVel
getParameterSize	framework/frontend/OutputXYZTrajectoryForce.h	/^    virtual unsigned int getParameterSize() const {return 2;}$/;"	f	class:ProtoMol::OutputXYZTrajectoryForce
getParameterSize	framework/frontend/OutputXYZTrajectoryPos.h	/^    virtual unsigned int getParameterSize() const {return 3;}$/;"	f	class:ProtoMol::OutputXYZTrajectoryPos
getParameterSize	framework/frontend/OutputXYZTrajectoryVel.h	/^    virtual unsigned int getParameterSize() const {return 2;}$/;"	f	class:ProtoMol::OutputXYZTrajectoryVel
getParameterSize	framework/imd/HapticSystemForce.h	/^    virtual unsigned int getParameterSize() const{return 5;}$/;"	f	class:ProtoMol::HapticSystemForce
getParameterSize	framework/integrators/BBKIntegrator.h	/^    virtual unsigned int getParameterSize() const{return 4;}$/;"	f	class:ProtoMol::BBKIntegrator
getParameterSize	framework/integrators/BSplineMOLLYIntegrator.h	/^    virtual unsigned int getParameterSize() const{return 3;}$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
getParameterSize	framework/integrators/DLMCIntegrator.h	/^    virtual unsigned int getParameterSize() const{return myNumParameters; }$/;"	f	class:ProtoMol::DLMCIntegrator
getParameterSize	framework/integrators/DMDLeapfrogIntegrator.h	/^    virtual unsigned int getParameterSize() const{return 5;}$/;"	f	class:ProtoMol::DMDLeapfrogIntegrator
getParameterSize	framework/integrators/DihedralHMCIntegrator.h	/^    virtual unsigned int getParameterSize() const{return 6;}$/;"	f	class:ProtoMol::DihedralHMCIntegrator
getParameterSize	framework/integrators/HMCIntegrator.h	/^    virtual unsigned int getParameterSize() const{return myNumParameters; }$/;"	f	class:ProtoMol::HMCIntegrator
getParameterSize	framework/integrators/LangevinImpulseIntegrator.h	/^    virtual unsigned int getParameterSize() const{return 4;}$/;"	f	class:ProtoMol::LangevinImpulseIntegrator
getParameterSize	framework/integrators/LeapfrogIntegrator.h	/^    virtual unsigned int getParameterSize() const{return 1;}$/;"	f	class:ProtoMol::LeapfrogIntegrator
getParameterSize	framework/integrators/MTSIntegrator.h	/^    virtual unsigned int getParameterSize() const{return 1;}$/;"	f	class:ProtoMol::MTSIntegrator
getParameterSize	framework/integrators/NPTVerletIntegrator.h	/^    virtual unsigned int getParameterSize() const{return 6;}$/;"	f	class:ProtoMol::NPTVerletIntegrator
getParameterSize	framework/integrators/NVTVerletIntegrator.h	/^    virtual unsigned int getParameterSize() const{return 3;}$/;"	f	class:ProtoMol::NVTVerletIntegrator
getParameterSize	framework/integrators/NoseNVTLeapfrogIntegrator.h	/^    virtual unsigned int getParameterSize() const{return 4;}$/;"	f	class:ProtoMol::NoseNVTLeapfrogIntegrator
getParameterSize	framework/integrators/PLeapfrogIntegrator.h	/^    virtual unsigned int getParameterSize() const{return 1;}$/;"	f	class:ProtoMol::PLeapfrogIntegrator
getParameterSize	framework/integrators/PaulTrapIntegrator.h	/^    virtual unsigned int getParameterSize() const{return 9;}$/;"	f	class:ProtoMol::PaulTrapIntegrator
getParameterSize	framework/integrators/ShadowHMCIntegrator.h	/^            virtual unsigned int getParameterSize() const{return 6;}$/;"	f	class:ProtoMol::ShadowHMCIntegrator
getParameterSize	framework/topology/C1SwitchingFunction.h	/^    static unsigned int getParameterSize() {return 1;}$/;"	f	class:ProtoMol::C1SwitchingFunction
getParameterSize	framework/topology/C2SwitchingFunction.h	/^    static unsigned int getParameterSize() { return 2;}$/;"	f	class:ProtoMol::C2SwitchingFunction
getParameterSize	framework/topology/CmpCnCnSwitchingFunction.h	/^    static unsigned int getParameterSize() { return 4;}$/;"	f	class:ProtoMol::CmpCnCnSwitchingFunction
getParameterSize	framework/topology/CnSwitchingFunction.h	/^    static unsigned int getParameterSize() { return 4;}$/;"	f	class:ProtoMol::CnSwitchingFunction
getParameterSize	framework/topology/ComplementSwitchingFunction.h	/^    static unsigned int getParameterSize() {return TOriginalSwitchingFunction::getParameterSize();}$/;"	f	class:ProtoMol::ComplementSwitchingFunction
getParameterSize	framework/topology/CubicCellManager.h	/^    unsigned int getParameterSize() const{return 1;}$/;"	f	class:ProtoMol::CubicCellManager
getParameterSize	framework/topology/CutoffSwitchingFunction.h	/^    static unsigned int getParameterSize() {return 1;}$/;"	f	class:ProtoMol::CutoffSwitchingFunction
getParameterSize	framework/topology/PeriodicBoundaryConditions.h	/^    static unsigned int getParameterSize() {return 4;}$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
getParameterSize	framework/topology/RangeSwitchingFunction.h	/^    static unsigned int getParameterSize() {return 2+TOriginalSwitchingFunction::getParameterSize();}$/;"	f	class:ProtoMol::RangeSwitchingFunction
getParameterSize	framework/topology/ShiftSwitchingFunction.h	/^    static unsigned int getParameterSize() {return 1;}$/;"	f	class:ProtoMol::ShiftSwitchingFunction
getParameterSize	framework/topology/Topology.h	/^    virtual unsigned int getParameterSize() const{$/;"	f	class:ProtoMol::Topology
getParameterSize	framework/topology/UniversalSwitchingFunction.h	/^    static unsigned int getParameterSize() {return 0;}$/;"	f	class:ProtoMol::UniversalSwitchingFunction
getParameterSize	framework/topology/VacuumBoundaryConditions.h	/^    static unsigned int getParameterSize() {return 0;}$/;"	f	class:ProtoMol::VacuumBoundaryConditions
getParameters	framework/base/Makeable.cpp	/^  vector<Parameter> Makeable::getParameters() const{ $/;"	f	class:ProtoMol::Makeable
getParameters	framework/forces/AngleSystemForce.h	/^    virtual void getParameters(std::vector<Parameter>&) const {}$/;"	f	class:ProtoMol::AngleSystemForce
getParameters	framework/forces/BondSystemForce.h	/^    virtual void getParameters(std::vector<Parameter>&) const {}$/;"	f	class:ProtoMol::BondSystemForce
getParameters	framework/forces/CompareForce.cpp	/^  void CompareForce::getParameters(vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::CompareForce
getParameters	framework/forces/CoulombEwaldRealForce.cpp	/^  void CoulombEwaldRealForce::getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::CoulombEwaldRealForce
getParameters	framework/forces/CoulombEwaldRealTableForce.h	/^    void getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::CoulombEwaldRealTableForce
getParameters	framework/forces/CoulombForce.h	/^    void getParameters(std::vector<Parameter>&) const{}$/;"	f	class:ProtoMol::CoulombForce
getParameters	framework/forces/CoulombMultiGridDirectForce.h	/^    void getParameters(std::vector<Parameter>&parameters) const{parameters.push_back(Parameter("-s",Value(myS,ConstraintValueType::Positive()),Text("MG smoothing distance")));}$/;"	f	class:ProtoMol::CoulombMultiGridDirectForce
getParameters	framework/forces/CoulombMultiGridDirectTableForce.h	/^    void getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::CoulombMultiGridDirectTableForce
getParameters	framework/forces/CoulombTableForce.h	/^    void getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::CoulombTableForce
getParameters	framework/forces/DihedralSystemForce.h	/^    virtual void getParameters(std::vector<Parameter>&) const {}$/;"	f	class:ProtoMol::DihedralSystemForce
getParameters	framework/forces/ElectricFieldSystemForce.h	/^  inline void ElectricFieldSystemForce<TBoundaryConditions,TSwitchingFunction,TConstraint>::getParameters(std::vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::ElectricFieldSystemForce
getParameters	framework/forces/ExternalGravitationSystemForce.cpp	/^  void ExternalGravitationSystemForce::getParameters(vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::ExternalGravitationSystemForce
getParameters	framework/forces/ExternalMagneticFieldExtendedForce.cpp	/^  void ExternalMagneticFieldExtendedForce::getParameters(vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::ExternalMagneticFieldExtendedForce
getParameters	framework/forces/FrictionExtendedForce.cpp	/^  void FrictionExtendedForce::getParameters(vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::FrictionExtendedForce
getParameters	framework/forces/GravitationForce.cpp	/^  void GravitationForce::getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::GravitationForce
getParameters	framework/forces/HarmDihedralSystemForce.h	/^    virtual void getParameters(std::vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::HarmDihedralSystemForce
getParameters	framework/forces/ImproperSystemForce.h	/^    virtual void getParameters(std::vector<Parameter>&) const {}$/;"	f	class:ProtoMol::ImproperSystemForce
getParameters	framework/forces/LennardJonesForce.h	/^    void getParameters(std::vector<Parameter>&) const{}$/;"	f	class:ProtoMol::LennardJonesForce
getParameters	framework/forces/LennardJonesTableForce.h	/^    void getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::LennardJonesTableForce
getParameters	framework/forces/MagneticDipoleForce.cpp	/^  void MagneticDipoleForce::getParameters(vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::MagneticDipoleForce
getParameters	framework/forces/MagneticDipoleMirrorSystemForce.h	/^  inline void MagneticDipoleMirrorSystemForce<TBoundaryConditions>::getParameters(std::vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::MagneticDipoleMirrorSystemForce
getParameters	framework/forces/NonbondedCutoffForce.h	/^  void NonbondedCutoffForce<TCellManager,TOneAtomPair,TForce,TImplForce>::getParameters(std::vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::NonbondedCutoffForce
getParameters	framework/forces/NonbondedFullEwaldSystemForce.h	/^				     TSwitchingFunction>::getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
getParameters	framework/forces/NonbondedFullSystemForce.h	/^  void NonbondedFullSystemForce<TOneAtomPair>::getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::NonbondedFullSystemForce
getParameters	framework/forces/NonbondedMultiGridSystemForce.h	/^				     smooth>::getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
getParameters	framework/forces/NonbondedPMEwaldSystemForce.h	/^				   real,reciprocal,correction,TInterpolation,TSwitchingFunction>::getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
getParameters	framework/forces/NonbondedSimpleFullSystemForce.h	/^    virtual void getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::NonbondedSimpleFullSystemForce
getParameters	framework/forces/OneAtomPair.h	/^    void getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::OneAtomPair
getParameters	framework/forces/OneAtomPairFull.h	/^    void getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::OneAtomPairFull
getParameters	framework/forces/OneAtomPairTwo.h	/^    void getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::OneAtomPairTwo
getParameters	framework/forces/OneAtomPairTwoFull.h	/^    void getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::OneAtomPairTwoFull
getParameters	framework/forces/OneMollyPair.h	/^    void getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::OneMollyPair
getParameters	framework/forces/OneMollyPairTwo.h	/^    void getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::OneMollyPairTwo
getParameters	framework/forces/PaulTrapExtendedForce.h	/^  inline void PaulTrapExtendedForce<TBoundaryConditions>::getParameters(std::vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::PaulTrapExtendedForce
getParameters	framework/forces/SphericalSystemForce.cpp	/^  void SphericalSystemForce::getParameters(vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::SphericalSystemForce
getParameters	framework/forces/TimeForce.cpp	/^  void TimeForce::getParameters(vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::TimeForce
getParameters	framework/forces/WrapperMetaForce.h	/^    virtual void getParameters(std::vector<Parameter>& parameters) const{parameters=myParameters;}$/;"	f	class:ProtoMol::WrapperMetaForce
getParameters	framework/frontend/OutputBSDL.cpp	/^  void OutputBSDL::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputBSDL
getParameters	framework/frontend/OutputDCDTrajectory.cpp	/^  void OutputDCDTrajectory::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputDCDTrajectory
getParameters	framework/frontend/OutputDihedrals.cpp	/^  void OutputDihedrals::getParameters(std::vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputDihedrals
getParameters	framework/frontend/OutputEnergies.cpp	/^  void OutputEnergies::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputEnergies
getParameters	framework/frontend/OutputFile.cpp	/^  void OutputFile::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputFile
getParameters	framework/frontend/OutputFinalPDBPos.cpp	/^  void OutputFinalPDBPos::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputFinalPDBPos
getParameters	framework/frontend/OutputFinalXYZBinPos.cpp	/^  void OutputFinalXYZBinPos::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputFinalXYZBinPos
getParameters	framework/frontend/OutputFinalXYZBinVel.cpp	/^  void OutputFinalXYZBinVel::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputFinalXYZBinVel
getParameters	framework/frontend/OutputFinalXYZPos.cpp	/^  void OutputFinalXYZPos::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputFinalXYZPos
getParameters	framework/frontend/OutputFinalXYZVel.cpp	/^  void OutputFinalXYZVel::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputFinalXYZVel
getParameters	framework/frontend/OutputPDBFramePos.cpp	/^  void OutputPDBFramePos::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputPDBFramePos
getParameters	framework/frontend/OutputPaulTrap.cpp	/^  void OutputPaulTrap::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputPaulTrap
getParameters	framework/frontend/OutputREMExchangeRate.cpp	/^  void OutputREMExchangeRate::getParameters(vector<Parameter> &parameter) const {$/;"	f	class:ProtoMol::OutputREMExchangeRate
getParameters	framework/frontend/OutputREMHistory.cpp	/^  void OutputREMHistoryFile::getParameters(vector<Parameter> &parameter) const {$/;"	f	class:ProtoMol::OutputREMHistoryFile
getParameters	framework/frontend/OutputScreen.cpp	/^  void OutputScreen::getParameters(vector<Parameter> & parameter) const{$/;"	f	class:ProtoMol::OutputScreen
getParameters	framework/frontend/OutputState.cpp	/^  void OutputState::getParameters(std::vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputState
getParameters	framework/frontend/OutputTemperatures.cpp	/^  void OutputTemperatures::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputTemperatures
getParameters	framework/frontend/OutputXYZBinTrajectoryPos.cpp	/^  void OutputXYZBinTrajectoryPos::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryPos
getParameters	framework/frontend/OutputXYZBinTrajectoryVel.cpp	/^  void OutputXYZBinTrajectoryVel::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryVel
getParameters	framework/frontend/OutputXYZTrajectoryForce.cpp	/^  void OutputXYZTrajectoryForce::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputXYZTrajectoryForce
getParameters	framework/frontend/OutputXYZTrajectoryPos.cpp	/^  void OutputXYZTrajectoryPos::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputXYZTrajectoryPos
getParameters	framework/frontend/OutputXYZTrajectoryVel.cpp	/^  void OutputXYZTrajectoryVel::getParameters(vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::OutputXYZTrajectoryVel
getParameters	framework/imd/HapticSystemForce.cpp	/^  void HapticSystemForce::getParameters(vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::HapticSystemForce
getParameters	framework/integrators/BBKIntegrator.cpp	/^  void BBKIntegrator::getParameters(vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::BBKIntegrator
getParameters	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  void BSplineMOLLYIntegrator::getParameters(vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
getParameters	framework/integrators/DMDLeapfrogIntegrator.cpp	/^  void DMDLeapfrogIntegrator::getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::DMDLeapfrogIntegrator
getParameters	framework/integrators/DihedralHMCIntegrator.cpp	/^  void DihedralHMCIntegrator::getParameters(vector< Parameter> &parameters) const {$/;"	f	class:ProtoMol::DihedralHMCIntegrator
getParameters	framework/integrators/LangevinImpulseIntegrator.cpp	/^  void LangevinImpulseIntegrator::getParameters(vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::LangevinImpulseIntegrator
getParameters	framework/integrators/MCIntegrator.cpp	/^  void MCIntegrator::getParameters(vector< Parameter> &parameters) const {$/;"	f	class:ProtoMol::MCIntegrator
getParameters	framework/integrators/MTSIntegrator.cpp	/^  void MTSIntegrator::getParameters(vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::MTSIntegrator
getParameters	framework/integrators/NPTVerletIntegrator.cpp	/^  void NPTVerletIntegrator::getParameters(vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::NPTVerletIntegrator
getParameters	framework/integrators/NVTVerletIntegrator.cpp	/^  void NVTVerletIntegrator::getParameters(vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::NVTVerletIntegrator
getParameters	framework/integrators/NoseNVTLeapfrogIntegrator.cpp	/^  void NoseNVTLeapfrogIntegrator::getParameters(vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::NoseNVTLeapfrogIntegrator
getParameters	framework/integrators/PaulTrapIntegrator.cpp	/^  void PaulTrapIntegrator::getParameters(vector<Parameter>& parameters) const {$/;"	f	class:ProtoMol::PaulTrapIntegrator
getParameters	framework/integrators/STSIntegrator.cpp	/^  void STSIntegrator::getParameters(std::vector<Parameter> &parameter) const{$/;"	f	class:ProtoMol::STSIntegrator
getParameters	framework/integrators/ShadowHMCIntegrator.cpp	/^    void ShadowHMCIntegrator::getParameters(vector< Parameter> &parameters) const {$/;"	f	class:ProtoMol::ShadowHMCIntegrator
getParameters	framework/topology/C1SwitchingFunction.cpp	/^  void C1SwitchingFunction::getParameters(vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::C1SwitchingFunction
getParameters	framework/topology/C2SwitchingFunction.cpp	/^  void C2SwitchingFunction::getParameters(vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::C2SwitchingFunction
getParameters	framework/topology/CmpCnCnSwitchingFunction.cpp	/^  void CmpCnCnSwitchingFunction::getParameters(vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::CmpCnCnSwitchingFunction
getParameters	framework/topology/CnSwitchingFunction.cpp	/^    void CnSwitchingFunction::getParameters(vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::CnSwitchingFunction
getParameters	framework/topology/ComplementSwitchingFunction.h	/^    void getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::ComplementSwitchingFunction
getParameters	framework/topology/CubicCellManager.cpp	/^  void CubicCellManager::getParameters(vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::CubicCellManager
getParameters	framework/topology/CutoffSwitchingFunction.cpp	/^  void CutoffSwitchingFunction::getParameters(vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::CutoffSwitchingFunction
getParameters	framework/topology/PeriodicBoundaryConditions.cpp	/^  void PeriodicBoundaryConditions::getParameters(vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
getParameters	framework/topology/RangeSwitchingFunction.h	/^  void RangeSwitchingFunction<TOriginalSwitchingFunction>::getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::RangeSwitchingFunction
getParameters	framework/topology/ShiftSwitchingFunction.cpp	/^  void ShiftSwitchingFunction::getParameters(vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::ShiftSwitchingFunction
getParameters	framework/topology/Topology.h	/^    virtual void getParameters(std::vector<Parameter>& parameters) const{$/;"	f	class:ProtoMol::Topology
getParameters	framework/topology/UniversalSwitchingFunction.h	/^    void getParameters(std::vector<Parameter>&) const{};$/;"	f	class:ProtoMol::UniversalSwitchingFunction
getParameters	framework/topology/VacuumBoundaryConditions.h	/^    void getParameters(std::vector<Parameter>&) const{};$/;"	f	class:ProtoMol::VacuumBoundaryConditions
getParameters	tools/rem/sequential/replica.cc	/^vector<string> Replica::getParameters() const {$/;"	f	class:Replica
getPipeSize	framework/parallel/Parallel.h	/^    static int getPipeSize()           {return myPipeSize;}$/;"	f	class:ProtoMol::Parallel
getPointer	framework/topology/AngleInfo.cpp	/^  unsigned int AngleInfo::getPointer() const{$/;"	f	class:ProtoMol::AngleInfo
getPossibleValues	framework/base/AbstractEnumType.h	/^  std::string AbstractEnumType<T, noCase>::getPossibleValues(std::string separator){$/;"	f	class:ProtoMol::AbstractEnumType
getPostfixId	framework/forces/oneAtomContraints.h	/^    static std::string getPostfixId() {return "";}$/;"	f	struct:ProtoMol::HBondConstraint
getPostfixId	framework/forces/oneAtomContraints.h	/^    static std::string getPostfixId() {return "";}$/;"	f	struct:ProtoMol::NoConstraint
getPostfixId	framework/forces/oneAtomContraints.h	/^    static std::string getPostfixId() {return "DebugPost";}$/;"	f	struct:ProtoMol::DebugPostConstraint
getPostfixId	framework/forces/oneAtomContraints.h	/^    static std::string getPostfixId() {return "DebugPre";}$/;"	f	struct:ProtoMol::DebugPreConstraint
getPostfixId	framework/forces/oneAtomContraints.h	/^    static std::string getPostfixId() {return "NotSameMol";}$/;"	f	struct:ProtoMol::NotSameMoleculeConstraint
getPostfixId	framework/forces/oneAtomContraints.h	/^    static std::string getPostfixId() {return "SameMol";}$/;"	f	struct:ProtoMol::SameMoleculeConstraint
getPotentialEnergy	tools/rem/sequential/replica.cc	/^double Replica::getPotentialEnergy() const {$/;"	f	class:Replica
getPrefixId	framework/forces/oneAtomContraints.h	/^    static std::string getPrefixId() {return "";}$/;"	f	struct:ProtoMol::DebugPostConstraint
getPrefixId	framework/forces/oneAtomContraints.h	/^    static std::string getPrefixId() {return "";}$/;"	f	struct:ProtoMol::DebugPreConstraint
getPrefixId	framework/forces/oneAtomContraints.h	/^    static std::string getPrefixId() {return "";}$/;"	f	struct:ProtoMol::NoConstraint
getPrefixId	framework/forces/oneAtomContraints.h	/^    static std::string getPrefixId() {return "";}$/;"	f	struct:ProtoMol::NotSameMoleculeConstraint
getPrefixId	framework/forces/oneAtomContraints.h	/^    static std::string getPrefixId() {return "";}$/;"	f	struct:ProtoMol::SameMoleculeConstraint
getPrefixId	framework/forces/oneAtomContraints.h	/^    static std::string getPrefixId() {return "HBond";}$/;"	f	struct:ProtoMol::HBondConstraint
getProcessTime	framework/base/Timer.h	/^  inline double TimeRep::getProcessTime() const$/;"	f	class:ProtoMol::TimeRep
getPrototype	framework/frontend/Factory.h	/^    const Type* getPrototype(const std::string& id) const{$/;"	f	class:ProtoMol::FactoryBase
getQ	framework/base/Grid.h	/^    void getQ(Real*& begin, Real*& end) {begin=&(myQ.begin()->re);end=&(myQ.end()->re);}$/;"	f	class:ProtoMol::Grid
getQ	framework/base/MultiGrid.h	/^    void getQ(int level, Real*& begin, Real*& end) {begin=myQ[level].begin();end=myQ[level].end();}$/;"	f	class:ProtoMol::MultiGrid
getRadius	framework/io/XFigWriter.h	/^    Real getRadius() const{return myRadius;}$/;"	f	class:ProtoMol::XFigWriter
getRealCellSize	framework/topology/CubicCellManager.h	/^    Vector3D getRealCellSize(void) const {return myRealCellSize;}$/;"	f	class:ProtoMol::CubicCellManager
getRealTime	framework/base/Timer.h	/^  inline double TimeRep::getRealTime() const $/;"	f	class:ProtoMol::TimeRep
getRed	framework/base/PGM.h	/^    unsigned char getRed(unsigned int x, unsigned int y) const {return p[(h-y-1)*w+x];}$/;"	f	class:ProtoMol::PGM
getRed	framework/base/PPM.h	/^    unsigned char getRed(unsigned int x, unsigned int y) const {return p[(h-y-1)*w*3+x*3];}$/;"	f	class:ProtoMol::PPM
getRightFill	framework/base/stringutilities.cpp	/^  string getRightFill(const string& s,string::size_type n){$/;"	f	namespace:ProtoMol
getScope	framework/forces/Force.h	/^    virtual std::string getScope() const{return scope;}$/;"	f	class:ProtoMol::Force
getScope	framework/frontend/Output.h	/^    virtual std::string getScope() const{return scope;}$/;"	f	class:ProtoMol::Output
getScope	framework/integrators/Integrator.h	/^    virtual std::string getScope() const{return scope;}$/;"	f	class:ProtoMol::Integrator
getScope	framework/topology/GenericTopology.h	/^    virtual std::string getScope() const{return scope;}$/;"	f	class:ProtoMol::GenericTopology
getString	framework/base/AbstractEnumType.h	/^    static const std::string & getString(Enum e){return T::str[static_cast<int>(e)];}$/;"	f	class:ProtoMol::AbstractEnumType
getString	framework/base/AbstractEnumType.h	/^    static const std::string& getString(int n){return T::str[static_cast<int>(getEnum(n))];}$/;"	f	class:ProtoMol::AbstractEnumType
getString	framework/base/AbstractEnumType.h	/^    std::string getString() const {return T::str[static_cast<int>(myType)];}$/;"	f	class:ProtoMol::AbstractEnumType
getString	framework/base/Value.cpp	/^  string Value::getString() const {$/;"	f	class:ProtoMol::Value
getSystemTime	framework/base/Timer.h	/^  inline double TimeRep::getSystemTime() const $/;"	f	class:ProtoMol::TimeRep
getTable	framework/topology/ExclusionTable.h	/^    const std::vector<ExclusionPair>& getTable() const{return myTable;}$/;"	f	class:ProtoMol::ExclusionTable
getTargetTemperature	tools/rem/sequential/replica.cc	/^double Replica::getTargetTemperature() const {$/;"	f	class:Replica
getTemp	framework/io/TempFileReader.h	/^    Real getTemp() const { return myTemp; }$/;"	f	class:ProtoMol::TempFileReader
getTemperature	tools/rem/sequential/replica.cc	/^double Replica::getTemperature() {$/;"	f	class:Replica
getText	framework/base/Configuration.cpp	/^  string Configuration::getText(const std::string& keyword) const {$/;"	f	class:ProtoMol::Configuration
getText	framework/base/Makeable.h	/^    virtual std::string getText() const{return std::string();}$/;"	f	class:ProtoMol::Makeable
getTime	framework/base/Timer.cpp	/^  TimeRep Timer::getTime() const$/;"	f	class:ProtoMol::Timer
getTimerSeed	framework/base/mathutilities.cpp	/^  int getTimerSeed(){$/;"	f	namespace:ProtoMol
getTimestep	framework/integrators/MTSIntegrator.h	/^  inline Real MTSIntegrator::getTimestep () const{$/;"	f	class:ProtoMol::MTSIntegrator
getTimestep	framework/integrators/ModifierNPTRattle.h	/^    virtual Real getTimestep()const{return myTheIntegrator->getTimestep();}$/;"	f	class:ProtoMol::ModifierNPTRattle
getTimestep	framework/integrators/ModifierNPTShake.h	/^    virtual Real getTimestep()const{return myTheIntegrator->getTimestep();}$/;"	f	class:ProtoMol::ModifierNPTShake
getTimestep	framework/integrators/ModifierNVTRattle.h	/^    virtual Real getTimestep()const{return myTheIntegrator->getTimestep();}$/;"	f	class:ProtoMol::ModifierNVTRattle
getTimestep	framework/integrators/ModifierNVTShake.h	/^    virtual Real getTimestep()const{return myTheIntegrator->getTimestep();}$/;"	f	class:ProtoMol::ModifierNVTShake
getTimestep	framework/integrators/ModifierRattle.cpp	/^  Real ModifierRattle::getTimestep()const {$/;"	f	class:ProtoMol::ModifierRattle
getTimestep	framework/integrators/ModifierShadow.cpp	/^    Real ModifierShadow::getTimestep() const {$/;"	f	class:ProtoMol::ModifierShadow
getTimestep	framework/integrators/ModifierShake.cpp	/^  Real ModifierShake::getTimestep()const {$/;"	f	class:ProtoMol::ModifierShake
getTimestep	framework/integrators/STSIntegrator.h	/^  inline Real STSIntegrator::getTimestep() const {$/;"	f	class:ProtoMol::STSIntegrator
getToZ	framework/io/XFigWriter.h	/^    Real getToZ() const{return myToZ;}$/;"	f	class:ProtoMol::XFigWriter
getTransformation	framework/io/XFigWriter.h	/^    Matrix3by3 getTransformation() const{return myMat;}$/;"	f	class:ProtoMol::XFigWriter
getType	framework/base/Value.h	/^      virtual ValueType::Enum getType() const {return (ValueType::Enum)ValueTrait::value;}$/;"	f	class:ProtoMol::Value::Holder
getType	framework/base/Value.h	/^  inline ValueType::Enum Value::getType() const {  $/;"	f	class:ProtoMol::Value
getType	framework/frontend/InputPosVel.cpp	/^  InputPosVelType InputPosVel::getType() const{$/;"	f	class:ProtoMol::InputPosVel
getTypeString	framework/base/Value.h	/^      virtual const std::string & getTypeString() const { return ValueType::getString((ValueType::Enum)ValueTrait::value);}$/;"	f	class:ProtoMol::Value::Holder
getTypeString	framework/base/Value.h	/^  inline const std::string & Value::getTypeString() const{ $/;"	f	class:ProtoMol::Value
getUserName	framework/base/systemutilities.cpp	/^  string getUserName(){$/;"	f	namespace:ProtoMol
getUserTime	framework/base/Timer.h	/^  inline double TimeRep::getUserTime() const $/;"	f	class:ProtoMol::TimeRep
getV	framework/base/MultiGrid.h	/^    void getV(int level, Real*& begin, Real*& end) {begin=myV[level].begin();end=myV[level].end();}$/;"	f	class:ProtoMol::MultiGrid
getVolume	framework/topology/PeriodicBoundaryConditions.h	/^    Real getVolume()         const {return myV;};$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
getVolume	framework/topology/SemiGenericTopology.h	/^    virtual Real getVolume() const{ return boundaryConditions.getVolume(); }$/;"	f	class:ProtoMol::SemiGenericTopology
getVolume	framework/topology/SemiGenericTopology.h	/^    virtual Real getVolume(const Vector3DBlock& positions) const{$/;"	f	class:ProtoMol::SemiGenericTopology
getVolume	framework/topology/VacuumBoundaryConditions.cpp	/^  Real VacuumBoundaryConditions::getVolume() const {$/;"	f	class:ProtoMol::VacuumBoundaryConditions
getWorkState	framework/parallel/Parallel-FD.cpp	/^  Parallel::WorkState Parallel::getWorkState(){$/;"	f	class:ProtoMol::Parallel
getWorkState	framework/parallel/Parallel.cpp	/^  Parallel::WorkState Parallel::getWorkState(){$/;"	f	class:ProtoMol::Parallel
getXSC	framework/integrators/Integrator.h	/^    virtual XSC & getXSC() const { XSC *xsc = new XSC; return( *xsc ); };$/;"	f	class:ProtoMol::Integrator
getXYZ	framework/io/DCDTrajectoryReader.cpp	/^  XYZ DCDTrajectoryReader::getXYZ() const{$/;"	f	class:ProtoMol::DCDTrajectoryReader
getXYZ	framework/io/XYZBinReader.cpp	/^  XYZ XYZBinReader::getXYZ() const{$/;"	f	class:ProtoMol::XYZBinReader
getXYZ	framework/io/XYZReader.cpp	/^  XYZ XYZReader::getXYZ() const{$/;"	f	class:ProtoMol::XYZReader
getXYZ	framework/io/XYZTrajectoryReader.cpp	/^  XYZ XYZTrajectoryReader::getXYZ() const{$/;"	f	class:ProtoMol::XYZTrajectoryReader
get_haptics	framework/imd/IMDElf.cpp	/^  int IMDElf::get_haptics(Vector3DBlock &h) {$/;"	f	class:ProtoMol::IMDElf
getdihedralsfromatomset	framework/frontend/OutputDihedrals.cpp	/^  void OutputDihedrals::getdihedralsfromatomset(){$/;"	f	class:ProtoMol::OutputDihedrals
getline	framework/io/File.cpp	/^  std::string File::getline(){$/;"	f	class:ProtoMol::File
getticks	framework/base/Cycles.h	/^    static __inline ticks getticks(void)$/;"	f	namespace:ProtoMol::Private
getticks	framework/base/Cycles.h	/^    static __inline__ ticks getticks(void)$/;"	f	namespace:ProtoMol::Private
getticks	framework/base/Cycles.h	/^    static inline ticks getticks(void)$/;"	f	namespace:ProtoMol::Private
getticks	framework/base/Cycles.h	/^    static inline unsigned long getticks(void)$/;"	f	namespace:ProtoMol::Private
getticks	framework/base/Cycles.h	114;"	d
getticks	framework/base/Cycles.h	237;"	d
getticks	framework/base/Cycles.h	425;"	d
gotoEndPair	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    void gotoEndPair() {j=the_end;};$/;"	f	class:ProtoMol::CellListEnumerator
gotoEndPair	framework/topology/CellListEnumerator_standard.h	/^    void gotoEndPair() {j=the_end;};$/;"	f	class:ProtoMol::CellListEnumerator
greater	framework/base/Value.cpp	/^  inline bool Value::greater(const Value& v1, const Value& v2){$/;"	f	class:ProtoMol::Value
greater	framework/base/Value.cpp	/^  inline bool Value::greater<Vector3D>(const Value&, const Value&){return false;}$/;"	f	class:ProtoMol::Value
greater	framework/base/Value.cpp	/^  inline bool Value::greater<vector<Real> >(const Value&, const Value&){return false;}$/;"	f	class:ProtoMol::Value
greaterEqual	framework/base/Value.cpp	/^  inline bool Value::greaterEqual(const Value& v1, const Value& v2){$/;"	f	class:ProtoMol::Value
greaterEqual	framework/base/Value.cpp	/^  inline bool Value::greaterEqual<Vector3D>(const Value&, const Value&){return false;}$/;"	f	class:ProtoMol::Value
greaterEqual	framework/base/Value.cpp	/^  inline bool Value::greaterEqual<vector<Real> >(const Value&, const Value&){return false;}$/;"	f	class:ProtoMol::Value
h	compilerTests/pngTest.cpp	/^  unsigned int w,h;$/;"	m	class:PPM	file:
h	framework/base/PGM.h	/^    unsigned int w,h;$/;"	m	class:ProtoMol::PGM
h	framework/base/PPM.h	/^    unsigned int w,h;$/;"	m	class:ProtoMol::PPM
h	framework/base/simpleTypes.h	/^    int h;int k; int l;$/;"	m	struct:ProtoMol::TripleInt
harmCalcTorsion	framework/forces/HarmDihedralSystemForce.h	/^  inline void HarmDihedralSystemForce<TBoundaryConditions>::harmCalcTorsion(const GenericTopology* topo,$/;"	f	class:ProtoMol::HarmDihedralSystemForce
hbonds	framework/base/PAR.h	/^    std::vector<Hbond> hbonds;$/;"	m	class:ProtoMol::PAR
hdf	framework/integrators/DLMCIntegrator.h	/^    Force* hdf;$/;"	m	class:ProtoMol::DLMCIntegrator
headString	framework/base/stringutilities.cpp	/^  string headString(const string& word){$/;"	f	namespace:ProtoMol
height	compilerTests/pngTest.cpp	/^  unsigned int height() const{return h;}$/;"	f	class:PPM
height	framework/base/PGM.h	/^    unsigned int height() const{return h;}$/;"	f	class:ProtoMol::PGM
height	framework/base/PPM.h	/^    unsigned int height() const{return h;}$/;"	f	class:ProtoMol::PPM
hessian	framework/topology/C1SwitchingFunction.cpp	/^  Matrix3by3 C1SwitchingFunction::hessian(const Vector3D& rij, Real a) const{$/;"	f	class:ProtoMol::C1SwitchingFunction
hessian	framework/topology/C2SwitchingFunction.cpp	/^  Matrix3by3 C2SwitchingFunction::hessian(const Vector3D& rij, Real a) const{$/;"	f	class:ProtoMol::C2SwitchingFunction
hessian	framework/topology/CmpCnCnSwitchingFunction.cpp	/^  Matrix3by3 CmpCnCnSwitchingFunction::hessian(const Vector3D& rij, Real a) const{$/;"	f	class:ProtoMol::CmpCnCnSwitchingFunction
hessian	framework/topology/CnSwitchingFunction.cpp	/^    Matrix3by3 CnSwitchingFunction::hessian(const Vector3D& rij, Real a) const{$/;"	f	class:ProtoMol::CnSwitchingFunction
hessian	framework/topology/RangeSwitchingFunction.h	/^  inline Matrix3by3 RangeSwitchingFunction<TOriginalSwitchingFunction>::hessian(const Vector3D& rij, Real distSquared) const {$/;"	f	class:ProtoMol::RangeSwitchingFunction
high	framework/imd/imd.cpp	/^      unsigned int high    : 8;$/;"	m	struct:ProtoMol::IMD::<anonymous>	file:
highBound	framework/frontend/OutputState.h	/^      Real highBound;$/;"	m	struct:ProtoMol::OutputState::orderParam
highDeltas	framework/topology/ExclusionTable.h	/^    std::map<PairInt,ExclusionClass> highDeltas;$/;"	m	class:ProtoMol::ExclusionTable
highest	framework/imd/imd.cpp	/^      unsigned int highest : 8;$/;"	m	struct:ProtoMol::IMD::<anonymous>	file:
hint	framework/base/Report.cpp	/^    MyStreamer& hint(MyStreamer& stream){$/;"	f	namespace:ProtoMol::Report
holder	framework/base/Value.h	/^      typename ValueTrait::RepType holder;$/;"	m	class:ProtoMol::Value::Holder
hookup	framework/imd/IMDElf.cpp	/^  int IMDElf::hookup() {$/;"	f	class:ProtoMol::IMDElf
hvyAtom	framework/base/Atom.h	/^    int hvyAtom;$/;"	m	struct:ProtoMol::Atom
hvyAtomGrpsize	framework/base/PDB.h	/^      int         hvyAtomGrpsize;  \/\/\/< ??? throw in zeros	   $/;"	m	struct:ProtoMol::PDB::Atom
i	framework/base/LookUpTableBase.h	/^    typedef union { TReal f; TInt i; } Conv;$/;"	m	union:ProtoMol::LookUpTableBase::<anonymous>
i	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    CubicCellManager::CellListStructure::const_iterator i,j,the_beginning,the_end;$/;"	m	class:ProtoMol::CellListEnumerator
i	framework/topology/CellListEnumerator_standard.h	/^    CubicCellManager::CellListStructure::const_iterator i,j,the_beginning,the_end;$/;"	m	class:ProtoMol::CellListEnumerator
i	tools/bccAnalyzer.cpp	/^  int i;$/;"	m	class:Vector3DIdx	file:
i1	framework/integrators/EquilibriumMOLLYIntegrator.h	/^      short i1;   \/\/ Local index of atom 1 myHydrogenAtomGroups$/;"	m	struct:ProtoMol::EquilibriumMOLLYIntegrator::HydrogenBond
i2	framework/integrators/EquilibriumMOLLYIntegrator.h	/^      short i2;   \/\/ Local index of atom 1 myHydrogenAtomGroups$/;"	m	struct:ProtoMol::EquilibriumMOLLYIntegrator::HydrogenBond
iAmMaster	framework/parallel/Parallel.h	/^    static bool iAmMaster()            {return myIAmMaster;}$/;"	f	class:ProtoMol::Parallel
iAmSlave	framework/parallel/Parallel.h	/^    static bool iAmSlave()             {return myIAmSlave;}$/;"	f	class:ProtoMol::Parallel
iSGNumMols	framework/topology/GenericTopology.h	/^    std::vector<int> iSGNumMols;$/;"	m	class:ProtoMol::GenericTopology
iSGmodifierIndex	framework/topology/Angle.h	/^    int iSGmodifierIndex;$/;"	m	class:ProtoMol::Angle
iSGmodifierIndex	framework/topology/Bond.h	/^    int iSGmodifierIndex;$/;"	m	class:ProtoMol::Bond
iSGmodifierIndex	framework/topology/Torsion.h	/^    int iSGmodifierIndex;              \/\/\/< The index # of this torsion type in the ModifierISG angle structure. $/;"	m	class:ProtoMol::Torsion
iSGpar	framework/frontend/OutputCache.h	/^    const iSGPAR&                    iSGpar() const {return myiSGPAR;}$/;"	f	class:ProtoMol::OutputCache
id	framework/base/MakeableDefinition.h	/^    std::string            id;         \/\/\/< keyword of the object$/;"	m	struct:ProtoMol::MakeableDefinition
id	framework/base/ObjectDefinition.h	/^    std::string            id;$/;"	m	struct:ProtoMol::ObjectDefinition
id	framework/frontend/HelpTextFactory.h	/^    std::string            id;$/;"	m	struct:ProtoMol::HelpText
identity	framework/base/Matrix3by3.cpp	/^  void Matrix3by3::identity() $/;"	f	class:ProtoMol::Matrix3by3
identity	framework/base/PSF.h	/^      unsigned int identity;    \/\/\/< atom's identity (for iSGMD)$/;"	m	struct:ProtoMol::PSF::Atom
identity	framework/base/ReducedHessAngle.cpp	/^  void ReducedHessAngle::identity()$/;"	f	class:ProtoMol::ReducedHessAngle
im	framework/base/FFTComplex.h	/^    double im;$/;"	m
im	framework/base/fft.c	/^  double im;$/;"	m	file:
imd_disconnect	framework/imd/imd.cpp	/^    int imd_disconnect(void *s) {$/;"	f	namespace:ProtoMol::IMD
imd_go	framework/imd/imd.cpp	/^    static int imd_go(void *s) {$/;"	f	namespace:ProtoMol::IMD	file:
imd_handshake	framework/imd/imd.cpp	/^    int imd_handshake(void *s) {$/;"	f	namespace:ProtoMol::IMD
imd_htonl	framework/imd/imd.cpp	/^    static int32 imd_htonl(int32 h) {$/;"	f	namespace:ProtoMol::IMD	file:
imd_kill	framework/imd/imd.cpp	/^    int imd_kill(void *s) {$/;"	f	namespace:ProtoMol::IMD
imd_ntohl	framework/imd/imd.cpp	/^    static int32 imd_ntohl(int32 n) {$/;"	f	namespace:ProtoMol::IMD	file:
imd_pause	framework/imd/imd.cpp	/^    int imd_pause(void *s) {$/;"	f	namespace:ProtoMol::IMD
imd_readn	framework/imd/imd.cpp	/^    static int32 imd_readn(void *s, char *ptr, int32 n) {$/;"	f	namespace:ProtoMol::IMD	file:
imd_recv_energies	framework/imd/imd.cpp	/^    int imd_recv_energies(void *s, IMDEnergies *energies) {$/;"	f	namespace:ProtoMol::IMD
imd_recv_fcoords	framework/imd/imd.cpp	/^    int imd_recv_fcoords(void *s, int32 n, float *coords) {$/;"	f	namespace:ProtoMol::IMD
imd_recv_handshake	framework/imd/imd.cpp	/^    int imd_recv_handshake(void *s) {$/;"	f	namespace:ProtoMol::IMD
imd_recv_header	framework/imd/imd.cpp	/^    IMDType imd_recv_header(void *s, int32 *length) {$/;"	f	namespace:ProtoMol::IMD
imd_recv_header_nolengthswap	framework/imd/imd.cpp	/^    IMDType imd_recv_header_nolengthswap(void *s, int32 *length) {$/;"	f	namespace:ProtoMol::IMD
imd_recv_mdcomm	framework/imd/imd.cpp	/^    int imd_recv_mdcomm(void *s, int32 n, int32 *indices, float *forces) {$/;"	f	namespace:ProtoMol::IMD
imd_send_energies	framework/imd/imd.cpp	/^    int imd_send_energies(void *s, const IMDEnergies *energies) {$/;"	f	namespace:ProtoMol::IMD
imd_send_fcoords	framework/imd/imd.cpp	/^    int imd_send_fcoords(void *s, int32 n, const float *coords) {$/;"	f	namespace:ProtoMol::IMD
imd_send_mdcomm	framework/imd/imd.cpp	/^    int imd_send_mdcomm(void *s,int32 n,const int32 *indices,const float *forces) {$/;"	f	namespace:ProtoMol::IMD
imd_trate	framework/imd/imd.cpp	/^    int imd_trate(void *s, int32 rate) {$/;"	f	namespace:ProtoMol::IMD
imd_writen	framework/imd/imd.cpp	/^    static int32 imd_writen(void *s, const char *ptr, int32 n) {$/;"	f	namespace:ProtoMol::IMD	file:
improperList	framework/base/Molecule.h	/^    std::vector<int> improperList;$/;"	m	struct:ProtoMol::Molecule
impropers	framework/base/PAR.h	/^    std::vector<Improper> impropers;$/;"	m	class:ProtoMol::PAR
impropers	framework/base/PSF.h	/^    std::vector<Improper> impropers;$/;"	m	class:ProtoMol::PSF
impropers	framework/topology/GenericTopology.h	/^    std::vector<Torsion>  impropers;$/;"	m	class:ProtoMol::GenericTopology
indeces	framework/integrators/ModifierShadow.h	/^            std::vector< std::vector<int> > indeces;$/;"	m	class:ProtoMol::ModifierShadow
index	framework/base/LookUpTableBase.h	/^    void index(Real r, int& i, Real& dt) const{$/;"	f	class:ProtoMol::LookUpTableBase
index	framework/integrators/EquilibriumMOLLYIntegrator.cpp	/^					  int dim, const int (&index)[maxGDim],$/;"	v
index	framework/integrators/EquilibriumMOLLYIntegrator.cpp	/^					  int dim, int (&index)[maxGDim],$/;"	v
index	framework/integrators/EquilibriumMOLLYIntegrator.h	/^    void luBksb(Real (&m)[maxGDim][maxGDim], int dim, const int (&index)[maxGDim], Real (&b)[maxGDim]) const;$/;"	m	class:ProtoMol::EquilibriumMOLLYIntegrator
index	framework/integrators/EquilibriumMOLLYIntegrator.h	/^    void luDcmp(Real (&m)[maxGDim][maxGDim], int dim, int (&index)[maxGDim], Real& d) const;$/;"	m	class:ProtoMol::EquilibriumMOLLYIntegrator
inertiaMomentum	framework/topology/topologyutilities.cpp	/^  Matrix3by3 inertiaMomentum(const Vector3DBlock *positions, $/;"	f	namespace:ProtoMol
init	compilerTests/glutTest.cpp	/^static void init(){$/;"	f	file:
init	framework/base/Value.h	/^      virtual bool init() { bool tmp = ok; holder = ValueTrait::init() ; ok = ValueTrait::check(Constraint(),holder);  return tmp;}$/;"	f	class:ProtoMol::Value::Holder
init	framework/base/Value.h	/^  inline bool Value::init()  {$/;"	f	class:ProtoMol::Value
init	framework/base/ValueType.h	/^    static RepType init(){return "";}$/;"	f	struct:ProtoMol::ValueTraits
init	framework/base/ValueType.h	/^    static RepType init(){return 0.0;}$/;"	f	struct:ProtoMol::ValueTraits
init	framework/base/ValueType.h	/^    static RepType init(){return 0;}$/;"	f	struct:ProtoMol::ValueTraits
init	framework/base/ValueType.h	/^    static RepType init(){return Vector3D(0.0,0.0,0.0);}$/;"	f	struct:ProtoMol::ValueTraits
init	framework/base/ValueType.h	/^    static RepType init(){return std::vector<Real>();}$/;"	f	struct:ProtoMol::ValueTraits
init	framework/base/ValueType.h	/^    static RepType init(){return true;}$/;"	f	struct:ProtoMol::ValueTraits
init	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  void BSplineMOLLYIntegrator::init(){$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
init	framework/integrators/PaulTrapIntegrator.cpp	/^  void PaulTrapIntegrator::init() {$/;"	f	class:ProtoMol::PaulTrapIntegrator
init	framework/parallel/Parallel-FD.cpp	/^  void Parallel::init(int &argc, char **&argv){$/;"	f	class:ProtoMol::Parallel
init	framework/parallel/Parallel.cpp	/^  void Parallel::init(int &argc, char **&argv){$/;"	f	class:ProtoMol::Parallel
initialize	framework/base/Array_Fastest.h	/^    void initialize(const T & Init=T())$/;"	f	class:ProtoMol::Array
initialize	framework/base/Array_Fastest.h	/^    void initialize(const T & Init=T())$/;"	f	class:ProtoMol::RefArray
initialize	framework/base/Array_NoPartialSpecialization.h	/^      void initialize(const T & Init=T())$/;"	f	class:ProtoMol::Array::RefArray
initialize	framework/base/Array_NoPartialSpecialization.h	/^    void initialize(const T & Init=T())$/;"	f	class:ProtoMol::Array
initialize	framework/base/FFTComplex.cpp	/^  void FFTComplex::initialize(int x, int y, int z,zomplex* a){$/;"	f	class:ProtoMol::FFTComplex
initialize	framework/base/FFTComplex.cpp	/^  void FFTInternal::initialize(int x, int y, int z,zomplex* a){$/;"	f	class:ProtoMol::FFTInternal
initialize	framework/base/Grid.h	/^  void Grid<TInterpolation>::initialize(Real width, Real length, Real height, Real alpha,$/;"	f	class:ProtoMol::Grid
initialize	framework/base/MultiGrid.h	/^  void MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::initialize(unsigned int n, Real s, int levels,$/;"	f	class:ProtoMol::MultiGrid
initialize	framework/forces/NonbondedFullEwaldSystemForce.h	/^				     TSwitchingFunction>::initialize(const RealTopologyType* realTopo, const Vector3DBlock* positions) {$/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
initialize	framework/forces/NonbondedMultiGridSystemForce.h	/^				     smooth>::initialize(const RealTopologyType* realTopo, const Vector3DBlock* positions) {$/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
initialize	framework/forces/NonbondedPMEwaldSystemForce.h	/^				   TSwitchingFunction>::initialize(const RealTopologyType* realTopo, $/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
initialize	framework/forces/OneAtomPair.h	/^    void initialize(const SemiGenericTopology<TBoundaryConditions>* topo, $/;"	f	class:ProtoMol::OneAtomPair
initialize	framework/forces/OneAtomPairFull.h	/^    void initialize(const SemiGenericTopology<TBoundaryConditions>* topo, $/;"	f	class:ProtoMol::OneAtomPairFull
initialize	framework/forces/OneAtomPairTwo.h	/^    void initialize(const SemiGenericTopology<TBoundaryConditions>* topo, $/;"	f	class:ProtoMol::OneAtomPairTwo
initialize	framework/forces/OneAtomPairTwoFull.h	/^    void initialize(const SemiGenericTopology<TBoundaryConditions>* topo, $/;"	f	class:ProtoMol::OneAtomPairTwoFull
initialize	framework/forces/OneMollyPair.h	/^    void initialize(const SemiGenericTopology<TBoundaryConditions>* topo, $/;"	f	class:ProtoMol::OneMollyPair
initialize	framework/forces/OneMollyPairTwo.h	/^    void initialize(const SemiGenericTopology<TBoundaryConditions>* topo, $/;"	f	class:ProtoMol::OneMollyPairTwo
initialize	framework/forces/PaulTrapExtendedForce.h	/^  inline void PaulTrapExtendedForce<TBoundaryConditions>::initialize(const GenericTopology* topo){    $/;"	f	class:ProtoMol::PaulTrapExtendedForce
initialize	framework/frontend/Output.cpp	/^  void Output::initialize(const Configuration* config, const Integrator* integrator, const GenericTopology* topo,$/;"	f	class:ProtoMol::Output
initialize	framework/frontend/OutputCache.cpp	/^  void OutputCache::initialize(const Configuration* config, const Integrator* integrator, const GenericTopology* topo,$/;"	f	class:ProtoMol::OutputCache
initialize	framework/frontend/OutputCollection.cpp	/^  void OutputCollection::initialize(const Configuration* config, const Integrator* integrator, const GenericTopology* topo,$/;"	f	class:ProtoMol::OutputCollection
initialize	framework/integrators/BBKIntegrator.cpp	/^  void BBKIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::BBKIntegrator
initialize	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  void BSplineMOLLYIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
initialize	framework/integrators/DLMCIntegrator.cpp	/^  void DLMCIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::DLMCIntegrator
initialize	framework/integrators/DMDLeapfrogIntegrator.cpp	/^  void DMDLeapfrogIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::DMDLeapfrogIntegrator
initialize	framework/integrators/DihedralHMCIntegrator.cpp	/^  void DihedralHMCIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::DihedralHMCIntegrator
initialize	framework/integrators/EquilibriumMOLLYIntegrator.cpp	/^  void EquilibriumMOLLYIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::EquilibriumMOLLYIntegrator
initialize	framework/integrators/HMCIntegrator.cpp	/^    void HMCIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::HMCIntegrator
initialize	framework/integrators/ImpulseIntegrator.cpp	/^  void ImpulseIntegrator::initialize(GenericTopology *topo, Vector3DBlock$/;"	f	class:ProtoMol::ImpulseIntegrator
initialize	framework/integrators/Integrator.cpp	/^  void Integrator::initialize(GenericTopology *topo, $/;"	f	class:ProtoMol::Integrator
initialize	framework/integrators/LangevinImpulseIntegrator.cpp	/^  void LangevinImpulseIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::LangevinImpulseIntegrator
initialize	framework/integrators/LeapfrogIntegrator.cpp	/^  void LeapfrogIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::LeapfrogIntegrator
initialize	framework/integrators/MCIntegrator.cpp	/^  void MCIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::MCIntegrator
initialize	framework/integrators/MOLLYIntegrator.cpp	/^  void MOLLYIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::MOLLYIntegrator
initialize	framework/integrators/MTSIntegrator.cpp	/^  void MTSIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::MTSIntegrator
initialize	framework/integrators/Modifier.h	/^  inline void Modifier::initialize(GenericTopology *topo, $/;"	f	class:ProtoMol::Modifier
initialize	framework/integrators/NPTVerletIntegrator.cpp	/^  void NPTVerletIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::NPTVerletIntegrator
initialize	framework/integrators/NVTVerletIntegrator.cpp	/^  void NVTVerletIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::NVTVerletIntegrator
initialize	framework/integrators/NoseNVTLeapfrogIntegrator.cpp	/^  void NoseNVTLeapfrogIntegrator::initialize(GenericTopology *topo, $/;"	f	class:ProtoMol::NoseNVTLeapfrogIntegrator
initialize	framework/integrators/PLeapfrogIntegrator.cpp	/^  void PLeapfrogIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::PLeapfrogIntegrator
initialize	framework/integrators/PaulTrapIntegrator.cpp	/^  void PaulTrapIntegrator::initialize(GenericTopology *topo, $/;"	f	class:ProtoMol::PaulTrapIntegrator
initialize	framework/integrators/STSIntegrator.cpp	/^  void STSIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::STSIntegrator
initialize	framework/integrators/ShadowHMCIntegrator.cpp	/^    void ShadowHMCIntegrator::initialize( GenericTopology *topo,$/;"	f	class:ProtoMol::ShadowHMCIntegrator
initialize	framework/integrators/StandardIntegrator.cpp	/^  void StandardIntegrator::initialize(GenericTopology *topo,$/;"	f	class:ProtoMol::StandardIntegrator
initialize	framework/topology/ArrayCellListStructure.cpp	/^  void ArrayCellListStructure::initialize(const Vector3D& max, Vector3D cellSize){$/;"	f	class:ProtoMol::ArrayCellListStructure
initialize	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    void initialize(const Topology<PeriodicBoundaryConditions,CubicCellManager>* topo,$/;"	f	class:ProtoMol::CellListEnumerator
initialize	framework/topology/CellListEnumerator_standard.h	/^    void initialize(const Topology<VacuumBoundaryConditions,CubicCellManager>* topo,$/;"	f	class:ProtoMol::CellListEnumerator
initialize	framework/topology/CubicCellManager.cpp	/^  void CubicCellManager::initialize(CellListStructure& cellList,const Vector3D& min, const Vector3D& max, bool pbc) const{$/;"	f	class:ProtoMol::CubicCellManager
initializeForces	framework/integrators/StandardIntegrator.cpp	/^  void StandardIntegrator::initializeForces() {$/;"	f	class:ProtoMol::StandardIntegrator
initializeModifiers	framework/integrators/Integrator.cpp	/^  void Integrator::initializeModifiers(){$/;"	f	class:ProtoMol::Integrator
initialized	framework/parallel/Parallel.h	/^    static bool initialized()          {return myInitialized;}$/;"	f	class:ProtoMol::Parallel
insert	framework/base/Vector3DBlock.h	/^    iterator insert(iterator pos, const Vector3D& x)             {return vec.insert(pos,x);}                   $/;"	f	class:ProtoMol::Vector3DBlock
insert	framework/base/Vector3DBlock.h	/^    void insert(iterator pos, size_type n, const Vector3D& x)    {       vec.insert(pos,n,x);}           $/;"	f	class:ProtoMol::Vector3DBlock
insertionCode	framework/base/PDB.h	/^      std::string insertionCode;   \/\/\/< insertion_code	   $/;"	m	struct:ProtoMol::PDB::Atom
insertionCode	framework/base/PDB.h	/^      std::string insertionCode;   \/\/\/< insertion_code	   $/;"	m	struct:ProtoMol::PDB::Ter
instance	framework/frontend/Factory.h	/^    static Factory& instance(){$/;"	f	class:ProtoMol::Factory
instance	framework/frontend/HelpTextFactory.cpp	/^  HelpTextFactory& HelpTextFactory::instance(){$/;"	f	class:ProtoMol::HelpTextFactory
instance	framework/parallel/Parallel-FD.cpp	/^  Parallel& Parallel::instance(){$/;"	f	class:ProtoMol::Parallel
instance	framework/parallel/Parallel.cpp	/^  Parallel& Parallel::instance(){$/;"	f	class:ProtoMol::Parallel
int32	framework/imd/imd.h	/^    typedef TypeSelection::Int<4>::type   int32;$/;"	t	namespace:ProtoMol::IMD
int32	framework/io/DCDTrajectoryReader.h	/^    typedef TypeSelection::Int<4>::type   int32;$/;"	t	class:ProtoMol::DCDTrajectoryReader
int32	framework/io/DCDTrajectoryWriter.h	/^    typedef TypeSelection::Int<4>::type   int32;$/;"	t	class:ProtoMol::DCDTrajectoryWriter
int_type	framework/base/sstream_local.h	/^    typedef int         int_type;$/;"	t	class:std::stringbuf
integrateNode	framework/parallel/Parallel-FD.cpp	/^  void Parallel::integrateNode() {$/;"	f	class:ProtoMol::Parallel
integrateNode	framework/parallel/Parallel.cpp	/^  void Parallel::integrateNode() {$/;"	f	class:ProtoMol::Parallel
integrator	framework/integrators/IntegratorDefinition.h	/^    MakeableDefinition              integrator;$/;"	m	struct:ProtoMol::IntegratorDefinition
interpolate	framework/base/LookUpTableBase.h	/^    void interpolate(Real a,Real b,Real c,Real d,Real dt,Real& energy, Real& force) const{$/;"	f	class:ProtoMol::LookUpTableBase
interpolateForce	framework/base/Grid.h	/^  inline void Grid<TInterpolation>::interpolateForce(Real q, unsigned int index, Vector3D& force){$/;"	f	class:ProtoMol::Grid
interpolateForce	framework/base/MultiGrid.h	/^  inline void MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::interpolateForce(Real q, unsigned int index, Vector3D& force){$/;"	f	class:ProtoMol::MultiGrid
intoAdd	framework/base/ScalarStructure.cpp	/^  ScalarStructure & ScalarStructure::intoAdd(const ScalarStructure &e) {$/;"	f	class:ProtoMol::ScalarStructure
intoAdd	framework/base/Vector3D.h	/^    Vector3D &intoAdd(const Vector3D& b) {return (*this)+=b;}$/;"	f	struct:ProtoMol::Vector3D
intoAdd	framework/base/Vector3DBlock.h	/^    Vector3DBlock &intoAdd(const Vector3DBlock &x) { $/;"	f	class:ProtoMol::Vector3DBlock
intoAssign	framework/base/ScalarStructure.cpp	/^  ScalarStructure & ScalarStructure::intoAssign(const ScalarStructure &e) {$/;"	f	class:ProtoMol::ScalarStructure
intoAssign	framework/base/Vector3DBlock.h	/^    Vector3DBlock &intoAssign(const Vector3DBlock &x) { $/;"	f	class:ProtoMol::Vector3DBlock
intoDivide	framework/base/Vector3D.h	/^    Vector3D &intoDivide(Real w) {return (*this)\/=w;}$/;"	f	struct:ProtoMol::Vector3D
intoMultiply	framework/base/Vector3D.h	/^    Vector3D &intoMultiply(Real w) {return (*this)*=w;}$/;"	f	struct:ProtoMol::Vector3D
intoSubtract	framework/base/ScalarStructure.cpp	/^  ScalarStructure & ScalarStructure::intoSubtract(const ScalarStructure &e) {$/;"	f	class:ProtoMol::ScalarStructure
intoSubtract	framework/base/Vector3D.h	/^    Vector3D &intoSubtract(const Vector3D& b) {return (*this)-=b;}$/;"	f	struct:ProtoMol::Vector3D
intoSubtract	framework/base/Vector3DBlock.h	/^    Vector3DBlock &intoSubtract(const Vector3DBlock &x) {$/;"	f	class:ProtoMol::Vector3DBlock
intoWeighted	framework/base/Vector3DBlock.h	/^    Vector3DBlock &intoWeighted(Real weight, const Vector3DBlock &x) {$/;"	f	class:ProtoMol::Vector3DBlock
intoWeightedAdd	framework/base/Vector3D.h	/^    Vector3D &intoWeightedAdd(Real w, const Vector3D& b) {$/;"	f	struct:ProtoMol::Vector3D
intoWeightedAdd	framework/base/Vector3DBlock.h	/^    Vector3DBlock &intoWeightedAdd(Real weight, const Vector3DBlock &x) {$/;"	f	class:ProtoMol::Vector3DBlock
intoWeightedSubtract	framework/base/Vector3D.h	/^    Vector3D &intoWeightedSubtract(Real w, const Vector3D& b) {$/;"	f	struct:ProtoMol::Vector3D
intoWeightedSubtract	framework/base/Vector3DBlock.h	/^    Vector3DBlock &intoWeightedSubtract(Real weight, const Vector3DBlock &x) {$/;"	f	class:ProtoMol::Vector3DBlock
invert	framework/base/Matrix3by3.cpp	/^  bool Matrix3by3::invert()$/;"	f	class:ProtoMol::Matrix3by3
isAccessible	framework/base/systemutilities.cpp	/^  bool isAccessible(const string& fileName){$/;"	f	namespace:ProtoMol
isAccessible	framework/io/File.cpp	/^  bool File::isAccessible(){$/;"	f	class:ProtoMol::File
isBCC	tools/bccAnalyzer.cpp	/^static bool isBCC(XYZ xyz, Real eps, Real rest, Vector3D& normal, Real& d, Real& err, Real& minimal, Real& maximal,$/;"	f	file:
isBarrier	framework/parallel/Parallel.h	/^    static bool isBarrier()            {return myUseBarrier;}$/;"	f	class:ProtoMol::Parallel
isBlank	framework/base/stringutilities.cpp	/^  bool isBlank(const string& word){$/;"	f	namespace:ProtoMol
isBool	framework/base/stringutilities.cpp	/^  bool isBool(const string& word){$/;"	f	namespace:ProtoMol
isDynamic	framework/parallel/Parallel.h	/^    static bool isDynamic()            {return (myMode != ParallelType::STATIC);}$/;"	f	class:ProtoMol::Parallel
isEnabled	framework/integrators/Modifier.h	/^    bool isEnabled() const{return myEnable;}$/;"	f	class:ProtoMol::Modifier
isExclusionAtom	framework/topology/AngleInfo.cpp	/^  bool AngleInfo::isExclusionAtom()  const{$/;"	f	class:ProtoMol::AngleInfo
isForward	framework/integrators/Integrator.h	/^    bool isForward() const {return myForward;}$/;"	f	class:ProtoMol::Integrator
isIdDefined	framework/frontend/Output.cpp	/^  bool Output::isIdDefined(const Configuration* config) const{$/;"	f	class:ProtoMol::Output
isIdDefined	framework/frontend/OutputScreen.cpp	/^  bool OutputScreen::isIdDefined(const Configuration* config) const{$/;"	f	class:ProtoMol::OutputScreen
isInnerAtom	framework/topology/AngleInfo.cpp	/^  bool AngleInfo::isInnerAtom() const {$/;"	f	class:ProtoMol::AngleInfo
isInt	framework/base/stringutilities.cpp	/^  bool isInt(const string& word){$/;"	f	namespace:ProtoMol
isInternal	framework/integrators/ModifierAveraging.h	/^    virtual bool isInternal() const {return true;}$/;"	f	class:ProtoMol::ModifierAveraging
isInternal	framework/integrators/ModifierFriction.h	/^    virtual bool isInternal() const {return true;}$/;"	f	class:ProtoMol::ModifierFriction
isInternal	framework/integrators/ModifierIncrementTimestep.h	/^    virtual bool isInternal() const {return true;}$/;"	f	class:ProtoMol::ModifierIncrementTimestep
isInternal	framework/integrators/ModifierMetaRattleShake.h	/^    virtual bool isInternal() const {return false;}$/;"	f	class:ProtoMol::ModifierMetaRattleShake
isInternal	framework/integrators/ModifierMollification.h	/^    virtual bool isInternal() const {return true;}$/;"	f	class:ProtoMol::ModifierMollification
isInternal	framework/integrators/ModifierPostForceBarostat.h	/^    virtual bool isInternal() const {return true;}$/;"	f	class:ProtoMol::ModifierPostForceBarostat
isInternal	framework/integrators/ModifierPostForceThermostat.h	/^    virtual bool isInternal() const {return true;}$/;"	f	class:ProtoMol::ModifierPostForceThermostat
isInternal	framework/integrators/ModifierPreForceBarostat.h	/^    virtual bool isInternal() const {return true;}$/;"	f	class:ProtoMol::ModifierPreForceBarostat
isInternal	framework/integrators/ModifierPreForceThermostat.h	/^    virtual bool isInternal() const {return true;}$/;"	f	class:ProtoMol::ModifierPreForceThermostat
isInternal	framework/integrators/ModifierRemoveAngularMomentum.h	/^    virtual bool isInternal() const {return false;}$/;"	f	class:ProtoMol::ModifierRemoveAngularMomentum
isInternal	framework/integrators/ModifierRemoveLinearMomentum.h	/^    virtual bool isInternal() const {return false;}$/;"	f	class:ProtoMol::ModifierRemoveLinearMomentum
isInternal	framework/integrators/ModifierShadow.h	/^            virtual bool isInternal() const { return( false ); }$/;"	f	class:ProtoMol::ModifierShadow
isKeywordCharmm19	framework/io/PARReader.cpp	/^  bool PARReader::isKeywordCharmm19(const string& word){$/;"	f	class:ProtoMol::PARReader
isKeywordCharmm28	framework/io/PARReader.cpp	/^  bool PARReader::isKeywordCharmm28(const string& word) {$/;"	f	class:ProtoMol::PARReader
isLittleEndian	framework/base/systemutilities.cpp	/^    static bool isLittleEndian(){$/;"	f	struct:ProtoMol::Endian
isMPI	framework/parallel/Parallel-FD.cpp	/^  const bool   Parallel::isMPI = false;$/;"	m	class:ProtoMol::Parallel	file:
isMPI	framework/parallel/Parallel-FD.cpp	/^  const bool   Parallel::isMPI = true;$/;"	m	class:ProtoMol::Parallel	file:
isMPI	framework/parallel/Parallel.cpp	/^  const bool   Parallel::isMPI = false;$/;"	m	class:ProtoMol::Parallel	file:
isMPI	framework/parallel/Parallel.cpp	/^  const bool   Parallel::isMPI = true;$/;"	m	class:ProtoMol::Parallel	file:
isMPI	framework/parallel/Parallel.h	/^    static const bool       isMPI;$/;"	m	class:ProtoMol::Parallel
isOrthogonal	framework/topology/PeriodicBoundaryConditions.h	/^    bool isOrthogonal()      const {return myOrthogonal;};$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
isOrthogonal	framework/topology/VacuumBoundaryConditions.h	/^    bool isOrthogonal()  const {return true;};$/;"	f	class:ProtoMol::VacuumBoundaryConditions
isParallel	framework/base/FFTComplex.cpp	/^  bool FFTComplex::isParallel(){$/;"	f	class:ProtoMol::FFTComplex
isParallel	framework/base/TimerStatistic.h	/^    static bool isParallel(void)    {return myIsParallel;}$/;"	f	class:ProtoMol::TimerStatistic
isParallel	framework/parallel/Parallel.h	/^    static bool isParallel()           {return myIsParallel;}$/;"	f	class:ProtoMol::Parallel
isPrintable	framework/base/stringutilities.cpp	/^  bool isPrintable(const string& word){$/;"	f	namespace:ProtoMol
isReal	framework/base/stringutilities.cpp	/^  bool isReal(const string& word){$/;"	f	namespace:ProtoMol
isSigma	framework/base/BSpline.h	/^    static bool isSigma(unsigned int order){return (BSpline(order,0.0).theta[order-1] == 0.0 && BSpline(order,0.0).dTheta[order-1] == 0.0);}$/;"	f	class:ProtoMol::BSpline
isSigma	framework/base/Hermite.h	/^    static bool isSigma(unsigned int order){return (Hermite(order,0.0).theta[order-1] == 0.0 && Hermite(order,0.0).dTheta[order-1] == 0.0);}$/;"	f	class:ProtoMol::Hermite
isSigma	framework/base/Lagrange.h	/^    static bool isSigma(unsigned int order){return (Lagrange(order,0.0).theta[order-1] == 0.0 && Lagrange(order,0.0).dTheta[order-1] == 0.0);}$/;"	f	class:ProtoMol::Lagrange
isUInt	framework/base/stringutilities.cpp	/^  bool isUInt(const string& word){$/;"	f	namespace:ProtoMol
isVector	framework/base/stringutilities.cpp	/^  bool isVector(const string& word){$/;"	f	namespace:ProtoMol
isVector3D	framework/base/stringutilities.cpp	/^  bool isVector3D(const string& word){$/;"	f	namespace:ProtoMol
isVisited	framework/topology/AngleInfo.cpp	/^  bool AngleInfo::isVisited() const{$/;"	f	class:ProtoMol::AngleInfo
isblankchar	framework/base/stringutilities.cpp	/^  bool isblankchar(char c){$/;"	f	namespace:ProtoMol
isgLJParms	framework/topology/GenericTopology.h	/^    BankLennardJonesParameterTable isgLJParms;$/;"	m	class:ProtoMol::GenericTopology
isnan	framework/base/mathutilities.h	/^  inline int isnan(Real x) {$/;"	f	namespace:ProtoMol
isolateNode	framework/parallel/Parallel-FD.cpp	/^  void Parallel::isolateNode() {$/;"	f	class:ProtoMol::Parallel
isolateNode	framework/parallel/Parallel.cpp	/^  void Parallel::isolateNode() {$/;"	f	class:ProtoMol::Parallel
isprintablechar	framework/base/stringutilities.cpp	/^  bool isprintablechar(char c){$/;"	f	namespace:ProtoMol
istringstream	framework/base/sstream_local.h	/^    istringstream(const std::string& s, int which=ios::in) :$/;"	f	class:std::istringstream
istringstream	framework/base/sstream_local.h	/^    istringstream(int which=ios::in) :$/;"	f	class:std::istringstream
istringstream	framework/base/sstream_local.h	/^  class istringstream : public stringstreambase, public istream {$/;"	c	namespace:std
iterator	framework/base/Array_Fastest.h	/^    typedef T *       iterator;$/;"	t	class:ProtoMol::Array
iterator	framework/base/Array_Fastest.h	/^    typedef T *       iterator;$/;"	t	class:ProtoMol::RefArray
iterator	framework/base/Array_NoPartialSpecialization.h	/^      typedef T *       iterator;$/;"	t	class:ProtoMol::Array::RefArray
iterator	framework/base/Array_NoPartialSpecialization.h	/^    typedef T *       iterator;$/;"	t	class:ProtoMol::Array
iterator	framework/base/Configuration.h	/^    typedef ValueMapType::iterator	                  iterator;$/;"	t	class:ProtoMol::Configuration
iterator	framework/base/Vector3DBlock.h	/^    typedef std::vector<Vector3D>::iterator                  iterator;                                   $/;"	t	class:ProtoMol::Vector3DBlock
iterator	framework/frontend/HelpTextFactory.h	/^    typedef HelpTextMapType::iterator  iterator;$/;"	t	class:ProtoMol::HelpTextFactory
iterator	framework/frontend/OutputCollection.h	/^    typedef std::list<Output*>::iterator iterator;$/;"	t	class:ProtoMol::OutputCollection
iterator	framework/topology/ArrayCellListStructure.h	/^    typedef TContainer::iterator	      iterator;$/;"	t	class:ProtoMol::ArrayCellListStructure
j	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    CubicCellManager::CellListStructure::const_iterator i,j,the_beginning,the_end;$/;"	m	class:ProtoMol::CellListEnumerator
j	framework/topology/CellListEnumerator_standard.h	/^    CubicCellManager::CellListStructure::const_iterator i,j,the_beginning,the_end;$/;"	m	class:ProtoMol::CellListEnumerator
k	framework/base/simpleTypes.h	/^    int h;int k; int l;$/;"	m	struct:ProtoMol::TripleInt
k	framework/forces/HarmDihedralSystemForce.h	/^    Real k;$/;"	m	class:ProtoMol::HarmDihedralSystemForce
k_ub	framework/base/PAR.h	/^      Real k_ub;      \/\/\/< Urey-Bradley force constant$/;"	m	struct:ProtoMol::PAR::Angle
kappa	framework/forces/MagneticDipoleForce.h	/^    Real volum, expfactor, realChi, kappa;$/;"	m	class:ProtoMol::MagneticDipoleForce
kbT	framework/integrators/NPTVerletIntegrator.h	/^    const Real kbT;          \/\/  Target temperature multiplied by Boltzmann's constant.  Units: (kcal\/mol)$/;"	m	class:ProtoMol::NPTVerletIntegrator
kbT	framework/integrators/NVTVerletIntegrator.h	/^    const Real kbT;          \/\/  Target temperature multiplied by Boltzmann's constant.  Units: (kcal\/mol)$/;"	m	class:ProtoMol::NVTVerletIntegrator
kernel	framework/forces/CoulombForce.h	/^      static Real kernel(Real r)                      {return (1.0\/r);}$/;"	f	class:ProtoMol::CoulombForce::C1
kernel	framework/forces/CoulombForce.h	/^      static Real kernel(Real r)                      {return (1.0\/r);}$/;"	f	class:ProtoMol::CoulombForce::C2
kernel	framework/forces/CoulombForce.h	/^      static Real kernel(Real r)                      {return (1.0\/r);}$/;"	f	class:ProtoMol::CoulombForce::C3
kernel	framework/forces/CoulombForce.h	/^      static Real kernel(Real r)                      {return (1.0\/r);}$/;"	f	class:ProtoMol::CoulombForce::C4
kernelR	framework/forces/CoulombForce.h	/^      static Real kernelR(Real rr)                    {return (rr);}$/;"	f	class:ProtoMol::CoulombForce::C1
kernelR	framework/forces/CoulombForce.h	/^      static Real kernelR(Real rr)                    {return (rr);}$/;"	f	class:ProtoMol::CoulombForce::C2
kernelR	framework/forces/CoulombForce.h	/^      static Real kernelR(Real rr)                    {return (rr);}$/;"	f	class:ProtoMol::CoulombForce::C3
kernelR	framework/forces/CoulombForce.h	/^      static Real kernelR(Real rr)                    {return (rr);}$/;"	f	class:ProtoMol::CoulombForce::C4
keyword	framework/base/BSpline.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::BSpline
keyword	framework/base/Hermite.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::Hermite
keyword	framework/base/Lagrange.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::Lagrange
keyword	framework/base/Parameter.h	/^    std::string keyword;$/;"	m	struct:ProtoMol::Parameter
keyword	framework/forces/AngleSystemForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::AngleSystemForceBase
keyword	framework/forces/BondSystemForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::BondSystemForceBase
keyword	framework/forces/CompareForce.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::CompareForce
keyword	framework/forces/CoulombEwaldRealForce.h	/^    static const std::string keyword;      $/;"	m	class:ProtoMol::CoulombEwaldRealForce
keyword	framework/forces/CoulombEwaldRealTableForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::CoulombEwaldRealTableForceBase
keyword	framework/forces/CoulombForce.h	/^      static const std::string keyword;      $/;"	m	class:ProtoMol::CoulombForce::C1
keyword	framework/forces/CoulombForce.h	/^      static const std::string keyword;      $/;"	m	class:ProtoMol::CoulombForce::C2
keyword	framework/forces/CoulombForce.h	/^      static const std::string keyword;      $/;"	m	class:ProtoMol::CoulombForce::C3
keyword	framework/forces/CoulombForce.h	/^      static const std::string keyword;      $/;"	m	class:ProtoMol::CoulombForce::C4
keyword	framework/forces/CoulombForce.h	/^    static const std::string keyword;      $/;"	m	class:ProtoMol::CoulombForce
keyword	framework/forces/CoulombMultiGridDirectForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::CoulombMultiGridDirectForceBase
keyword	framework/forces/CoulombMultiGridDirectTableForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::CoulombMultiGridDirectTableForceBase
keyword	framework/forces/CoulombTableForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::CoulombTableForceBase
keyword	framework/forces/DihedralSystemForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::DihedralSystemForceBase
keyword	framework/forces/ElectricFieldSystemForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::ElectricFieldSystemForceBase
keyword	framework/forces/ExternalGravitationSystemForce.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::ExternalGravitationSystemForce
keyword	framework/forces/ExternalMagneticFieldExtendedForce.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::ExternalMagneticFieldExtendedForce
keyword	framework/forces/FrictionExtendedForce.h	/^  static const std::string keyword;$/;"	m	class:ProtoMol::FrictionExtendedForce
keyword	framework/forces/GravitationForce.h	/^    static const std::string keyword;      $/;"	m	class:ProtoMol::GravitationForce
keyword	framework/forces/HarmDihedralSystemForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::HarmDihedralSystemForceBase
keyword	framework/forces/ImproperSystemForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::ImproperSystemForceBase
keyword	framework/forces/LennardJonesForce.h	/^    static const std::string keyword;      $/;"	m	class:ProtoMol::LennardJonesForce
keyword	framework/forces/LennardJonesTableForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::LennardJonesTableForceBase
keyword	framework/forces/MagneticDipoleForce.h	/^    static const std::string keyword;      $/;"	m	class:ProtoMol::MagneticDipoleForce
keyword	framework/forces/MagneticDipoleMirrorSystemForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::MagneticDipoleMirrorSystemForceBase
keyword	framework/forces/NonbondedCutoffForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::NonbondedCutoffForceBase
keyword	framework/forces/NonbondedFullEwaldSystemForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForceBase
keyword	framework/forces/NonbondedFullSystemForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::NonbondedFullSystemForceBase
keyword	framework/forces/NonbondedMultiGridSystemForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForceBase
keyword	framework/forces/NonbondedPMEwaldSystemForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForceBase
keyword	framework/forces/NonbondedSimpleFullSystemForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::NonbondedSimpleFullSystemForceBase
keyword	framework/forces/PaulTrapExtendedForceBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::PaulTrapExtendedForceBase
keyword	framework/forces/SphericalSystemForce.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::SphericalSystemForce
keyword	framework/forces/TimeForce.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::TimeForce
keyword	framework/forces/WrapperMetaForce.h	/^    const std::string keyword;$/;"	m	class:ProtoMol::WrapperMetaForce
keyword	framework/frontend/OutputBSDL.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputBSDL
keyword	framework/frontend/OutputDCDTrajectory.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputDCDTrajectory
keyword	framework/frontend/OutputDiffusion.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputDiffusion
keyword	framework/frontend/OutputDihedrals.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputDihedrals
keyword	framework/frontend/OutputEnergies.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputEnergies
keyword	framework/frontend/OutputFinalPDBPos.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputFinalPDBPos
keyword	framework/frontend/OutputFinalXYZBinPos.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputFinalXYZBinPos
keyword	framework/frontend/OutputFinalXYZBinVel.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputFinalXYZBinVel
keyword	framework/frontend/OutputFinalXYZPos.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputFinalXYZPos
keyword	framework/frontend/OutputFinalXYZVel.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputFinalXYZVel
keyword	framework/frontend/OutputMomentum.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputMomentum
keyword	framework/frontend/OutputPDBFramePos.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputPDBFramePos
keyword	framework/frontend/OutputPaulTrap.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputPaulTrap
keyword	framework/frontend/OutputREMExchangeRate.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputREMExchangeRate
keyword	framework/frontend/OutputREMHistory.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputREMHistoryFile
keyword	framework/frontend/OutputScreen.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputScreen
keyword	framework/frontend/OutputState.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputState
keyword	framework/frontend/OutputTemperatures.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputTemperatures
keyword	framework/frontend/OutputXYZBinTrajectoryPos.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputXYZBinTrajectoryPos
keyword	framework/frontend/OutputXYZBinTrajectoryVel.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputXYZBinTrajectoryVel
keyword	framework/frontend/OutputXYZTrajectoryForce.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputXYZTrajectoryForce
keyword	framework/frontend/OutputXYZTrajectoryPos.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputXYZTrajectoryPos
keyword	framework/frontend/OutputXYZTrajectoryVel.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::OutputXYZTrajectoryVel
keyword	framework/imd/HapticSystemForce.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::HapticSystemForce
keyword	framework/imd/HapticSystemForceBase.h	/^  static const std::string keyword;$/;"	m	class:HapticSystemForceBase
keyword	framework/integrators/BBKIntegrator.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::BBKIntegrator
keyword	framework/integrators/BSplineMOLLYIntegrator.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
keyword	framework/integrators/DLMCIntegrator.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::DLMCIntegrator
keyword	framework/integrators/DMDLeapfrogIntegrator.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::DMDLeapfrogIntegrator
keyword	framework/integrators/DihedralHMCIntegrator.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::DihedralHMCIntegrator
keyword	framework/integrators/EquilibriumMOLLYIntegrator.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::EquilibriumMOLLYIntegrator
keyword	framework/integrators/HMCIntegrator.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::HMCIntegrator
keyword	framework/integrators/ImpulseIntegrator.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::ImpulseIntegrator
keyword	framework/integrators/LangevinImpulseIntegrator.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::LangevinImpulseIntegrator
keyword	framework/integrators/LeapfrogIntegrator.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::LeapfrogIntegrator
keyword	framework/integrators/NPTVerletIntegrator.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::NPTVerletIntegrator
keyword	framework/integrators/NVTVerletIntegrator.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::NVTVerletIntegrator
keyword	framework/integrators/NoseNVTLeapfrogIntegrator.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::NoseNVTLeapfrogIntegrator
keyword	framework/integrators/PLeapfrogIntegrator.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::PLeapfrogIntegrator
keyword	framework/integrators/PaulTrapIntegrator.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::PaulTrapIntegrator
keyword	framework/integrators/ShadowHMCIntegrator.h	/^            static const std::string keyword;$/;"	m	class:ProtoMol::ShadowHMCIntegrator
keyword	framework/topology/C1SwitchingFunctionBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::C1SwitchingFunctionBase
keyword	framework/topology/C2SwitchingFunctionBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::C2SwitchingFunctionBase
keyword	framework/topology/CmpCnCnSwitchingFunctionBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::CmpCnCnSwitchingFunctionBase
keyword	framework/topology/CnSwitchingFunctionBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::CnSwitchingFunctionBase
keyword	framework/topology/ComplementSwitchingFunctionBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::ComplementSwitchingFunctionBase
keyword	framework/topology/CubicCellManager.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::CubicCellManager
keyword	framework/topology/CutoffSwitchingFunctionBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::CutoffSwitchingFunctionBase
keyword	framework/topology/GenericTopology.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::GenericTopology
keyword	framework/topology/PeriodicBoundaryConditions.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
keyword	framework/topology/RangeSwitchingFunctionBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::RangeSwitchingFunctionBase
keyword	framework/topology/ShiftSwitchingFunctionBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::ShiftSwitchingFunctionBase
keyword	framework/topology/UniversalSwitchingFunctionBase.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::UniversalSwitchingFunctionBase
keyword	framework/topology/VacuumBoundaryConditions.h	/^    static const std::string keyword;$/;"	m	class:ProtoMol::VacuumBoundaryConditions
keywords	framework/frontend/HelpTextFactory.cpp	/^  string HelpTextFactory::keywords(){$/;"	f	class:ProtoMol::HelpTextFactory
kill	framework/frontend/Factory.h	/^    static void kill(){$/;"	f	class:ProtoMol::Factory
kill	framework/frontend/HelpTextFactory.cpp	/^  void HelpTextFactory::kill(){$/;"	f	class:ProtoMol::HelpTextFactory
kill	framework/parallel/Parallel-FD.cpp	/^  void Parallel::kill(){$/;"	f	class:ProtoMol::Parallel
kill	framework/parallel/Parallel.cpp	/^  void Parallel::kill(){$/;"	f	class:ProtoMol::Parallel
kineticEnergy	framework/frontend/OutputCache.cpp	/^  Real OutputCache::kineticEnergy() const{$/;"	f	class:ProtoMol::OutputCache
kineticEnergy	framework/topology/topologyutilities.cpp	/^  Real kineticEnergy(const GenericTopology* topology,$/;"	f	namespace:ProtoMol
kineticEnergyForAtomType	framework/topology/topologyutilities.cpp	/^  Real kineticEnergyForAtomType(const GenericTopology* topology,$/;"	f	namespace:ProtoMol
kineticEnergyForNonWater	framework/topology/topologyutilities.cpp	/^  Real kineticEnergyForNonWater(const GenericTopology* topology,$/;"	f	namespace:ProtoMol
kineticEnergyForWater	framework/topology/topologyutilities.cpp	/^  Real kineticEnergyForWater(const GenericTopology* topology,$/;"	f	namespace:ProtoMol
l	framework/base/simpleTypes.h	/^    int h;int k; int l;$/;"	m	struct:ProtoMol::TripleInt
l12	framework/integrators/EquilibriumMOLLYIntegrator.h	/^      Real l12;   \/\/ squared rest lenght of the constrain$/;"	m	struct:ProtoMol::EquilibriumMOLLYIntegrator::HydrogenBond
lambda	framework/base/Molecule.h	/^    Real lambda;$/;"	m	struct:ProtoMol::Molecule
lambda	framework/integrators/EquilibriumMOLLYIntegrator.h	/^      Real lambda;\/\/ Lambda of the constraint $/;"	m	struct:ProtoMol::EquilibriumMOLLYIntegrator::HydrogenBond
lap	framework/base/Timer.cpp	/^  TimeRep Timer::lap()$/;"	f	class:ProtoMol::Timer
lattice	framework/forces/OneAtomPairFull.h	/^    const std::vector<Vector3D>* lattice;$/;"	m	class:ProtoMol::OneAtomPairFull
lattice	framework/forces/OneAtomPairTwoFull.h	/^    const std::vector<Vector3D>* lattice;$/;"	m	class:ProtoMol::OneAtomPairTwoFull
len	protomol_config_windows.cpp	/^  int len;$/;"	v
len	protomol_config_windows.cpp	/^  socklen_t len;$/;"	v
length	framework/imd/imd.cpp	/^      int32 length;$/;"	m	struct:ProtoMol::IMD::<anonymous>	file:
lennardJonesBank	framework/topology/BankLennardJonesParameterTable.h	/^    std::vector<LennardJonesParameterTable> lennardJonesBank;$/;"	m	struct:ProtoMol::BankLennardJonesParameterTable
lennardJonesParameters	framework/topology/GenericTopology.h	/^    LennardJonesParameterTable lennardJonesParameters;$/;"	m	class:ProtoMol::GenericTopology
less	framework/base/Value.cpp	/^  inline bool Value::less(const Value& v1, const Value& v2){$/;"	f	class:ProtoMol::Value
less	framework/base/Value.cpp	/^  inline bool Value::less<Vector3D>(const Value&, const Value&){return false;}$/;"	f	class:ProtoMol::Value
less	framework/base/Value.cpp	/^  inline bool Value::less<vector<Real> >(const Value&, const Value&){return false;}$/;"	f	class:ProtoMol::Value
lessEqual	framework/base/Value.cpp	/^  inline bool Value::lessEqual(const Value& v1, const Value& v2){$/;"	f	class:ProtoMol::Value
lessEqual	framework/base/Value.cpp	/^  inline bool Value::lessEqual<Vector3D>(const Value&, const Value&){return false;}$/;"	f	class:ProtoMol::Value
lessEqual	framework/base/Value.cpp	/^  inline bool Value::lessEqual<vector<Real> >(const Value&, const Value&){return false;}$/;"	f	class:ProtoMol::Value
level	framework/integrators/Integrator.cpp	/^  int Integrator::level() const{$/;"	f	class:ProtoMol::Integrator
lift	framework/integrators/DLMCIntegrator.h	/^    bool lift;$/;"	m	class:ProtoMol::DLMCIntegrator
light_diffuse	compilerTests/glutTest.cpp	/^static GLfloat light_diffuse[] = {1.0, 0.0, 0.0, 1.0};  \/* Red diffuse light. *\/$/;"	v	file:
light_position	compilerTests/glutTest.cpp	/^static GLfloat light_position[] = {1.0, 1.0, 1.0, 0.0};  \/* Infinite light location. *\/$/;"	v	file:
linearMomentum	framework/frontend/OutputCache.cpp	/^  Vector3D OutputCache::linearMomentum() const{$/;"	f	class:ProtoMol::OutputCache
linearMomentum	framework/topology/topologyutilities.cpp	/^  Vector3D linearMomentum(const Vector3DBlock *velocities, $/;"	f	namespace:ProtoMol
listen	framework/imd/IMDElf.cpp	/^  int IMDElf::listen(int defport) {$/;"	f	class:ProtoMol::IMDElf
longRangeTerm	framework/forces/NonbondedMultiGridSystemForce.h	/^				     smooth>::longRangeTerm(const RealTopologyType* realTopo,$/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
low	framework/imd/imd.cpp	/^      unsigned int low     : 8;$/;"	m	struct:ProtoMol::IMD::<anonymous>	file:
lowBound	framework/frontend/OutputState.h	/^      Real lowBound;$/;"	m	struct:ProtoMol::OutputState::orderParam
lowDeltas	framework/topology/ExclusionTable.h	/^    ExclusionClass* lowDeltas;$/;"	m	class:ProtoMol::ExclusionTable
lowerboundExp2	framework/base/mathutilities.cpp	/^  Real lowerboundExp2(Real r){$/;"	f	namespace:ProtoMol
lowercase	framework/base/stringutilities.cpp	/^  string lowercase (const string& word){$/;"	f	namespace:ProtoMol
lowest	framework/imd/imd.cpp	/^      unsigned int lowest  : 8;$/;"	m	struct:ProtoMol::IMD::<anonymous>	file:
ltstrNocase	framework/base/stringutilities.h	/^  struct ltstrNocase {bool operator()(const std::string& s1, const std::string& s2) const;};$/;"	s	namespace:ProtoMol
ltstrNocaseOp	framework/base/stringutilities.cpp	/^  bool ltstrNocaseOp (const string& s1, const string& s2){$/;"	f	namespace:ProtoMol
m00	framework/base/Matrix3by3.h	/^    Real m00, m01, m02;$/;"	m	class:ProtoMol::Matrix3by3
m01	framework/base/Matrix3by3.h	/^    Real m00, m01, m02;$/;"	m	class:ProtoMol::Matrix3by3
m02	framework/base/Matrix3by3.h	/^    Real m00, m01, m02;$/;"	m	class:ProtoMol::Matrix3by3
m10	framework/base/Matrix3by3.h	/^    Real m10, m11, m12;$/;"	m	class:ProtoMol::Matrix3by3
m11	framework/base/Matrix3by3.h	/^    Real m10, m11, m12;$/;"	m	class:ProtoMol::Matrix3by3
m12	framework/base/Matrix3by3.h	/^    Real m10, m11, m12;$/;"	m	class:ProtoMol::Matrix3by3
m20	framework/base/Matrix3by3.h	/^    Real m20, m21, m22;$/;"	m	class:ProtoMol::Matrix3by3
m21	framework/base/Matrix3by3.h	/^    Real m20, m21, m22;$/;"	m	class:ProtoMol::Matrix3by3
m22	framework/base/Matrix3by3.h	/^    Real m20, m21, m22;$/;"	m	class:ProtoMol::Matrix3by3
m_Dimensions	framework/base/Array_Fastest.h	/^    size_t m_Dimensions[1];   $/;"	m	class:ProtoMol::ArraySizes
m_Dimensions	framework/base/Array_Fastest.h	/^    size_t m_Dimensions[N];$/;"	m	class:ProtoMol::ArraySize
m_NDimensions	framework/base/Array_Fastest.h	/^    size_type  m_NDimensions[N];  \/\/ Size of the N array dimensions$/;"	m	class:ProtoMol::Array
m_NDimensions	framework/base/Array_Fastest.h	/^    size_type m_NDimensions; \/\/ Array dimension$/;"	m	class:ProtoMol::RefArray
m_NDimensions	framework/base/Array_Fastest.h	/^    size_type m_NDimensions; \/\/ Array dimensions$/;"	m	class:ProtoMol::RefArray
m_NDimensions	framework/base/Array_NoPartialSpecialization.h	/^    size_type  m_NDimensions[N];  \/\/ Size of the N array dimensions$/;"	m	class:ProtoMol::Array
m_SubArrayLen	framework/base/Array_Fastest.h	/^    size_type  m_SubArrayLen[N];  \/\/ Size of each subarray$/;"	m	class:ProtoMol::Array
m_SubArrayLen	framework/base/Array_Fastest.h	/^    size_type m_SubArrayLen; \/\/ SubArray dimensions$/;"	m	class:ProtoMol::RefArray
m_SubArrayLen	framework/base/Array_NoPartialSpecialization.h	/^    size_type  m_SubArrayLen[N];  \/\/ Size of each subarray$/;"	m	class:ProtoMol::Array
m_TheSubArray	framework/base/Array_Fastest.h	/^    RefArray<T,N-1> m_TheSubArray;\/\/ The only RefArray element used $/;"	m	class:ProtoMol::Array
m_boolDummy	framework/base/Array_Fastest.h	/^    mutable bool m_boolDummy;$/;"	m	class:ProtoMol::RefArray
m_elem	framework/base/Stack.h	/^    T *m_elem;$/;"	m	class:ProtoMol::Stack
m_nArrayElements	framework/base/Array_Fastest.h	/^    size_type  m_nArrayElements; \/\/ Total number of array elements$/;"	m	class:ProtoMol::Array
m_nArrayElements	framework/base/Array_NoPartialSpecialization.h	/^    size_type  m_nArrayElements; \/\/ Total number of array elements$/;"	m	class:ProtoMol::Array
m_numElements	framework/base/Stack.h	/^    unsigned int m_numElements;$/;"	m	class:ProtoMol::Stack
m_pArrayElements	framework/base/Array_Fastest.h	/^    T *        m_pArrayElements; \/\/ Pointer to actual array elements$/;"	m	class:ProtoMol::Array
m_pArrayElements	framework/base/Array_NoPartialSpecialization.h	/^    T *        m_pArrayElements; \/\/ Pointer to actual array elements$/;"	m	class:ProtoMol::Array
m_pElements	framework/base/Array_Fastest.h	/^    mutable T *  m_pElements; \/\/ Point to SubArray with elements within Array$/;"	m	class:ProtoMol::RefArray
m_pElements	framework/base/Array_Fastest.h	/^    mutable T * m_pElements; \/\/ Point to elements within Array$/;"	m	class:ProtoMol::RefArray
m_pElements	framework/base/Array_NoPartialSpecialization.h	/^      T   * const     m_pElements; \/\/ Point to elements within Array$/;"	m	class:ProtoMol::Array::RefArray
m_pElements	framework/base/Array_NoPartialSpecialization.h	/^      T   * const m_pElements; \/\/ Point to SubArray with elements within Array$/;"	m	class:ProtoMol::Array::RefArray
m_pNDimensions	framework/base/Array_NoPartialSpecialization.h	/^      const size_type * const m_pNDimensions; \/\/ Array dimension$/;"	m	class:ProtoMol::Array::RefArray
m_pNDimensions	framework/base/Array_NoPartialSpecialization.h	/^      const size_type * const m_pNDimensions; \/\/ Array dimensions$/;"	m	class:ProtoMol::Array::RefArray
m_pSubArrayLen	framework/base/Array_NoPartialSpecialization.h	/^      const size_type * const m_pSubArrayLen; \/\/ SubArray dimensions$/;"	m	class:ProtoMol::Array::RefArray
m_size	framework/base/Stack.h	/^    unsigned int m_size;$/;"	m	class:ProtoMol::Stack
main	applications/protomol-app/protomol.cpp	/^int main(int argc, char **argv) {$/;"	f
main	compilerTests/glutTest.cpp	/^int main(int argc, char **argv) {$/;"	f
main	compilerTests/pngTest.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tools/bccAnalyzer.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tools/imageMerger.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tools/molOrientAnalyzer.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tools/par2par.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tools/paulTrap.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tools/pdb2pdb.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tools/rem/sequential/main.cc	/^int main(int argc, char* argv[]) {$/;"	f
make	framework/forces/CoulombEwaldRealForce.cpp	/^  CoulombEwaldRealForce CoulombEwaldRealForce::make(std::string& , const std::vector<Value>& values) {$/;"	f	class:ProtoMol::CoulombEwaldRealForce
make	framework/forces/CoulombEwaldRealTableForce.h	/^    static CoulombEwaldRealTableForce make(std::string& errMsg, const std::vector<Value>& values){$/;"	f	class:ProtoMol::CoulombEwaldRealTableForce
make	framework/forces/CoulombForce.h	/^    static CoulombForce make(std::string&, const std::vector<Value>&) {$/;"	f	class:ProtoMol::CoulombForce
make	framework/forces/CoulombMultiGridDirectForce.h	/^    static CoulombMultiGridDirectForce make(std::string&, const std::vector<Value>& values){return CoulombMultiGridDirectForce(values[0]);}$/;"	f	class:ProtoMol::CoulombMultiGridDirectForce
make	framework/forces/CoulombMultiGridDirectTableForce.h	/^    static CoulombMultiGridDirectTableForce make(std::string&, const std::vector<Value>& values){$/;"	f	class:ProtoMol::CoulombMultiGridDirectTableForce
make	framework/forces/CoulombTableForce.h	/^    static CoulombTableForce make(std::string& errMsg, const std::vector<Value>& values){$/;"	f	class:ProtoMol::CoulombTableForce
make	framework/forces/Force.cpp	/^  Force* Force::make(string& errMsg, const vector<Value>& values) const{$/;"	f	class:ProtoMol::Force
make	framework/forces/GravitationForce.cpp	/^  GravitationForce GravitationForce::make(std::string& ,const std::vector<Value>& values) {$/;"	f	class:ProtoMol::GravitationForce
make	framework/forces/LennardJonesForce.h	/^    static LennardJonesForce make(std::string& , const std::vector<Value>&) {$/;"	f	class:ProtoMol::LennardJonesForce
make	framework/forces/LennardJonesTableForce.h	/^    static LennardJonesTableForce make(std::string& errMsg, const std::vector<Value>& values){$/;"	f	class:ProtoMol::LennardJonesTableForce
make	framework/forces/MagneticDipoleForce.cpp	/^  MagneticDipoleForce MagneticDipoleForce::make(string& , const vector<Value>& values) {$/;"	f	class:ProtoMol::MagneticDipoleForce
make	framework/forces/OneAtomPair.h	/^    static OneAtomPair make(std::string& errMsg, std::vector<Value> values) {$/;"	f	class:ProtoMol::OneAtomPair
make	framework/forces/OneAtomPairFull.h	/^    static OneAtomPairFull make(std::string& errMsg, std::vector<Value> values) {$/;"	f	class:ProtoMol::OneAtomPairFull
make	framework/forces/OneAtomPairTwo.h	/^    static OneAtomPairTwo make(std::string& errMsg, std::vector<Value> values) {$/;"	f	class:ProtoMol::OneAtomPairTwo
make	framework/forces/OneAtomPairTwoFull.h	/^    static OneAtomPairTwoFull make(std::string& errMsg, std::vector<Value> values) {$/;"	f	class:ProtoMol::OneAtomPairTwoFull
make	framework/forces/OneMollyPair.h	/^    static OneMollyPair make(std::string& errMsg, std::vector<Value> values) {$/;"	f	class:ProtoMol::OneMollyPair
make	framework/forces/OneMollyPairTwo.h	/^    static OneMollyPairTwo make(std::string& errMsg, std::vector<Value> values) {$/;"	f	class:ProtoMol::OneMollyPairTwo
make	framework/frontend/ForceFactoryDetails.cpp	/^  Force* ForceFactoryDetails::make(string& errMsg, const string& id, vector<Value> values){$/;"	f	class:ProtoMol::ForceFactoryDetails
make	framework/frontend/IntegratorFactoryDetails.cpp	/^  Integrator* IntegratorFactoryDetails::make(string& errMsg, const string& definition){$/;"	f	class:ProtoMol::IntegratorFactoryDetails
make	framework/frontend/Output.cpp	/^  Output* Output::make(string& errMsg, const vector<Value>& values) const{$/;"	f	class:ProtoMol::Output
make	framework/frontend/OutputFactoryDetails.cpp	/^  Output* OutputFactoryDetails::make(string& errMsg, const string& id, const vector<Value>& values){$/;"	f	class:ProtoMol::OutputFactoryDetails
make	framework/frontend/TopologyFactoryDetails.cpp	/^  GenericTopology* TopologyFactoryDetails::make(string& errMsg, const Configuration* config){$/;"	f	class:ProtoMol::TopologyFactoryDetails
make	framework/frontend/TopologyFactoryDetails.cpp	/^  GenericTopology* TopologyFactoryDetails::make(string& errMsg, const string& id, const vector<Value>& values){$/;"	f	class:ProtoMol::TopologyFactoryDetails
make	framework/integrators/MTSIntegrator.cpp	/^  MTSIntegrator*  MTSIntegrator::make(string& errMsg, const vector<Value>& values, ForceGroup* fg, StandardIntegrator *nextIntegrator)const{$/;"	f	class:ProtoMol::MTSIntegrator
make	framework/integrators/STSIntegrator.cpp	/^  STSIntegrator*  STSIntegrator::make(string& errMsg, const vector<Value>& values, ForceGroup* fg)const{$/;"	f	class:ProtoMol::STSIntegrator
make	framework/topology/C1SwitchingFunction.cpp	/^  C1SwitchingFunction C1SwitchingFunction::make(string&, vector<Value> values) {$/;"	f	class:ProtoMol::C1SwitchingFunction
make	framework/topology/C2SwitchingFunction.cpp	/^  C2SwitchingFunction C2SwitchingFunction::make(string& errMsg, vector<Value> values) {$/;"	f	class:ProtoMol::C2SwitchingFunction
make	framework/topology/CmpCnCnSwitchingFunction.cpp	/^  CmpCnCnSwitchingFunction CmpCnCnSwitchingFunction::make(string& errMsg, vector<Value> values) {$/;"	f	class:ProtoMol::CmpCnCnSwitchingFunction
make	framework/topology/CnSwitchingFunction.cpp	/^    CnSwitchingFunction CnSwitchingFunction::make(string& errMsg, vector<Value> values) {$/;"	f	class:ProtoMol::CnSwitchingFunction
make	framework/topology/ComplementSwitchingFunction.h	/^    static ComplementSwitchingFunction make(std::string& errMsg,std::vector<Value> values) {$/;"	f	class:ProtoMol::ComplementSwitchingFunction
make	framework/topology/CubicCellManager.cpp	/^  CubicCellManager CubicCellManager::make(string& errMsg, vector<Value> values){$/;"	f	class:ProtoMol::CubicCellManager
make	framework/topology/CutoffSwitchingFunction.cpp	/^  CutoffSwitchingFunction CutoffSwitchingFunction::make(string& , vector<Value> values) {$/;"	f	class:ProtoMol::CutoffSwitchingFunction
make	framework/topology/GenericTopology.cpp	/^  GenericTopology* GenericTopology::make(string& errMsg, const vector<Value>& values)const{$/;"	f	class:ProtoMol::GenericTopology
make	framework/topology/PeriodicBoundaryConditions.cpp	/^  PeriodicBoundaryConditions PeriodicBoundaryConditions::make(string& errMsg, vector<Value> values){$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
make	framework/topology/RangeSwitchingFunction.h	/^  RangeSwitchingFunction<TOriginalSwitchingFunction> RangeSwitchingFunction<TOriginalSwitchingFunction>::make(std::string& errMsg,std::vector<Value> values) {$/;"	f	class:ProtoMol::RangeSwitchingFunction
make	framework/topology/ShiftSwitchingFunction.cpp	/^  ShiftSwitchingFunction ShiftSwitchingFunction::make(string& , vector<Value> values) {$/;"	f	class:ProtoMol::ShiftSwitchingFunction
make	framework/topology/UniversalSwitchingFunction.h	/^    static UniversalSwitchingFunction make(std::string&, std::vector<Value>) {$/;"	f	class:ProtoMol::UniversalSwitchingFunction
make	framework/topology/VacuumBoundaryConditions.cpp	/^  VacuumBoundaryConditions VacuumBoundaryConditions::make(string& , vector<Value>) {$/;"	f	class:ProtoMol::VacuumBoundaryConditions
makeCollection	framework/frontend/OutputFactoryDetails.cpp	/^  OutputCollection* OutputFactoryDetails::makeCollection(string& errMsg, const Configuration* config){$/;"	f	class:ProtoMol::OutputFactoryDetails
makeCompareForce	framework/forces/ExtendedForce.cpp	/^  CompareForce* ExtendedForce::makeCompareForce(Force* actualForce, CompareForce* compareForce) const{$/;"	f	class:ProtoMol::ExtendedForce
makeCompareForce	framework/forces/Force.cpp	/^  CompareForce* Force::makeCompareForce(Force* actualForce, CompareForce* compareForce) const{$/;"	f	class:ProtoMol::Force
makeCompareForce	framework/forces/SystemForce.cpp	/^  CompareForce* SystemForce::makeCompareForce(Force* actualForce, CompareForce* compareForce) const{$/;"	f	class:ProtoMol::SystemForce
makeTimeForce	framework/forces/ExtendedForce.cpp	/^  TimeForce* ExtendedForce::makeTimeForce(Force* actualForce) const{$/;"	f	class:ProtoMol::ExtendedForce
makeTimeForce	framework/forces/Force.cpp	/^  TimeForce* Force::makeTimeForce(Force* actualForce) const{$/;"	f	class:ProtoMol::Force
makeTimeForce	framework/forces/SystemForce.cpp	/^  TimeForce* SystemForce::makeTimeForce(Force* actualForce) const{$/;"	f	class:ProtoMol::SystemForce
mass	framework/base/AtomType.h	/^    Real mass;              \/\/\/< The mass of this atom type.$/;"	m	struct:ProtoMol::AtomType
mass	framework/base/Molecule.h	/^    Real mass;$/;"	m	struct:ProtoMol::Molecule
mass	framework/base/PSF.h	/^      Real mass;                \/\/\/< mass [amu]$/;"	m	struct:ProtoMol::PSF::Atom
mass	framework/frontend/OutputCache.cpp	/^  Real OutputCache::mass() const{$/;"	f	class:ProtoMol::OutputCache
master	framework/parallel/Parallel-FD.cpp	/^  static const int master = 0;$/;"	v	file:
master	framework/parallel/Parallel.cpp	/^  static const int master = 0;$/;"	v	file:
max	framework/base/fft.c	31;"	d	file:
max	framework/base/mathutilities.h	/^  inline T max(const T& a, const T& b, const T& c){ $/;"	f	namespace:ProtoMol
max	framework/base/mathutilities.h	/^  inline T max(const T& a, const T& b, const T& c, const T& d) {$/;"	f	namespace:ProtoMol
max	framework/topology/GenericTopology.h	/^    mutable Vector3D max;$/;"	m	class:ProtoMol::GenericTopology
maxGDim	framework/integrators/EquilibriumMOLLYIntegrator.h	/^    enum { maxGDim=4};$/;"	e	enum:ProtoMol::EquilibriumMOLLYIntegrator::<anonymous>
maxItems	framework/base/mathutilities.h	/^    unsigned int maxItems;$/;"	m	class:ProtoMol::WindowAve
max_size	framework/base/Vector3DBlock.h	/^    size_type max_size() const                                   {return vec.max_size();}                   $/;"	f	class:ProtoMol::Vector3DBlock
mediForceModify	framework/integrators/Integrator.cpp	/^  void Integrator::mediForceModify(){$/;"	f	class:ProtoMol::Integrator
mergeString	framework/base/stringutilities.cpp	/^  string mergeString(const vector<string>& id){$/;"	f	namespace:ProtoMol
metropolisTest	framework/integrators/DihedralHMCIntegrator.cpp	/^  bool DihedralHMCIntegrator::metropolisTest(Real newEnergy, Real oldEnergy, Real theTemperature, Real &acceptProb) {$/;"	f	class:ProtoMol::DihedralHMCIntegrator
metropolisTest	framework/integrators/MCIntegrator.cpp	/^  bool MCIntegrator::metropolisTest( Real newValue, Real oldValue ) {$/;"	f	class:ProtoMol::MCIntegrator
metropolisTest	framework/integrators/MCIntegrator.cpp	/^  bool MCIntegrator::metropolisTest( Real newValue, Real oldValue,$/;"	f	class:ProtoMol::MCIntegrator
metropolisTest	framework/integrators/MCIntegrator.cpp	/^  bool MCIntegrator::metropolisTest() {$/;"	f	class:ProtoMol::MCIntegrator
min	framework/base/fft.c	28;"	d	file:
min	framework/base/mathutilities.h	/^  inline T min(const T& a, const T& b, const T& c){ $/;"	f	namespace:ProtoMol
min	framework/base/mathutilities.h	/^  inline T min(const T& a, const T& b, const T& c, const T& d) {$/;"	f	namespace:ProtoMol
min	framework/topology/GenericTopology.h	/^    mutable Vector3D min;$/;"	m	class:ProtoMol::GenericTopology
minimalDifference	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D minimalDifference(const Vector3D &c1, const Vector3D &c2) const{$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
minimalDifference	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D minimalDifference(const Vector3D &c1, const Vector3D &c2, Real& distSquared) const{$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
minimalDifference	framework/topology/SemiGenericTopology.h	/^    virtual Vector3D minimalDifference(const Vector3D &c1, const Vector3D &c2) const{ return boundaryConditions.minimalDifference(c1,c2); }$/;"	f	class:ProtoMol::SemiGenericTopology
minimalDifference	framework/topology/VacuumBoundaryConditions.h	/^    Vector3D minimalDifference(const Vector3D &c1, const Vector3D &c2) const {Vector3D diff(c2); diff -= c1; return diff; }$/;"	f	class:ProtoMol::VacuumBoundaryConditions
minimalDifference	framework/topology/VacuumBoundaryConditions.h	/^    Vector3D minimalDifference(const Vector3D &c1, const Vector3D &c2, Real& distSquared) const{Vector3D diff(c2); diff -= c1;distSquared = diff.normSquared(); return diff;}$/;"	f	class:ProtoMol::VacuumBoundaryConditions
minimalImage	framework/topology/SemiGenericTopology.h	/^    virtual void minimalImage(Vector3DBlock& positions){$/;"	f	class:ProtoMol::SemiGenericTopology
minimalMolecularDistances	framework/topology/GenericTopology.h	/^    bool minimalMolecularDistances;$/;"	m	class:ProtoMol::GenericTopology
minimalPosition	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D minimalPosition(const Vector3D &c) const{$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
minimalPosition	framework/topology/SemiGenericTopology.h	/^    virtual Vector3D minimalPosition(const Vector3D &c) const{ return Vector3D(boundaryConditions.minimalPosition(c)); }$/;"	f	class:ProtoMol::SemiGenericTopology
minimalPosition	framework/topology/VacuumBoundaryConditions.h	/^    Vector3D minimalPosition(const Vector3D &c) const {return c;}$/;"	f	class:ProtoMol::VacuumBoundaryConditions
minimalPositions	framework/frontend/OutputCache.cpp	/^  const Vector3DBlock*             OutputCache::minimalPositions() const{$/;"	f	class:ProtoMol::OutputCache
minimalTranslationDifference	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D minimalTranslationDifference(const Vector3D & c1, const Vector3D &c2) const {$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
minimalTranslationDifference	framework/topology/VacuumBoundaryConditions.h	/^    Vector3D minimalTranslationDifference(const Vector3D &, const Vector3D &) const {return Vector3D(0.0,0.0,0.0); }$/;"	f	class:ProtoMol::VacuumBoundaryConditions
minimalTranslationPosition	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D minimalTranslationPosition(const Vector3D &c) const {$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
minimalTranslationPosition	framework/topology/VacuumBoundaryConditions.h	/^    Vector3D minimalTranslationPosition(const Vector3D &) const {return Vector3D(0.0,0.0,0.0); }$/;"	f	class:ProtoMol::VacuumBoundaryConditions
mode	framework/base/sstream_local.h	/^    ios::open_mode              mode;$/;"	m	class:std::stringbuf
molecularCenterOfMass	framework/topology/topologyutilities.cpp	/^  Vector3D molecularCenterOfMass(const vector<int> &atomList, $/;"	f	namespace:ProtoMol
molecularKineticEnergy	framework/frontend/OutputCache.cpp	/^  Real OutputCache::molecularKineticEnergy() const{$/;"	f	class:ProtoMol::OutputCache
molecularKineticEnergy	framework/topology/topologyutilities.cpp	/^  Real molecularKineticEnergy(const GenericTopology* topology,$/;"	f	namespace:ProtoMol
molecularMomentum	framework/topology/topologyutilities.cpp	/^  Vector3D molecularMomentum(const vector<int> &atomList, $/;"	f	namespace:ProtoMol
molecularPressure	framework/base/ScalarStructure.h	/^  inline Real ScalarStructure::molecularPressure(Real volume) const {$/;"	f	class:ProtoMol::ScalarStructure
molecularPressure	framework/frontend/OutputCache.cpp	/^  Real OutputCache::molecularPressure() const{$/;"	f	class:ProtoMol::OutputCache
molecularTemperature	framework/frontend/OutputCache.cpp	/^  Real OutputCache::molecularTemperature() const{$/;"	f	class:ProtoMol::OutputCache
molecularVirial	framework/base/ScalarStructure.cpp	/^  bool ScalarStructure::molecularVirial(bool doMolecularVirial){$/;"	f	class:ProtoMol::ScalarStructure
molecularVirial	framework/base/ScalarStructure.h	/^    bool molecularVirial() const {return myDoMolecularVirial;}$/;"	f	class:ProtoMol::ScalarStructure
molecule	framework/base/Atom.h	/^    int molecule;$/;"	m	struct:ProtoMol::Atom
molecules	framework/topology/GenericTopology.h	/^    std::vector<Molecule> molecules; $/;"	m	class:ProtoMol::GenericTopology
mollification	framework/integrators/MOLLYIntegrator.cpp	/^  void MOLLYIntegrator::mollification(){$/;"	f	class:ProtoMol::MOLLYIntegrator
momentum	framework/base/Molecule.h	/^    Vector3D momentum;$/;"	m	struct:ProtoMol::Molecule
mpiAbort	framework/parallel/Parallel-FD.cpp	/^  void mpiAbort(){$/;"	f	namespace:ProtoMol
mpiAbort	framework/parallel/Parallel.cpp	/^  void mpiAbort(){$/;"	f	namespace:ProtoMol
mpiEndSerial	framework/parallel/Parallel-FD.cpp	/^  void mpiEndSerial(bool exludeMaster){$/;"	f	namespace:ProtoMol
mpiEndSerial	framework/parallel/Parallel.cpp	/^  void mpiEndSerial(bool exludeMaster){$/;"	f	namespace:ProtoMol
mpiExit	framework/parallel/Parallel-FD.cpp	/^  void mpiExit(){$/;"	f	namespace:ProtoMol
mpiExit	framework/parallel/Parallel.cpp	/^  void mpiExit(){$/;"	f	namespace:ProtoMol
mpiStartSerial	framework/parallel/Parallel-FD.cpp	/^  void mpiStartSerial(bool exludeMaster){$/;"	f	namespace:ProtoMol
mpiStartSerial	framework/parallel/Parallel.cpp	/^  void mpiStartSerial(bool exludeMaster){$/;"	f	namespace:ProtoMol
multiplicity	framework/base/PAR.h	/^      int multiplicity;   \/\/\/< multiplicity$/;"	m	struct:ProtoMol::PAR::Dihedral
multiplicity	framework/topology/Torsion.h	/^    int multiplicity;                  \/\/\/< The number of terms describing the potential energy of this torsion.$/;"	m	class:ProtoMol::Torsion
multiply	framework/base/Vector3D.h	/^    Vector3D multiply(Real w) const {return (*this)*w;}$/;"	f	struct:ProtoMol::Vector3D
my05Cutoff_3	framework/topology/C1SwitchingFunction.h	/^    Real myCutoff, myCutoff2, myCutoff_3, my15Cutoff_1,my05Cutoff_3,my15Cutoff_3;$/;"	m	class:ProtoMol::C1SwitchingFunction
my15Cutoff_1	framework/topology/C1SwitchingFunction.h	/^    Real myCutoff, myCutoff2, myCutoff_3, my15Cutoff_1,my05Cutoff_3,my15Cutoff_3;$/;"	m	class:ProtoMol::C1SwitchingFunction
my15Cutoff_3	framework/topology/C1SwitchingFunction.h	/^    Real myCutoff, myCutoff2, myCutoff_3, my15Cutoff_1,my05Cutoff_3,my15Cutoff_3;$/;"	m	class:ProtoMol::C1SwitchingFunction
my2AlphaPI	framework/forces/CoulombEwaldRealForce.h	/^    Real my2AlphaPI;$/;"	m	class:ProtoMol::CoulombEwaldRealForce
my2AlphaPI	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real my2AlphaPI;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
my2AlphaPI	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real my2AlphaPI;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
my4Cutoff_2	framework/topology/ShiftSwitchingFunction.h	/^    Real my4Cutoff_2;$/;"	m	class:ProtoMol::ShiftSwitchingFunction
myA	framework/forces/ElectricFieldSystemForce.h	/^    Real myA;$/;"	m	class:ProtoMol::ElectricFieldSystemForce
myA	framework/forces/PaulTrapExtendedForce.h	/^    Real myA;$/;"	m	class:ProtoMol::PaulTrapExtendedForce
myAbort	framework/base/Report.h	/^      bool myAbort;$/;"	m	class:ProtoMol::Report::MyStreamer
myAbortFunction	framework/base/systemutilities.cpp	/^  static void (*myAbortFunction)() = NULL;$/;"	v	file:
myAccuracy	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myAccuracy;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myAccuracy	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myAccuracy;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myActualForce	framework/forces/CompareForce.h	/^    Force* myActualForce;$/;"	m	class:ProtoMol::CompareForce
myActualForce	framework/forces/TimeForce.h	/^    Force* myActualForce;$/;"	m	class:ProtoMol::TimeForce
myAlias	framework/base/Makeable.h	/^    std::string myAlias;$/;"	m	class:ProtoMol::Makeable
myAliasExemplars	framework/frontend/Factory.h	/^    std::map<std::string,const Type*,ltstrNocase> myAliasExemplars; $/;"	m	class:ProtoMol::FactoryBase
myAliases	framework/base/Configuration.h	/^    AliasMapType myAliases;$/;"	m	class:ProtoMol::Configuration
myAlign	framework/base/LookUpTableBase.h	/^    unsigned int       myAlign;$/;"	m	class:ProtoMol::LookUpTableBase
myAllNodes	framework/base/Report.h	/^      bool myAllNodes;$/;"	m	class:ProtoMol::Report::MyStreamer
myAllNodesSerial	framework/base/Report.h	/^      bool myAllNodesSerial;$/;"	m	class:ProtoMol::Report::MyStreamer
myAllSlavesSerial	framework/base/Report.h	/^      bool myAllSlavesSerial;$/;"	m	class:ProtoMol::Report::MyStreamer
myAlpha	framework/base/Grid.h	/^    Real myAlpha;$/;"	m	class:ProtoMol::Grid
myAlpha	framework/forces/CoulombEwaldRealForce.h	/^    Real myAlpha;$/;"	m	class:ProtoMol::CoulombEwaldRealForce
myAlpha	framework/forces/CoulombEwaldRealTableForce.h	/^    Real myAlpha;$/;"	m	class:ProtoMol::CoulombEwaldRealTableForce
myAlpha	framework/forces/CoulombEwaldRealTableForceBase.h	/^      Real myAlpha;$/;"	m	class:ProtoMol::CoulombEwaldRealTableForceBase::LookUpValues
myAlpha	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myAlpha;             \/\/ $/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myAlpha	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myAlpha;             \/\/ $/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myAlpha	framework/forces/PaulTrapExtendedForce.h	/^    Real myAlpha;$/;"	m	class:ProtoMol::PaulTrapExtendedForce
myAlphaDefault	framework/forces/NonbondedFullEwaldSystemForce.h	/^    bool myAlphaDefault;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myAlphaDefault	framework/forces/NonbondedPMEwaldSystemForce.h	/^    bool myAlphaDefault;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myAlphaR04	framework/forces/PaulTrapExtendedForce.h	/^    Real myAlphaR04;$/;"	m	class:ProtoMol::PaulTrapExtendedForce
myAlphaSquared	framework/forces/CoulombEwaldRealForce.h	/^    Real myAlphaSquared;$/;"	m	class:ProtoMol::CoulombEwaldRealForce
myAlphaSquared	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myAlphaSquared;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myAlphaSquared	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myAlphaSquared;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myAlphaSquaredr	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myAlphaSquaredr;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myAlphaSquaredr	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myAlphaSquaredr;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myAngle	framework/integrators/BSplineMOLLYIntegrator.h	/^    bool myAngle;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myAngleFilter	framework/forces/OneMollyPair.h	/^    std::vector< ReducedHessAngle > *myAngleFilter;$/;"	m	class:ProtoMol::OneMollyPair
myAngleFilter	framework/forces/OneMollyPairTwo.h	/^    std::vector< ReducedHessAngle > *myAngleFilter;$/;"	m	class:ProtoMol::OneMollyPairTwo
myAngleFilter	framework/integrators/BSplineMOLLYIntegrator.h	/^    std::vector<ReducedHessAngle> *myAngleFilter;  $/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myAngleIndexes	framework/integrators/BSplineMOLLYIntegrator.h	/^    std::vector<AngleIndex> myAngleIndexes;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myAngles	framework/integrators/DihedralHMCIntegrator.h	/^    std::vector< Real >* myAngles;$/;"	m	class:ProtoMol::DihedralHMCIntegrator
myAnglesSet	framework/integrators/DihedralHMCIntegrator.h	/^    bool myAnglesSet;    $/;"	m	class:ProtoMol::DihedralHMCIntegrator
myAngularMomentum	framework/frontend/OutputCache.h	/^    mutable Vector3D myAngularMomentum;$/;"	m	class:ProtoMol::OutputCache
myArray	framework/base/FFTComplex.cpp	/^    zomplex* myArray;$/;"	m	class:ProtoMol::FFTInternal	file:
myArray	framework/topology/ArrayCellListStructure.h	/^    TContainer  myArray;$/;"	m	class:ProtoMol::ArrayCellListStructure
myAtomCount	framework/base/Grid.h	/^    unsigned int myAtomCount;$/;"	m	class:ProtoMol::Grid
myAtomTypes	framework/io/XYZTrajectoryWriter.h	/^    const std::vector<AtomType>* myAtomTypes;$/;"	m	class:ProtoMol::XYZTrajectoryWriter
myAtoms	framework/frontend/OutputCache.h	/^    std::vector<PDB::Atom> myAtoms;$/;"	m	class:ProtoMol::OutputCache
myAtoms	framework/io/PDBReader.h	/^    std::vector<PDB::Atom>* myAtoms;$/;"	m	class:ProtoMol::PDBReader
myAtoms	framework/io/XYZTrajectoryWriter.h	/^    const std::vector<Atom>* myAtoms;$/;"	m	class:ProtoMol::XYZTrajectoryWriter
myAutofit	framework/io/XFigWriter.h	/^    bool       myAutofit;$/;"	m	class:ProtoMol::XFigWriter
myAvailableId	framework/parallel/Parallel-FD.cpp	/^  int          Parallel::myAvailableId    = 0;$/;"	m	class:ProtoMol::Parallel	file:
myAvailableId	framework/parallel/Parallel.cpp	/^  int          Parallel::myAvailableId    = 0;$/;"	m	class:ProtoMol::Parallel	file:
myAvailableId	framework/parallel/Parallel.h	/^    static int              myAvailableId;   \/\/\/< Actual master-slave id, -1 for the master$/;"	m	class:ProtoMol::Parallel
myAvailableNum	framework/parallel/Parallel-FD.cpp	/^  int          Parallel::myAvailableNum   = 1;$/;"	m	class:ProtoMol::Parallel	file:
myAvailableNum	framework/parallel/Parallel.cpp	/^  int          Parallel::myAvailableNum   = 1;$/;"	m	class:ProtoMol::Parallel	file:
myAvailableNum	framework/parallel/Parallel.h	/^    static int              myAvailableNum;  \/\/\/< Available number of nodes for computation$/;"	m	class:ProtoMol::Parallel
myAveragedPositions	framework/integrators/EquilibriumMOLLYIntegrator.h	/^    Vector3DBlock* myAveragedPositions;$/;"	m	class:ProtoMol::EquilibriumMOLLYIntegrator
myAxes	framework/io/XFigWriter.h	/^    bool       myAxes;$/;"	m	class:ProtoMol::XFigWriter
myB	framework/forces/ExternalMagneticFieldExtendedForce.h	/^    Vector3D myB;$/;"	m	class:ProtoMol::ExternalMagneticFieldExtendedForce
myB	framework/integrators/BSplineMOLLYIntegrator.h	/^    Vector3DBlock *myB;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myBathPosition	framework/integrators/NoseNVTLeapfrogIntegrator.h	/^    Real           myBathPosition;$/;"	m	class:ProtoMol::NoseNVTLeapfrogIntegrator
myBathPosition	framework/integrators/PaulTrapIntegrator.h	/^    Real           myBathPosition;$/;"	m	class:ProtoMol::PaulTrapIntegrator
myBathVelocity	framework/integrators/PaulTrapIntegrator.h	/^    Real           myBathVelocity;$/;"	m	class:ProtoMol::PaulTrapIntegrator
myBegin	framework/topology/ArrayCellListStructure.h	/^    iterator          myBegin,myEnd;$/;"	m	class:ProtoMol::ArrayCellListStructure
myBeginConst	framework/topology/ArrayCellListStructure.h	/^    const_iterator    myBeginConst,myEndConst;$/;"	m	class:ProtoMol::ArrayCellListStructure
myBeta	framework/integrators/Integrator.cpp	/^  Real          Integrator::myBeta = 0.;$/;"	m	class:ProtoMol::Integrator	file:
myBeta	framework/integrators/Integrator.h	/^    static Real myBeta;$/;"	m	class:ProtoMol::Integrator
myBeta	framework/integrators/ModifierShadow.h	/^            Real & myBeta;$/;"	m	class:ProtoMol::ModifierShadow
myBlockList	framework/parallel/Parallel-FD.cpp	/^  vector<int>  Parallel::myBlockList;$/;"	m	class:ProtoMol::Parallel	file:
myBlockList	framework/parallel/Parallel.cpp	/^  vector<int>  Parallel::myBlockList;$/;"	m	class:ProtoMol::Parallel	file:
myBlockList	framework/parallel/Parallel.h	/^    static std::vector<int> myBlockList;     \/\/\/< List of of the force partitioning$/;"	m	class:ProtoMol::Parallel
myBlockSize	framework/forces/NonbondedFullSystemForce.h	/^    unsigned int myBlockSize;$/;"	m	class:ProtoMol::NonbondedFullSystemForce
myBlockSize	framework/forces/NonbondedSimpleFullSystemForce.h	/^    unsigned int myBlockSize;$/;"	m	class:ProtoMol::NonbondedSimpleFullSystemForce
myBlocksCorrection	framework/base/MultiGrid.h	/^    std::vector<std::vector<int> > myBlocksCorrection; \/\/\/< List of blocks for the correction$/;"	m	class:ProtoMol::MultiGrid
myBond	framework/integrators/BSplineMOLLYIntegrator.h	/^    bool myBond;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myBrentMaxima	framework/frontend/OutputCache.h	/^    mutable std::vector< std::vector< Real > >* myBrentMaxima;$/;"	m	class:ProtoMol::OutputCache
myBuffer	framework/frontend/OutputFile.h	/^    std::stringstream myBuffer;$/;"	m	class:ProtoMol::OutputFile
myBuffer	framework/parallel/Parallel-FD.cpp	/^  int*         Parallel::myBuffer         = NULL;$/;"	m	class:ProtoMol::Parallel	file:
myBuffer	framework/parallel/Parallel.cpp	/^  int*         Parallel::myBuffer         = NULL;$/;"	m	class:ProtoMol::Parallel	file:
myBuffer	framework/parallel/Parallel.h	/^    static int*             myBuffer;        \/\/\/< Bsend buffer$/;"	m	class:ProtoMol::Parallel
myBxAngle	framework/integrators/BSplineMOLLYIntegrator.h	/^    std::vector<ReducedHessAngle> *myBxAngle;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myC	framework/forces/ElectricFieldSystemForce.h	/^    Real myC;$/;"	m	class:ProtoMol::ElectricFieldSystemForce
myC	framework/integrators/ShadowHMCIntegrator.h	/^            Real myC,$/;"	m	class:ProtoMol::ShadowHMCIntegrator
myCMax	framework/base/MultiGrid.h	/^    Vector3D myCMax;          \/\/ $/;"	m	class:ProtoMol::MultiGrid
myCMin	framework/base/MultiGrid.h	/^    Vector3D myCMin;          \/\/ $/;"	m	class:ProtoMol::MultiGrid
myCache	framework/frontend/Factory.h	/^    mutable bool myCache;$/;"	m	class:ProtoMol::FactoryBase
myCache	framework/frontend/Output.h	/^    const OutputCache*     myCache; \/\/\/< Pointer to the shared cache object $/;"	m	class:ProtoMol::Output
myCache	framework/frontend/OutputCollection.h	/^    OutputCache* myCache;$/;"	m	class:ProtoMol::OutputCollection
myCacheFreq	framework/frontend/OutputFile.h	/^    int myCacheFreq;$/;"	m	class:ProtoMol::OutputFile
myCacheSize	framework/frontend/OutputFile.h	/^    int myCacheSize;$/;"	m	class:ProtoMol::OutputFile
myCached	framework/forces/NonbondedFullEwaldSystemForce.h	/^    bool myCached;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myCached	framework/forces/NonbondedFullSystemForce.h	/^    bool myCached;$/;"	m	class:ProtoMol::NonbondedFullSystemForce
myCached	framework/forces/NonbondedMultiGridSystemForce.h	/^    bool myCached;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myCached	framework/forces/NonbondedPMEwaldSystemForce.h	/^    bool myCached;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myCached	framework/forces/NonbondedSimpleFullSystemForce.h	/^    bool myCached;$/;"	m	class:ProtoMol::NonbondedSimpleFullSystemForce
myCached	framework/forces/PaulTrapExtendedForce.h	/^    bool myCached;$/;"	m	class:ProtoMol::PaulTrapExtendedForce
myCached	framework/imd/HapticSystemForce.h	/^    bool myCached;$/;"	m	class:ProtoMol::HapticSystemForce
myCached	framework/integrators/BSplineMOLLYIntegrator.h	/^    bool myCached;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myCached	framework/integrators/PaulTrapIntegrator.h	/^    bool           myCached;$/;"	m	class:ProtoMol::PaulTrapIntegrator
myCachedAngularMomentum	framework/frontend/OutputCache.h	/^    mutable bool myCachedAngularMomentum;$/;"	m	class:ProtoMol::OutputCache
myCachedBrentMaxima	framework/frontend/OutputCache.h	/^    mutable bool myCachedBrentMaxima;$/;"	m	class:ProtoMol::OutputCache
myCachedCenterOfMass	framework/frontend/OutputCache.h	/^    mutable bool myCachedCenterOfMass;$/;"	m	class:ProtoMol::OutputCache
myCachedDensity	framework/frontend/OutputCache.h	/^    mutable bool myCachedDensity;$/;"	m	class:ProtoMol::OutputCache
myCachedDiffusion	framework/frontend/OutputCache.h	/^    mutable bool myCachedDiffusion;$/;"	m	class:ProtoMol::OutputCache
myCachedDihedralPhi	framework/frontend/OutputCache.h	/^    mutable int myCachedDihedralPhi;$/;"	m	class:ProtoMol::OutputCache
myCachedDihedralPhis	framework/frontend/OutputCache.h	/^    mutable bool myCachedDihedralPhis;$/;"	m	class:ProtoMol::OutputCache
myCachedKE	framework/frontend/OutputCache.h	/^    mutable bool myCachedKE;$/;"	m	class:ProtoMol::OutputCache
myCachedLinearMomentum	framework/frontend/OutputCache.h	/^    mutable bool myCachedLinearMomentum;$/;"	m	class:ProtoMol::OutputCache
myCachedMass	framework/frontend/OutputCache.h	/^    mutable bool myCachedMass;$/;"	m	class:ProtoMol::OutputCache
myCachedMinimalPositions	framework/frontend/OutputCache.h	/^    mutable bool myCachedMinimalPositions;$/;"	m	class:ProtoMol::OutputCache
myCachedMolKE	framework/frontend/OutputCache.h	/^    mutable bool myCachedMolKE;$/;"	m	class:ProtoMol::OutputCache
myCachedMolP	framework/frontend/OutputCache.h	/^    mutable bool myCachedMolP;$/;"	m	class:ProtoMol::OutputCache
myCachedMolT	framework/frontend/OutputCache.h	/^    mutable bool myCachedMolT;$/;"	m	class:ProtoMol::OutputCache
myCachedNonWaterT	framework/frontend/OutputCache.h	/^    mutable bool myCachedNonWaterT;$/;"	m	class:ProtoMol::OutputCache
myCachedP	framework/frontend/OutputCache.h	/^    mutable bool myCachedP;$/;"	m	class:ProtoMol::OutputCache
myCachedPE	framework/frontend/OutputCache.h	/^    mutable bool myCachedPE;$/;"	m	class:ProtoMol::OutputCache
myCachedV	framework/frontend/OutputCache.h	/^    mutable bool myCachedV;$/;"	m	class:ProtoMol::OutputCache
myCachedWaterT	framework/frontend/OutputCache.h	/^    mutable bool myCachedWaterT;$/;"	m	class:ProtoMol::OutputCache
myCellListStruct	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    const CubicCellManager::CellListStructure *myCellListStruct;$/;"	m	class:ProtoMol::CellListEnumerator
myCellListStruct	framework/topology/CellListEnumerator_standard.h	/^    const CubicCellManager::CellListStructure *myCellListStruct;$/;"	m	class:ProtoMol::CellListEnumerator
myCellSize	framework/topology/ArrayCellListStructure.h	/^    Vector3D    myCellSize;$/;"	m	class:ProtoMol::ArrayCellListStructure
myCellSize	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    Vector3D myCellSize;  $/;"	m	class:ProtoMol::CellListEnumerator
myCellSize	framework/topology/CellListEnumerator_standard.h	/^    Vector3D myCellSize;  $/;"	m	class:ProtoMol::CellListEnumerator
myCellSize	framework/topology/CubicCellManager.h	/^    Real myCellSize;$/;"	m	class:ProtoMol::CubicCellManager
myCenter	framework/forces/SphericalSystemForce.h	/^    Vector3D myCenter;$/;"	m	class:ProtoMol::SphericalSystemForce
myCenter	framework/imd/HapticSystemForce.h	/^    Vector3D myCenter;$/;"	m	class:ProtoMol::HapticSystemForce
myCenterOfMass	framework/frontend/OutputCache.h	/^    mutable Vector3D myCenterOfMass;$/;"	m	class:ProtoMol::OutputCache
myChargedSystemEnergy	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myChargedSystemEnergy;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myChargedSystemEnergy	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myChargedSystemEnergy;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myCharmmType	framework/io/AMBERReader.h	/^    PAR::CharmmTypeEnum myCharmmType;$/;"	m	class:ProtoMol::AMBERReader
myCharmmType	framework/io/PARReader.h	/^    PAR::CharmmTypeEnum myCharmmType;$/;"	m	class:ProtoMol::PARReader
myCharmmType	framework/io/PARWriter.h	/^    PAR::CharmmTypeEnum myCharmmType;$/;"	m	class:ProtoMol::PARWriter
myCharmmTypeDetected	framework/io/AMBERReader.h	/^    PAR::CharmmTypeEnum myCharmmTypeDetected;$/;"	m	class:ProtoMol::AMBERReader
myCharmmTypeDetected	framework/io/PARReader.h	/^    PAR::CharmmTypeEnum myCharmmTypeDetected;$/;"	m	class:ProtoMol::PARReader
myChi	framework/forces/MagneticDipoleForce.h	/^    Real myChi, myR, myOmega, myPhi, myHx, myHy, myHz, myD;$/;"	m	class:ProtoMol::MagneticDipoleForce
myChi	framework/forces/MagneticDipoleMirrorSystemForce.h	/^    Real myChi, myR, myD, myHx, myHy, myHz, myF;$/;"	m	class:ProtoMol::MagneticDipoleMirrorSystemForce
myCloseTime	framework/frontend/OutputFile.h	/^    Real myCloseTime;$/;"	m	class:ProtoMol::OutputFile
myColor	framework/io/XFigWriter.h	/^    bool       myColor;$/;"	m	class:ProtoMol::XFigWriter
myColortable	framework/frontend/OutputBSDL.h	/^    std::map<std::string,int> myColortable;$/;"	m	class:ProtoMol::OutputBSDL
myComment	framework/io/File.h	/^    std::string        myComment; \/\/ Reader has get and Writer has set method$/;"	m	class:ProtoMol::File
myCompareForce	framework/forces/CompareForce.h	/^    CompareForce* myCompareForce;$/;"	m	class:ProtoMol::CompareForce
myCompareForcename	framework/forces/CompareForce.h	/^    std::string myCompareForcename;$/;"	m	class:ProtoMol::CompareForce
myCompoff	framework/topology/CmpCnCnSwitchingFunction.h	/^	  Real mySwitchon, mySwitchon2, myCutoff, myCutoff2, myCompoff, myCompoff2, myOrder;$/;"	m	class:ProtoMol::CmpCnCnSwitchingFunction
myCompoff2	framework/topology/CmpCnCnSwitchingFunction.h	/^	  Real mySwitchon, mySwitchon2, myCutoff, myCutoff2, myCompoff, myCompoff2, myOrder;$/;"	m	class:ProtoMol::CmpCnCnSwitchingFunction
myConfig	framework/frontend/Output.h	/^    const Configuration*   myConfig; $/;"	m	class:ProtoMol::Output
myConfig	framework/frontend/OutputCache.h	/^    const Configuration*   myConfig; $/;"	m	class:ProtoMol::OutputCache
myConfig	framework/frontend/OutputCollection.h	/^    const Configuration*   myConfig; $/;"	m	class:ProtoMol::OutputCollection
myConfig	framework/io/ConfigurationReader.h	/^    Configuration* myConfig;$/;"	m	class:ProtoMol::ConfigurationReader
myConfig	framework/io/REMConfigurationReader.h	/^    Configuration* myConfig;$/;"	m	class:ProtoMol::REMConfigurationReader
myConfig	tools/rem/sequential/replica.h	/^  string myConfig;$/;"	m	class:Replica
myConfstrings	framework/frontend/OutputDihedrals.h	/^    std::set< std::string > myConfstrings;$/;"	m	class:ProtoMol::OutputDihedrals
myCoords	framework/io/CRDReader.h	/^    Vector3DBlock* myCoords;$/;"	m	class:ProtoMol::CRDReader
myCoords	framework/io/DCDTrajectoryReader.h	/^    Vector3DBlock* myCoords;$/;"	m	class:ProtoMol::DCDTrajectoryReader
myCoords	framework/io/PDBReader.h	/^    Vector3DBlock* myCoords;$/;"	m	class:ProtoMol::PDBReader
myCoords	framework/io/XYZBinReader.h	/^    Vector3DBlock* myCoords;$/;"	m	class:ProtoMol::XYZBinReader
myCoords	framework/io/XYZReader.h	/^    Vector3DBlock* myCoords;$/;"	m	class:ProtoMol::XYZReader
myCoords	framework/io/XYZTrajectoryReader.h	/^    Vector3DBlock* myCoords;$/;"	m	class:ProtoMol::XYZTrajectoryReader
myCoords	framework/io/XYZTrajectoryWriter.h	/^    const Vector3DBlock* myCoords;$/;"	m	class:ProtoMol::XYZTrajectoryWriter
myCoulomb	framework/integrators/BSplineMOLLYIntegrator.h	/^    bool myCoulomb;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myCount	framework/base/Proxy.h	/^    mutable int myCount;$/;"	m	class:ProtoMol::Proxy
myCount	framework/frontend/OutputFile.h	/^    int myCount;$/;"	m	class:ProtoMol::OutputFile
myCount	framework/integrators/PaulTrapIntegrator.h	/^    unsigned int   myCount;$/;"	m	class:ProtoMol::PaulTrapIntegrator
myCounter	framework/forces/CompareForce.cpp	/^  unsigned int CompareForce::myCounter = 0;$/;"	m	class:ProtoMol::CompareForce	file:
myCounter	framework/forces/CompareForce.h	/^    static unsigned int myCounter;$/;"	m	class:ProtoMol::CompareForce
myCounter	framework/forces/TimeForce.cpp	/^  unsigned int TimeForce::myCounter = 0;$/;"	m	class:ProtoMol::TimeForce	file:
myCounter	framework/forces/TimeForce.h	/^    static unsigned int myCounter;$/;"	m	class:ProtoMol::TimeForce
myCounter	framework/frontend/OutputBSDL.h	/^    int myCounter;$/;"	m	class:ProtoMol::OutputBSDL
myCounterCorrection	framework/base/MultiGrid.h	/^    long myCounterCorrection;$/;"	m	class:ProtoMol::MultiGrid
myCounterCorrection	framework/forces/NonbondedMultiGridSystemForce.h	/^    long myCounterCorrection;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myCounterDirect	framework/base/MultiGrid.h	/^    long myCounterDirect;$/;"	m	class:ProtoMol::MultiGrid
myCounterDirect	framework/forces/NonbondedMultiGridSystemForce.h	/^    long myCounterDirect;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myCurrentSize	framework/topology/ExclusionTable.h	/^    int myCurrentSize;$/;"	m	class:ProtoMol::ExclusionTable
myCurrentSize	framework/topology/LennardJonesParameterTable.h	/^    int myCurrentSize;$/;"	m	class:ProtoMol::LennardJonesParameterTable
myCutoff	framework/forces/CoulombEwaldRealTableForce.h	/^    Real myCutoff;$/;"	m	class:ProtoMol::CoulombEwaldRealTableForce
myCutoff	framework/forces/CoulombMultiGridDirectTableForce.h	/^    Real myCutoff;$/;"	m	class:ProtoMol::CoulombMultiGridDirectTableForce
myCutoff	framework/forces/CoulombTableForce.h	/^    Real myCutoff;$/;"	m	class:ProtoMol::CoulombTableForce
myCutoff	framework/forces/LennardJonesTableForce.h	/^    Real myCutoff;$/;"	m	class:ProtoMol::LennardJonesTableForce
myCutoff	framework/forces/NonbondedCutoffForce.h	/^    Real myCutoff;$/;"	m	class:ProtoMol::NonbondedCutoffForce
myCutoff	framework/forces/NonbondedFullSystemForce.h	/^    Real myCutoff;$/;"	m	class:ProtoMol::NonbondedFullSystemForce
myCutoff	framework/topology/C1SwitchingFunction.h	/^    Real myCutoff, myCutoff2, myCutoff_3, my15Cutoff_1,my05Cutoff_3,my15Cutoff_3;$/;"	m	class:ProtoMol::C1SwitchingFunction
myCutoff	framework/topology/C2SwitchingFunction.h	/^    Real mySwitchon, mySwitchon2,  myCutoff, myCutoff2, mySwitch1, mySwitch2, mySwitch3;$/;"	m	class:ProtoMol::C2SwitchingFunction
myCutoff	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    Real myCutoff;$/;"	m	class:ProtoMol::CellListEnumerator
myCutoff	framework/topology/CellListEnumerator_standard.h	/^    Real myCutoff;$/;"	m	class:ProtoMol::CellListEnumerator
myCutoff	framework/topology/CmpCnCnSwitchingFunction.h	/^	  Real mySwitchon, mySwitchon2, myCutoff, myCutoff2, myCompoff, myCompoff2, myOrder;$/;"	m	class:ProtoMol::CmpCnCnSwitchingFunction
myCutoff	framework/topology/CnSwitchingFunction.h	/^	  Real mySwitchon, mySwitchon2, myCutoff, myCutoff2, myOrder, mySwitchoff;$/;"	m	class:ProtoMol::CnSwitchingFunction
myCutoff	framework/topology/CutoffSwitchingFunction.h	/^    Real myCutoff, myCutoff2;$/;"	m	class:ProtoMol::CutoffSwitchingFunction
myCutoff	framework/topology/ShiftSwitchingFunction.h	/^    Real myCutoff;$/;"	m	class:ProtoMol::ShiftSwitchingFunction
myCutoff2	framework/forces/CoulombEwaldRealTableForce.h	/^    Real myCutoff2;$/;"	m	class:ProtoMol::CoulombEwaldRealTableForce
myCutoff2	framework/forces/CoulombMultiGridDirectTableForce.h	/^    Real myCutoff2;$/;"	m	class:ProtoMol::CoulombMultiGridDirectTableForce
myCutoff2	framework/forces/CoulombTableForce.h	/^    Real myCutoff2;$/;"	m	class:ProtoMol::CoulombTableForce
myCutoff2	framework/forces/LennardJonesTableForce.h	/^    Real myCutoff2;$/;"	m	class:ProtoMol::LennardJonesTableForce
myCutoff2	framework/topology/C1SwitchingFunction.h	/^    Real myCutoff, myCutoff2, myCutoff_3, my15Cutoff_1,my05Cutoff_3,my15Cutoff_3;$/;"	m	class:ProtoMol::C1SwitchingFunction
myCutoff2	framework/topology/C2SwitchingFunction.h	/^    Real mySwitchon, mySwitchon2,  myCutoff, myCutoff2, mySwitch1, mySwitch2, mySwitch3;$/;"	m	class:ProtoMol::C2SwitchingFunction
myCutoff2	framework/topology/CmpCnCnSwitchingFunction.h	/^	  Real mySwitchon, mySwitchon2, myCutoff, myCutoff2, myCompoff, myCompoff2, myOrder;$/;"	m	class:ProtoMol::CmpCnCnSwitchingFunction
myCutoff2	framework/topology/CnSwitchingFunction.h	/^	  Real mySwitchon, mySwitchon2, myCutoff, myCutoff2, myOrder, mySwitchoff;$/;"	m	class:ProtoMol::CnSwitchingFunction
myCutoff2	framework/topology/CutoffSwitchingFunction.h	/^    Real myCutoff, myCutoff2;$/;"	m	class:ProtoMol::CutoffSwitchingFunction
myCutoff2	framework/topology/ShiftSwitchingFunction.h	/^    Real myCutoff2;$/;"	m	class:ProtoMol::ShiftSwitchingFunction
myCutoff_2	framework/topology/ShiftSwitchingFunction.h	/^    Real myCutoff_2;$/;"	m	class:ProtoMol::ShiftSwitchingFunction
myCutoff_3	framework/topology/C1SwitchingFunction.h	/^    Real myCutoff, myCutoff2, myCutoff_3, my15Cutoff_1,my05Cutoff_3,my15Cutoff_3;$/;"	m	class:ProtoMol::C1SwitchingFunction
myCycleLength	framework/integrators/MTSIntegrator.h	/^    const int  myCycleLength;$/;"	m	class:ProtoMol::MTSIntegrator
myD	framework/forces/MagneticDipoleForce.h	/^    Real myChi, myR, myOmega, myPhi, myHx, myHy, myHz, myD;$/;"	m	class:ProtoMol::MagneticDipoleForce
myD	framework/forces/MagneticDipoleMirrorSystemForce.h	/^    Real myChi, myR, myD, myHx, myHy, myHz, myF;$/;"	m	class:ProtoMol::MagneticDipoleMirrorSystemForce
myD	framework/topology/PeriodicBoundaryConditions.h	/^    Real myD;  \/\/\/< maximal distance between two positions where plain subtraction if safe$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myDCD	framework/frontend/OutputDCDTrajectory.h	/^    DCDTrajectoryWriter* myDCD;$/;"	m	class:ProtoMol::OutputDCDTrajectory
myDCD	framework/frontend/OutputDihedrals.h	/^    DCDTrajectoryWriter* myDCD;$/;"	m	class:ProtoMol::OutputDihedrals
myDX	framework/topology/PeriodicBoundaryConditions.h	/^    Real myDX;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myDY	framework/topology/PeriodicBoundaryConditions.h	/^    Real myDY;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myDZ	framework/topology/PeriodicBoundaryConditions.h	/^    Real myDZ;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myData	framework/topology/LennardJonesParameterTable.h	/^    LennardJonesParameters* myData;$/;"	m	class:ProtoMol::LennardJonesParameterTable
myDeltaList	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    std::vector<CubicCellManager::Cell> myDeltaList;$/;"	m	class:ProtoMol::CellListEnumerator
myDeltaList	framework/topology/CellListEnumerator_standard.h	/^    std::vector<CubicCellManager::Cell> myDeltaList;$/;"	m	class:ProtoMol::CellListEnumerator
myDensity	framework/frontend/OutputCache.h	/^    mutable Real myDensity;$/;"	m	class:ProtoMol::OutputCache
myDhmcAnSetFile	framework/integrators/DihedralHMCIntegrator.h	/^    std::string myDhmcAnSetFile;$/;"	m	class:ProtoMol::DihedralHMCIntegrator
myDhmcDiSetFile	framework/integrators/DihedralHMCIntegrator.h	/^    std::string myDhmcDiSetFile;$/;"	m	class:ProtoMol::DihedralHMCIntegrator
myDiffusion	framework/frontend/OutputCache.h	/^    mutable Real myDiffusion;$/;"	m	class:ProtoMol::OutputCache
myDihedral	framework/forces/HarmDihedralSystemForce.h	/^    int myDihedral;$/;"	m	class:ProtoMol::HarmDihedralSystemForce
myDihedralFile	tools/rem/sequential/replica.h	/^  string myDihedralFile;$/;"	m	class:Replica
myDihedralIndex	framework/frontend/OutputDihedrals.h	/^    int myDihedralIndex;$/;"	m	class:ProtoMol::OutputDihedrals
myDihedralIndex	framework/integrators/DihedralHMCIntegrator.h	/^    int myDihedralIndex;$/;"	m	class:ProtoMol::DihedralHMCIntegrator
myDihedralPhi	framework/frontend/OutputCache.h	/^    mutable Real myDihedralPhi;$/;"	m	class:ProtoMol::OutputCache
myDihedralPhis	framework/frontend/OutputCache.h	/^    mutable std::vector<Real>* myDihedralPhis;$/;"	m	class:ProtoMol::OutputCache
myDihedralReference	framework/forces/HarmDihedralSystemForce.h	/^    Real myDihedralReference;$/;"	m	class:ProtoMol::HarmDihedralSystemForce
myDihedralSetFile	tools/rem/sequential/replica.h	/^  string myDihedralSetFile;$/;"	m	class:Replica
myDihedrals	framework/frontend/OutputDihedrals.h	/^    std::vector< int > myDihedrals;$/;"	m	class:ProtoMol::OutputDihedrals
myDihedrals	framework/integrators/DihedralHMCIntegrator.h	/^    std::vector< int >* myDihedrals;$/;"	m	class:ProtoMol::DihedralHMCIntegrator
myDihedralsSet	framework/frontend/OutputDihedrals.h	/^    bool myDihedralsSet;$/;"	m	class:ProtoMol::OutputDihedrals
myDihedralsSet	framework/integrators/DihedralHMCIntegrator.h	/^    bool myDihedralsSet;$/;"	m	class:ProtoMol::DihedralHMCIntegrator
myDihedralsSetfile	framework/frontend/OutputDihedrals.h	/^    std::string myDihedralsSetfile;$/;"	m	class:ProtoMol::OutputDihedrals
myDim	framework/base/MultiGrid.h	/^    std::vector<Int3D> myDim;    \/\/\/< Dimension of the grids$/;"	m	class:ProtoMol::MultiGrid
myDir	tools/rem/sequential/replica.h	/^  string myDir;$/;"	m	class:Replica
myDissipativeCutoff	framework/integrators/DMDLeapfrogIntegrator.h	/^    Real myDissipativeCutoff;$/;"	m	class:ProtoMol::DMDLeapfrogIntegrator
myDissipativeForces	framework/integrators/DMDLeapfrogIntegrator.h	/^    Vector3DBlock *myDissipativeForces;$/;"	m	class:ProtoMol::DMDLeapfrogIntegrator
myDoHint	framework/base/Report.h	/^      bool myDoHint;$/;"	m	class:ProtoMol::Report::MyStreamer
myDoMolecularTemperature	framework/frontend/OutputEnergies.h	/^    bool myDoMolecularTemperature;$/;"	m	class:ProtoMol::OutputEnergies
myDoMolecularVirial	framework/base/ScalarStructure.h	/^    bool myDoMolecularVirial;$/;"	m	class:ProtoMol::ScalarStructure
myDoOutput	framework/base/ScalarStructure.h	/^    bool myDoOutput;$/;"	m	class:ProtoMol::ScalarStructure
myDoPaulLow	framework/frontend/OutputPaulTrap.h	/^    bool myDoPaulLow;$/;"	m	class:ProtoMol::OutputPaulTrap
myDoShadow	framework/frontend/OutputEnergies.h	/^    bool myDoShadow;$/;"	m	class:ProtoMol::OutputEnergies
myDoTrajectory	framework/base/ScalarStructure.h	/^    bool myDoTrajectory;$/;"	m	class:ProtoMol::ScalarStructure
myDoVirial	framework/base/ScalarStructure.h	/^    bool myDoVirial;$/;"	m	class:ProtoMol::ScalarStructure
myDone	framework/parallel/Parallel-FD.cpp	/^  vector<int>  Parallel::myDone;$/;"	m	class:ProtoMol::Parallel	file:
myDone	framework/parallel/Parallel.cpp	/^  vector<int>  Parallel::myDone;$/;"	m	class:ProtoMol::Parallel	file:
myDone	framework/parallel/Parallel.h	/^    static std::vector<int> myDone;          \/\/\/< Master, keeps track of slave have got already their work$/;"	m	class:ProtoMol::Parallel
myE	framework/forces/ElectricFieldSystemForce.h	/^    Real myE;$/;"	m	class:ProtoMol::ElectricFieldSystemForce
myE1	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D myE1;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myE1r	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D myE1r;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myE2	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D myE2;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myE2r	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D myE2r;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myE3	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D myE3;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myE3r	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D myE3r;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myEnable	framework/integrators/Modifier.h	/^    mutable bool myEnable;$/;"	m	class:ProtoMol::Modifier
myEnd	framework/topology/ArrayCellListStructure.h	/^    iterator          myBegin,myEnd;$/;"	m	class:ProtoMol::ArrayCellListStructure
myEndConst	framework/topology/ArrayCellListStructure.h	/^    const_iterator    myBeginConst,myEndConst;$/;"	m	class:ProtoMol::ArrayCellListStructure
myEndSerial	framework/base/systemutilities.cpp	/^  static void (*myEndSerial)(bool) = NULL;$/;"	v	file:
myEndTime	framework/base/Cycles.h	/^    ticks myEndTime;$/;"	m	class:ProtoMol::Cycles
myEnergies	framework/forces/CompareForce.h	/^    ScalarStructure* myEnergies;$/;"	m	class:ProtoMol::CompareForce
myEnergies	framework/frontend/Output.h	/^    const ScalarStructure* myEnergies;$/;"	m	class:ProtoMol::Output
myEnergies	framework/frontend/OutputCache.h	/^    const ScalarStructure* myEnergies;$/;"	m	class:ProtoMol::OutputCache
myEnergies	framework/frontend/OutputCollection.h	/^    const ScalarStructure* myEnergies;$/;"	m	class:ProtoMol::OutputCollection
myEnergies	framework/integrators/Integrator.h	/^    ScalarStructure *myEnergies;$/;"	m	class:ProtoMol::Integrator
myEnergies	framework/integrators/Modifier.h	/^    ScalarStructure* myEnergies;$/;"	m	class:ProtoMol::Modifier
myEnergyFile	tools/rem/sequential/replica.h	/^  string myEnergyFile;$/;"	m	class:Replica
myEpsilon	framework/integrators/ModifierMetaRattleShake.h	/^    Real myEpsilon;$/;"	m	class:ProtoMol::ModifierMetaRattleShake
myEpsilonVel	framework/integrators/NPTVerletIntegrator.h	/^    Real myEpsilonVel;       \/\/  Barostat strain rate velocity.  Units: (fs)^-1$/;"	m	class:ProtoMol::NPTVerletIntegrator
myErrors	framework/forces/CompareForce.h	/^    std::vector<CompareError> myErrors;$/;"	m	class:ProtoMol::CompareForce
myEta	framework/integrators/NPTVerletIntegrator.h	/^    Real myEta;              \/\/  Nose-Hoover particle thermostat variable.  Units: (dimensionless)$/;"	m	class:ProtoMol::NPTVerletIntegrator
myEta	framework/integrators/NVTVerletIntegrator.h	/^    Real myEta;              \/\/  Nose-Hoover particle thermostat variable.  Units: (dimensionless)$/;"	m	class:ProtoMol::NVTVerletIntegrator
myEtaV	framework/integrators/NPTVerletIntegrator.h	/^    Real myEtaV;             \/\/  Nose-Hoover volume thermostat variable.  Units: (dimensionless)$/;"	m	class:ProtoMol::NPTVerletIntegrator
myEtaVel	framework/integrators/NPTVerletIntegrator.h	/^    Real myEtaVel;           \/\/  Velocity of the thermostat variable.  Units: (fs)^-1$/;"	m	class:ProtoMol::NPTVerletIntegrator
myEtaVel	framework/integrators/NVTVerletIntegrator.h	/^    Real myEtaVel;           \/\/  Velocity of the thermostat variable.  Units: (fs)^-1$/;"	m	class:ProtoMol::NVTVerletIntegrator
myEtaVolVel	framework/integrators/NPTVerletIntegrator.h	/^    Real myEtaVolVel;        \/\/  Velocity of the volume thermostat variable.  Units: (fs)^-1$/;"	m	class:ProtoMol::NPTVerletIntegrator
myExemplars	framework/frontend/Factory.h	/^    std::map<std::string,const Type*,ltstrNocase> myExemplars; $/;"	m	class:ProtoMol::FactoryBase
myExemplars	framework/frontend/HelpTextFactory.h	/^    HelpTextMapType myExemplars; $/;"	m	class:ProtoMol::HelpTextFactory
myExitFunction	framework/base/systemutilities.cpp	/^  static void (*myExitFunction)() = NULL;$/;"	v	file:
myExpX	framework/base/Grid.h	/^    Real* myExpX;$/;"	m	class:ProtoMol::Grid
myExpY	framework/base/Grid.h	/^    Real* myExpY;$/;"	m	class:ProtoMol::Grid
myExpZ	framework/base/Grid.h	/^    Real* myExpZ;$/;"	m	class:ProtoMol::Grid
myExpansionFactor	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myExpansionFactor;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myExpansionFactor	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myExpansionFactor;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myExtendedForcesList	framework/forces/ForceGroup.h	/^    std::list<ExtendedForce*> myExtendedForcesList;$/;"	m	class:ProtoMol::ForceGroup
myF	framework/forces/FrictionExtendedForce.h	/^    Real     myF;$/;"	m	class:ProtoMol::FrictionExtendedForce
myF	framework/forces/MagneticDipoleMirrorSystemForce.h	/^    Real myChi, myR, myD, myHx, myHy, myHz, myF;$/;"	m	class:ProtoMol::MagneticDipoleMirrorSystemForce
myFFT	framework/base/Grid.h	/^    FFTComplex myFFT;$/;"	m	class:ProtoMol::Grid
myFFTCoeff	framework/base/FFTComplex.cpp	/^    zomplex* myFFTCoeff;$/;"	m	class:ProtoMol::FFTInternal	file:
myFFTInternal	framework/base/FFTComplex.h	/^    FFTInternal* myFFTInternal;$/;"	m	class:ProtoMol::FFTComplex
myFac	framework/base/Grid.h	/^    Real myFac;$/;"	m	class:ProtoMol::Grid
myFac	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myFac;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myFactor	framework/frontend/OutputPaulTrap.h	/^    Real        myFactor;$/;"	m	class:ProtoMol::OutputPaulTrap
myFactor	framework/frontend/OutputScreen.h	/^    Real myFactor;$/;"	m	class:ProtoMol::OutputScreen
myFastDeltaMax	framework/topology/ExclusionTable.h	/^    int myFastDeltaMax;$/;"	m	class:ProtoMol::ExclusionTable
myFile	framework/frontend/OutputFile.h	/^    std::ofstream myFile;$/;"	m	class:ProtoMol::OutputFile
myFile	framework/io/File.h	/^    std::fstream       myFile;$/;"	m	class:ProtoMol::File
myFilename	framework/frontend/InputPosVel.h	/^    std::string myFilename;$/;"	m	class:ProtoMol::InputPosVel
myFilename	framework/frontend/OutputBSDL.h	/^    std::string myFilename;$/;"	m	class:ProtoMol::OutputBSDL
myFilename	framework/frontend/OutputFile.h	/^    std::string myFilename;$/;"	m	class:ProtoMol::OutputFile
myFilename	framework/frontend/OutputFinalPDBPos.h	/^    std::string myFilename;$/;"	m	class:ProtoMol::OutputFinalPDBPos
myFilename	framework/frontend/OutputFinalXYZBinPos.h	/^    std::string myFilename;$/;"	m	class:ProtoMol::OutputFinalXYZBinPos
myFilename	framework/frontend/OutputFinalXYZBinVel.h	/^    std::string myFilename;$/;"	m	class:ProtoMol::OutputFinalXYZBinVel
myFilename	framework/frontend/OutputFinalXYZPos.h	/^    std::string myFilename;$/;"	m	class:ProtoMol::OutputFinalXYZPos
myFilename	framework/frontend/OutputFinalXYZVel.h	/^    std::string myFilename;$/;"	m	class:ProtoMol::OutputFinalXYZVel
myFilename	framework/frontend/OutputPDBFramePos.h	/^    std::string myFilename;$/;"	m	class:ProtoMol::OutputPDBFramePos
myFilename	framework/io/File.h	/^    std::string        myFilename;$/;"	m	class:ProtoMol::File
myFilenameLow	framework/frontend/OutputPaulTrap.h	/^    std::string myFilenameLow;$/;"	m	class:ProtoMol::OutputPaulTrap
myFinalPos	tools/rem/sequential/replica.h	/^  string myFinalPos;$/;"	m	class:Replica
myFinalVel	tools/rem/sequential/replica.h	/^  string myFinalVel;$/;"	m	class:Replica
myFinalized	framework/parallel/Parallel-FD.cpp	/^  bool         Parallel::myFinalized      = false;$/;"	m	class:ProtoMol::Parallel	file:
myFinalized	framework/parallel/Parallel.cpp	/^  bool         Parallel::myFinalized      = false;$/;"	m	class:ProtoMol::Parallel	file:
myFinalized	framework/parallel/Parallel.h	/^    static bool             myFinalized;     \/\/ \/<If Parallel is finalized$/;"	m	class:ProtoMol::Parallel
myFirst	framework/base/LookUpTableBase.h	/^    int                myFirst;$/;"	m	class:ProtoMol::LookUpTableBase
myFirst	framework/frontend/Output.h	/^    bool myFirst;$/;"	m	class:ProtoMol::Output
myFirst	framework/io/DCDTrajectoryReader.h	/^    bool myFirst;$/;"	m	class:ProtoMol::DCDTrajectoryReader
myFirst	framework/io/DCDTrajectoryWriter.h	/^    bool myFirst;  \/\/ flag if the file has to be opend and cleared$/;"	m	class:ProtoMol::DCDTrajectoryWriter
myFirst	framework/io/XYZTrajectoryReader.h	/^    bool myFirst;$/;"	m	class:ProtoMol::XYZTrajectoryReader
myFirst	framework/io/XYZTrajectoryWriter.h	/^    bool myFirst;$/;"	m	class:ProtoMol::XYZTrajectoryWriter
myFirstStep	framework/frontend/Output.h	/^    int  myFirstStep;$/;"	m	class:ProtoMol::Output
myFirstStep	framework/io/DCDTrajectoryWriter.h	/^    unsigned int myFirstStep;$/;"	m	class:ProtoMol::DCDTrajectoryWriter
myForceTypes	framework/frontend/ForceFactoryDetails.h	/^    mutable std::map<std::string,ForceType,ltstrNocase> myForceTypes;$/;"	m	class:ProtoMol::ForceFactoryDetails
myForceTypesSorted	framework/frontend/ForceFactoryDetails.h	/^    mutable std::map<std::string,std::string,ltstrNocase> myForceTypesSorted;$/;"	m	class:ProtoMol::ForceFactoryDetails
myForcename	framework/forces/CompareForce.h	/^    std::string myForcename;$/;"	m	class:ProtoMol::CompareForce
myForcename	framework/forces/TimeForce.h	/^    std::string myForcename;$/;"	m	class:ProtoMol::TimeForce
myForces	framework/forces/CompareForce.h	/^    Vector3DBlock* myForces;$/;"	m	class:ProtoMol::CompareForce
myForces	framework/forces/WrapperMetaForce.h	/^    std::vector<Force*> myForces;$/;"	m	class:ProtoMol::WrapperMetaForce
myForces	framework/integrators/Integrator.h	/^    Vector3DBlock   *myForces;$/;"	m	class:ProtoMol::Integrator
myForces	framework/integrators/Modifier.h	/^    Vector3DBlock*   myForces; $/;"	m	class:ProtoMol::Modifier
myForcesToEvaluate	framework/integrators/Integrator.h	/^    ForceGroup      *myForcesToEvaluate;$/;"	m	class:ProtoMol::Integrator
myForward	framework/integrators/Integrator.h	/^    bool            myForward;$/;"	m	class:ProtoMol::Integrator
myFreq	framework/integrators/ModifierRemoveAngularMomentum.h	/^    int myFreq;$/;"	m	class:ProtoMol::ModifierRemoveAngularMomentum
myFreq	framework/integrators/ModifierRemoveLinearMomentum.h	/^    int myFreq;$/;"	m	class:ProtoMol::ModifierRemoveLinearMomentum
myFreq	framework/integrators/ModifierShadow.h	/^                         myFreq;$/;"	m	class:ProtoMol::ModifierShadow
myFromRange	framework/forces/NonbondedFullSystemForce.h	/^    std::vector<PairUInt> myFromRange;$/;"	m	class:ProtoMol::NonbondedFullSystemForce
myFromRange	framework/forces/NonbondedSimpleFullSystemForce.h	/^    std::vector<PairUInt> myFromRange;$/;"	m	class:ProtoMol::NonbondedSimpleFullSystemForce
myFromZ	framework/io/XFigWriter.h	/^    Real       myFromZ;$/;"	m	class:ProtoMol::XFigWriter
myG	framework/forces/ExternalGravitationSystemForce.h	/^    Vector3D myG;$/;"	m	class:ProtoMol::ExternalGravitationSystemForce
myG	framework/forces/GravitationForce.h	/^    Real myG;$/;"	m	class:ProtoMol::GravitationForce
myGCorrDimX	framework/base/MultiGrid.h	/^    int  myGCorrDimX;            \/\/\/< Dimensions of G_correction$/;"	m	class:ProtoMol::MultiGrid
myGCorrDimY	framework/base/MultiGrid.h	/^    int  myGCorrDimY;$/;"	m	class:ProtoMol::MultiGrid
myGCorrDimZ	framework/base/MultiGrid.h	/^    int  myGCorrDimZ;$/;"	m	class:ProtoMol::MultiGrid
myGCorrection	framework/base/MultiGrid.h	/^    Array<Real,3> myGCorrection; \/\/\/< G_Correction for other levels, G->V   $/;"	m	class:ProtoMol::MultiGrid
myGDirect	framework/base/MultiGrid.h	/^    Array<Real,3> myGDirect;     \/\/\/< G_direct for top level, G->V$/;"	m	class:ProtoMol::MultiGrid
myGamma	framework/integrators/BBKIntegrator.h	/^    Real myGamma;$/;"	m	class:ProtoMol::BBKIntegrator
myGamma	framework/integrators/DMDLeapfrogIntegrator.h	/^    Real myGamma;$/;"	m	class:ProtoMol::DMDLeapfrogIntegrator
myGamma	framework/integrators/LangevinImpulseIntegrator.h	/^    Real myGamma;$/;"	m	class:ProtoMol::LangevinImpulseIntegrator
myGrid	framework/forces/NonbondedMultiGridSystemForce.h	/^    MultiGrid<TInterpolation,TKernel,TBoundaryConditions::PERIODIC,TBoundaryConditions::PERIODIC,TBoundaryConditions::PERIODIC> myGrid;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myGrid	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Grid<TInterpolation> myGrid;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myGridInterpolation	framework/base/MultiGrid.h	/^    std::vector<TInterpolation> myGridInterpolation;  \/\/\/< Interpolation between grids$/;"	m	class:ProtoMol::MultiGrid
myH	framework/base/MultiGrid.h	/^    Vector3D myH;             \/\/ $/;"	m	class:ProtoMol::MultiGrid
myH	framework/forces/NonbondedMultiGridSystemForce.h	/^    Vector3D myH;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myH	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D myH;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myH2	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D myH2;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myHBondForces	framework/integrators/BSplineMOLLYIntegrator.h	/^    ForceGroup *myHBondForces;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myHKLmax	framework/forces/NonbondedFullEwaldSystemForce.h	/^    int myHKLmax;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myHX	framework/base/Grid.h	/^    Real myHX;$/;"	m	class:ProtoMol::Grid
myHX	framework/base/MultiGrid.h	/^    Real myHX;                   \/\/\/< h_x at level 0$/;"	m	class:ProtoMol::MultiGrid
myHXr	framework/base/Grid.h	/^    Real myHXr;$/;"	m	class:ProtoMol::Grid
myHXr	framework/base/MultiGrid.h	/^    Real myHXr;                  \/\/\/< 1\/h_x at level 0$/;"	m	class:ProtoMol::MultiGrid
myHY	framework/base/Grid.h	/^    Real myHY;$/;"	m	class:ProtoMol::Grid
myHY	framework/base/MultiGrid.h	/^    Real myHY;                   \/\/\/< h_y at level 0$/;"	m	class:ProtoMol::MultiGrid
myHYr	framework/base/Grid.h	/^    Real myHYr;$/;"	m	class:ProtoMol::Grid
myHYr	framework/base/MultiGrid.h	/^    Real myHYr;                  \/\/\/< 1\/h_y at level 0$/;"	m	class:ProtoMol::MultiGrid
myHZ	framework/base/Grid.h	/^    Real myHZ;$/;"	m	class:ProtoMol::Grid
myHZ	framework/base/MultiGrid.h	/^    Real myHZ;                   \/\/\/< h_z at level 0$/;"	m	class:ProtoMol::MultiGrid
myHZr	framework/base/Grid.h	/^    Real myHZr;$/;"	m	class:ProtoMol::Grid
myHZr	framework/base/MultiGrid.h	/^    Real myHZr;                  \/\/\/< 1\/h_z at level 0$/;"	m	class:ProtoMol::MultiGrid
myHapticForces	framework/imd/HapticSystemForce.h	/^    Vector3DBlock* myHapticForces;$/;"	m	class:ProtoMol::HapticSystemForce
myHeight	framework/base/Grid.h	/^    Real myHeight;$/;"	m	class:ProtoMol::Grid
myHeightr	framework/base/Grid.h	/^    Real myHeightr;$/;"	m	class:ProtoMol::Grid
myHmax	framework/forces/NonbondedFullEwaldSystemForce.h	/^    int myHmax;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myHx	framework/forces/MagneticDipoleForce.h	/^    Real myChi, myR, myOmega, myPhi, myHx, myHy, myHz, myD;$/;"	m	class:ProtoMol::MagneticDipoleForce
myHx	framework/forces/MagneticDipoleMirrorSystemForce.h	/^    Real myChi, myR, myD, myHx, myHy, myHz, myF;$/;"	m	class:ProtoMol::MagneticDipoleMirrorSystemForce
myHy	framework/forces/MagneticDipoleForce.h	/^    Real myChi, myR, myOmega, myPhi, myHx, myHy, myHz, myD;$/;"	m	class:ProtoMol::MagneticDipoleForce
myHy	framework/forces/MagneticDipoleMirrorSystemForce.h	/^    Real myChi, myR, myD, myHx, myHy, myHz, myF;$/;"	m	class:ProtoMol::MagneticDipoleMirrorSystemForce
myHydrogenAtomGroups	framework/integrators/EquilibriumMOLLYIntegrator.h	/^    std::vector<std::vector<int> > myHydrogenAtomGroups;$/;"	m	class:ProtoMol::EquilibriumMOLLYIntegrator
myHydrogenConstraintGroups	framework/integrators/EquilibriumMOLLYIntegrator.h	/^    std::vector<std::vector<HydrogenBond> > myHydrogenConstraintGroups;$/;"	m	class:ProtoMol::EquilibriumMOLLYIntegrator
myHz	framework/forces/MagneticDipoleForce.h	/^    Real myChi, myR, myOmega, myPhi, myHx, myHy, myHz, myD;$/;"	m	class:ProtoMol::MagneticDipoleForce
myHz	framework/forces/MagneticDipoleMirrorSystemForce.h	/^    Real myChi, myR, myD, myHx, myHy, myHz, myF;$/;"	m	class:ProtoMol::MagneticDipoleMirrorSystemForce
myI	framework/parallel/Parallel-FD.cpp	/^  int          Parallel::myI;$/;"	m	class:ProtoMol::Parallel	file:
myI	framework/parallel/Parallel.cpp	/^  int          Parallel::myI;$/;"	m	class:ProtoMol::Parallel	file:
myI	framework/parallel/Parallel.h	/^    static int              myI;             \/\/\/< Index of the actual work package (only master)$/;"	m	class:ProtoMol::Parallel
myIAmMaster	framework/base/Report.h	/^      bool myIAmMaster;$/;"	m	class:ProtoMol::Report::MyStreamer
myIAmMaster	framework/parallel/Parallel-FD.cpp	/^  bool         Parallel::myIAmMaster      = true;$/;"	m	class:ProtoMol::Parallel	file:
myIAmMaster	framework/parallel/Parallel.cpp	/^  bool         Parallel::myIAmMaster      = true;$/;"	m	class:ProtoMol::Parallel	file:
myIAmMaster	framework/parallel/Parallel.h	/^    static bool             myIAmMaster;     \/\/\/< If this node is master$/;"	m	class:ProtoMol::Parallel
myIAmSlave	framework/parallel/Parallel-FD.cpp	/^  bool         Parallel::myIAmSlave       = true;$/;"	m	class:ProtoMol::Parallel	file:
myIAmSlave	framework/parallel/Parallel.cpp	/^  bool         Parallel::myIAmSlave       = true;$/;"	m	class:ProtoMol::Parallel	file:
myIAmSlave	framework/parallel/Parallel.h	/^    static bool             myIAmSlave;      \/\/\/< If this node is slave\/worker$/;"	m	class:ProtoMol::Parallel
myIMDElf	framework/imd/HapticSystemForce.h	/^    IMDElf* myIMDElf;$/;"	m	class:ProtoMol::HapticSystemForce
myIRange	framework/topology/CmpCnCnSwitchingFunction.h	/^	  Real myIRange[MAXEQNCM];$/;"	m	class:ProtoMol::CmpCnCnSwitchingFunction
myIRange	framework/topology/CnSwitchingFunction.h	/^	  Real myIRange[MAXEQNN];$/;"	m	class:ProtoMol::CnSwitchingFunction
myId	framework/parallel/Parallel-FD.cpp	/^  int          Parallel::myId             = 0;$/;"	m	class:ProtoMol::Parallel	file:
myId	framework/parallel/Parallel.cpp	/^  int          Parallel::myId             = 0;$/;"	m	class:ProtoMol::Parallel	file:
myId	framework/parallel/Parallel.h	/^    static int              myId;            \/\/\/< Actual id of the node, [0,1,...,N-1]$/;"	m	class:ProtoMol::Parallel
myIdNumber	framework/forces/CompareForce.h	/^    unsigned int myIdNumber;$/;"	m	class:ProtoMol::CompareForce
myIdNumber	framework/forces/TimeForce.h	/^    unsigned int myIdNumber;$/;"	m	class:ProtoMol::TimeForce
myIncludeView	framework/frontend/OutputBSDL.h	/^    bool myIncludeView;$/;"	m	class:ProtoMol::OutputBSDL
myInerpolationModX	framework/base/Grid.h	/^    Real* myInerpolationModX;$/;"	m	class:ProtoMol::Grid
myInerpolationModY	framework/base/Grid.h	/^    Real* myInerpolationModY;$/;"	m	class:ProtoMol::Grid
myInerpolationModZ	framework/base/Grid.h	/^    Real* myInerpolationModZ;$/;"	m	class:ProtoMol::Grid
myInitialPositions	framework/frontend/OutputCache.h	/^    Vector3DBlock*         myInitialPositions;$/;"	m	class:ProtoMol::OutputCache
myInitialTemperature	framework/integrators/DihedralHMCIntegrator.h	/^    Real myInitialTemperature;$/;"	m	class:ProtoMol::DihedralHMCIntegrator
myInitialTemperature	framework/integrators/MCIntegrator.h	/^    Real myInitialTemperature;$/;"	m	class:ProtoMol::MCIntegrator
myInitialized	framework/parallel/Parallel-FD.cpp	/^  bool         Parallel::myInitialized    = false;$/;"	m	class:ProtoMol::Parallel	file:
myInitialized	framework/parallel/Parallel.cpp	/^  bool         Parallel::myInitialized    = false;$/;"	m	class:ProtoMol::Parallel	file:
myInitialized	framework/parallel/Parallel.h	/^    static bool             myInitialized;   \/\/\/< If Parallel is initialized$/;"	m	class:ProtoMol::Parallel
myIntegrator	framework/frontend/Output.h	/^    const Integrator*      myIntegrator;$/;"	m	class:ProtoMol::Output
myIntegrator	framework/frontend/OutputCache.h	/^    const Integrator*      myIntegrator;$/;"	m	class:ProtoMol::OutputCache
myIntegrator	framework/frontend/OutputCollection.h	/^    const Integrator*      myIntegrator;$/;"	m	class:ProtoMol::OutputCollection
myIntegrator	framework/integrators/ModifierShadow.h	/^            const Integrator *myIntegrator;$/;"	m	class:ProtoMol::ModifierShadow
myInterOrder	framework/base/BSpline.h	/^    unsigned int myInterOrder;$/;"	m	class:ProtoMol::BSpline
myInterOrder	framework/base/Grid.h	/^    unsigned int myInterOrder;$/;"	m	class:ProtoMol::Grid
myInterOrder	framework/base/Hermite.h	/^    unsigned int myInterOrder;$/;"	m	class:ProtoMol::Hermite
myInterOrder	framework/base/Lagrange.h	/^    unsigned int myInterOrder;$/;"	m	class:ProtoMol::Lagrange
myInterOrder	framework/base/MultiGrid.h	/^    int myInterOrder;            \/\/\/< Interpolation order$/;"	m	class:ProtoMol::MultiGrid
myInterOrder	framework/forces/NonbondedMultiGridSystemForce.h	/^    unsigned int myInterOrder;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myInterOrder	framework/forces/NonbondedPMEwaldSystemForce.h	/^    unsigned int myInterOrder;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myInterpolations	framework/base/Grid.h	/^    std::vector<Interpolation3D> myInterpolations;$/;"	m	class:ProtoMol::Grid
myInterpolations	framework/base/MultiGrid.h	/^    std::vector<Interpolation3D> myInterpolations;    \/\/\/< Interpolation weights for each particle $/;"	m	class:ProtoMol::MultiGrid
myIntra	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Timer myIntra;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myIntra	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Timer myIntra;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myIsLittleEndian	framework/io/DCDTrajectoryWriter.h	/^    bool myIsLittleEndian;$/;"	m	class:ProtoMol::DCDTrajectoryWriter
myIsLittleEndian	framework/io/XYZBinWriter.h	/^    bool myIsLittleEndian;$/;"	m	class:ProtoMol::XYZBinWriter
myIsParallel	framework/base/TimerStatistic.cpp	/^  bool TimerStatistic::myIsParallel = false;$/;"	m	class:ProtoMol::TimerStatistic	file:
myIsParallel	framework/base/TimerStatistic.h	/^    static bool myIsParallel;$/;"	m	class:ProtoMol::TimerStatistic
myIsParallel	framework/parallel/Parallel-FD.cpp	/^  bool         Parallel::myIsParallel     = Parallel::isMPI;$/;"	m	class:ProtoMol::Parallel	file:
myIsParallel	framework/parallel/Parallel.cpp	/^  bool         Parallel::myIsParallel     = Parallel::isMPI;$/;"	m	class:ProtoMol::Parallel	file:
myIsParallel	framework/parallel/Parallel.h	/^    static bool             myIsParallel;    \/\/\/< If environment has more that 1 node$/;"	m	class:ProtoMol::Parallel
myIsolated	framework/parallel/Parallel-FD.cpp	/^  bool         Parallel::myIsolated       = false;$/;"	m	class:ProtoMol::Parallel	file:
myIsolated	framework/parallel/Parallel.cpp	/^  bool         Parallel::myIsolated       = false;$/;"	m	class:ProtoMol::Parallel	file:
myIsolated	framework/parallel/Parallel.h	/^    static bool             myIsolated;      \/\/\/< Saves isolation state$/;"	m	class:ProtoMol::Parallel
myItRange	framework/topology/CmpCnCnSwitchingFunction.h	/^	  Real myItRange[MAXEQNCM];$/;"	m	class:ProtoMol::CmpCnCnSwitchingFunction
myJ	framework/forces/SphericalSystemForce.h	/^    int  myJ;$/;"	m	class:ProtoMol::SphericalSystemForce
myK	framework/forces/NonbondedFullEwaldSystemForce.h	/^    std::vector<Vector3D> myK;  \/\/ Reciprocal lattice vector (h*2PI\/Lx,k*2PI\/Ly,l*2PI\/Lz)$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myK	framework/forces/PaulTrapExtendedForce.h	/^    Vector3D myK;$/;"	m	class:ProtoMol::PaulTrapExtendedForce
myK	framework/forces/SphericalSystemForce.h	/^    Real myK;$/;"	m	class:ProtoMol::SphericalSystemForce
myKE	framework/frontend/OutputCache.h	/^    mutable Real myKE;$/;"	m	class:ProtoMol::OutputCache
myKInt	framework/forces/NonbondedFullEwaldSystemForce.h	/^    std::vector<TripleInt> myKInt;      \/\/ Reciprocal lattice vector (h,k,l)$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myKSquared	framework/forces/NonbondedFullEwaldSystemForce.h	/^    std::vector<Real> myKSquared;  \/\/ Squared norm of the reciprocal lattice vector$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myKc	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myKc;                \/\/ Cutoff reciprocal term$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myKc	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myKc;                \/\/ Cutoff reciprocal term$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myKeep	framework/integrators/PaulTrapIntegrator.h	/^    std::vector<int>               myKeep;$/;"	m	class:ProtoMol::PaulTrapIntegrator
myKmax	framework/forces/NonbondedFullEwaldSystemForce.h	/^    int myKmax;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myLX	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myLX, myLY, myLZ;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myLX	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myLX, myLY, myLZ;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myLXr	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myLXr,myLYr,myLZr;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myLXr	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myLXr,myLYr,myLZr;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myLY	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myLX, myLY, myLZ;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myLY	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myLX, myLY, myLZ;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myLYr	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myLXr,myLYr,myLZr;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myLYr	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myLXr,myLYr,myLZr;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myLZ	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myLX, myLY, myLZ;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myLZ	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myLX, myLY, myLZ;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myLZr	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myLXr,myLYr,myLZr;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myLZr	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myLXr,myLYr,myLZr;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myLangevinTemperature	framework/integrators/BBKIntegrator.h	/^    Real myLangevinTemperature;$/;"	m	class:ProtoMol::BBKIntegrator
myLangevinTemperature	framework/integrators/LangevinImpulseIntegrator.h	/^    Real myLangevinTemperature;$/;"	m	class:ProtoMol::LangevinImpulseIntegrator
myLapTime	framework/base/Timer.h	/^    TimeRep myLapTime;$/;"	m	class:ProtoMol::Timer
myLast	framework/base/LookUpTableBase.h	/^    int                myLast;$/;"	m	class:ProtoMol::LookUpTableBase
myLastCompareForce	framework/frontend/ForceFactoryDetails.h	/^    mutable CompareForce* myLastCompareForce;$/;"	m	class:ProtoMol::ForceFactoryDetails
myLastLapTime	framework/base/Timer.h	/^    TimeRep myLastLapTime;$/;"	m	class:ProtoMol::Timer
myLastPositions	framework/integrators/ModifierMetaRattleShake.h	/^    Vector3DBlock myLastPositions;$/;"	m	class:ProtoMol::ModifierMetaRattleShake
myLastSinCos	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real* myLastSinCos;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myLastStep	framework/frontend/Output.h	/^    int  myLastStep;$/;"	m	class:ProtoMol::Output
myLattice	framework/forces/NonbondedFullEwaldSystemForce.h	/^    std::vector<Vector3D> myLattice;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myLattice	framework/forces/NonbondedFullSystemForce.h	/^    std::vector<Vector3D> myLattice;$/;"	m	class:ProtoMol::NonbondedFullSystemForce
myLattice	framework/forces/NonbondedPMEwaldSystemForce.h	/^    std::vector<Vector3D> myLattice;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myLayer	framework/integrators/PaulTrapIntegrator.h	/^    std::vector<std::vector<int> > myLayer;$/;"	m	class:ProtoMol::PaulTrapIntegrator
myLegend	framework/io/XFigWriter.h	/^    bool       myLegend;$/;"	m	class:ProtoMol::XFigWriter
myLength	framework/base/Grid.h	/^    Real myLength;$/;"	m	class:ProtoMol::Grid
myLengthr	framework/base/Grid.h	/^    Real myLengthr;$/;"	m	class:ProtoMol::Grid
myLennardJones	framework/integrators/BSplineMOLLYIntegrator.h	/^    bool myLennardJones;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myLevel	framework/base/Report.h	/^      short myLevel;$/;"	m	class:ProtoMol::Report::MyStreamer
myLevel	framework/base/Report.h	/^      short myLevel;$/;"	m	class:ProtoMol::Report::debug
myLevels	framework/base/MultiGrid.h	/^    int myLevels;                \/\/\/<  Number of levels, 0,1,2,...,myLevels-1$/;"	m	class:ProtoMol::MultiGrid
myLevels	framework/forces/NonbondedMultiGridSystemForce.h	/^    int myLevels;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myLinearMomentum	framework/frontend/OutputCache.h	/^    mutable Vector3D myLinearMomentum;$/;"	m	class:ProtoMol::OutputCache
myListModifiers	framework/integrators/Integrator.h	/^    std::set<Modifier*> myListModifiers;$/;"	m	class:ProtoMol::Integrator
myListOfConstraints	framework/integrators/ModifierMetaRattleShake.h	/^    const std::vector<Bond::Constraint>* myListOfConstraints;$/;"	m	class:ProtoMol::ModifierMetaRattleShake
myLmax	framework/forces/NonbondedFullEwaldSystemForce.h	/^    int myLmax;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myLowComment	framework/frontend/OutputPaulTrap.h	/^    std::string  myLowComment;$/;"	m	class:ProtoMol::OutputPaulTrap
myLowOut	framework/frontend/OutputPaulTrap.h	/^    std::string  myLowOut;$/;"	m	class:ProtoMol::OutputPaulTrap
myLowXYZ	framework/frontend/OutputPaulTrap.h	/^    Vector3DBlock myLowXYZ;$/;"	m	class:ProtoMol::OutputPaulTrap
myMOLLYEnergies	framework/integrators/BSplineMOLLYIntegrator.h	/^    ScalarStructure *myMOLLYEnergies;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myMOLLYForces	framework/integrators/BSplineMOLLYIntegrator.h	/^    Vector3DBlock   *myMOLLYForces;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myMOLLYForcesBonded	framework/integrators/BSplineMOLLYIntegrator.h	/^    ForceGroup *myMOLLYForcesBonded;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myMOLLYForcesHBonded	framework/integrators/BSplineMOLLYIntegrator.h	/^    ForceGroup *myMOLLYForcesHBonded;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myMOLLYPositions	framework/integrators/BSplineMOLLYIntegrator.h	/^    Vector3DBlock   *myMOLLYPositions;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myMOLLYStepsize	framework/integrators/BSplineMOLLYIntegrator.h	/^    Real myMOLLYStepsize;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myMOLLYStepsize	framework/integrators/EquilibriumMOLLYIntegrator.h	/^    Real myMOLLYStepsize;$/;"	m	class:ProtoMol::EquilibriumMOLLYIntegrator
myMOLLYStepsizeP	framework/integrators/BSplineMOLLYIntegrator.h	/^    Real myMOLLYStepsizeP;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myMOLLYStepsizeSquare	framework/integrators/BSplineMOLLYIntegrator.h	/^    Real myMOLLYStepsizeSquare;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myMOLLYVelocities	framework/integrators/BSplineMOLLYIntegrator.h	/^    Vector3DBlock   *myMOLLYVelocities;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myMask	framework/base/LookUpTableBase.h	/^    static const TInt  myMask;$/;"	m	class:ProtoMol::LookUpTableBase
myMask	framework/base/LookUpTableBase.h	/^  const typename LookUpTableBase<TLookUpValue,PRE,TReal>::TInt LookUpTableBase<TLookUpValue,PRE,TReal>::myMask=~((1LL<<SHIFT)-1LL);$/;"	m	class:ProtoMol::LookUpTableBase
myMass	framework/frontend/OutputCache.h	/^    mutable Real myMass;$/;"	m	class:ProtoMol::OutputCache
myMasterId	framework/parallel/Parallel-FD.cpp	/^  int          Parallel::myMasterId       = master;$/;"	m	class:ProtoMol::Parallel	file:
myMasterId	framework/parallel/Parallel.cpp	/^  int          Parallel::myMasterId       = master;$/;"	m	class:ProtoMol::Parallel	file:
myMasterId	framework/parallel/Parallel.h	/^    static int              myMasterId;      \/\/\/< Id of the master$/;"	m	class:ProtoMol::Parallel
myMat	framework/io/XFigWriter.h	/^    Matrix3by3 myMat;$/;"	m	class:ProtoMol::XFigWriter
myMax	framework/base/MultiGrid.h	/^    Vector3D myMax;           \/\/ $/;"	m	class:ProtoMol::MultiGrid
myMax	framework/forces/NonbondedMultiGridSystemForce.h	/^    Vector3D myMax;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myMax	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    CubicCellManager::Cell myMax;$/;"	m	class:ProtoMol::CellListEnumerator
myMax	framework/topology/CellListEnumerator_standard.h	/^    CubicCellManager::Cell myMax;$/;"	m	class:ProtoMol::CellListEnumerator
myMax	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D myMax;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myMaxDelta	framework/topology/ExclusionTable.h	/^    int myMaxDelta;$/;"	m	class:ProtoMol::ExclusionTable
myMaxIter	framework/integrators/ModifierMetaRattleShake.h	/^    int myMaxIter;$/;"	m	class:ProtoMol::ModifierMetaRattleShake
myMaxNX	framework/topology/ArrayCellListStructure.h	/^    int         myMaxNX,myMaxNY,myMaxNZ;$/;"	m	class:ProtoMol::ArrayCellListStructure
myMaxNX1	framework/topology/ArrayCellListStructure.h	/^    int         myMaxNX1,myMaxNY1,myMaxNZ1;$/;"	m	class:ProtoMol::ArrayCellListStructure
myMaxNY	framework/topology/ArrayCellListStructure.h	/^    int         myMaxNX,myMaxNY,myMaxNZ;$/;"	m	class:ProtoMol::ArrayCellListStructure
myMaxNY1	framework/topology/ArrayCellListStructure.h	/^    int         myMaxNX1,myMaxNY1,myMaxNZ1;$/;"	m	class:ProtoMol::ArrayCellListStructure
myMaxNZ	framework/topology/ArrayCellListStructure.h	/^    int         myMaxNX,myMaxNY,myMaxNZ;$/;"	m	class:ProtoMol::ArrayCellListStructure
myMaxNZ1	framework/topology/ArrayCellListStructure.h	/^    int         myMaxNX1,myMaxNY1,myMaxNZ1;$/;"	m	class:ProtoMol::ArrayCellListStructure
myMaxPackages	framework/parallel/Parallel-FD.cpp	/^  int          Parallel::myMaxPackages    = -1;$/;"	m	class:ProtoMol::Parallel	file:
myMaxPackages	framework/parallel/Parallel.cpp	/^  int          Parallel::myMaxPackages    = -1;$/;"	m	class:ProtoMol::Parallel	file:
myMaxPackages	framework/parallel/Parallel.h	/^    static int              myMaxPackages;   \/\/\/< Number of max. packages per node per force$/;"	m	class:ProtoMol::Parallel
myMaximas	framework/frontend/OutputDihedrals.h	/^    std::vector< std::vector< Real > > myMaximas;$/;"	m	class:ProtoMol::OutputDihedrals
myMediForceModifiers	framework/integrators/Integrator.h	/^    std::set<Modifier*> myMediForceModifiers;$/;"	m	class:ProtoMol::Integrator
myMem	framework/base/LookUpTableBase.h	/^    TReal*             myMem;$/;"	m	class:ProtoMol::LookUpTableBase
myMetaForcesList	framework/forces/ForceGroup.h	/^    std::list<MetaForce*>     myMetaForcesList;$/;"	m	class:ProtoMol::ForceGroup
myMin	framework/base/MultiGrid.h	/^    Vector3D myMin;           \/\/ $/;"	m	class:ProtoMol::MultiGrid
myMin	framework/forces/NonbondedMultiGridSystemForce.h	/^    Vector3D myMin;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myMin	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D myMin;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myMinimal	framework/forces/WrapperMetaForce.h	/^    bool   myMinimal;$/;"	m	class:ProtoMol::WrapperMetaForce
myMinimalImage	framework/frontend/OutputBSDL.h	/^    bool myMinimalImage;$/;"	m	class:ProtoMol::OutputBSDL
myMinimalImage	framework/frontend/OutputDCDTrajectory.h	/^    bool myMinimalImage;$/;"	m	class:ProtoMol::OutputDCDTrajectory
myMinimalImage	framework/frontend/OutputDihedrals.h	/^    bool myMinimalImage;$/;"	m	class:ProtoMol::OutputDihedrals
myMinimalImage	framework/frontend/OutputFinalPDBPos.h	/^    bool myMinimalImage;$/;"	m	class:ProtoMol::OutputFinalPDBPos
myMinimalImage	framework/frontend/OutputFinalXYZBinPos.h	/^    bool myMinimalImage;$/;"	m	class:ProtoMol::OutputFinalXYZBinPos
myMinimalImage	framework/frontend/OutputFinalXYZPos.h	/^    bool myMinimalImage;$/;"	m	class:ProtoMol::OutputFinalXYZPos
myMinimalImage	framework/frontend/OutputPDBFramePos.h	/^    bool myMinimalImage;$/;"	m	class:ProtoMol::OutputPDBFramePos
myMinimalImage	framework/frontend/OutputXYZBinTrajectoryPos.h	/^    bool myMinimalImage;$/;"	m	class:ProtoMol::OutputXYZBinTrajectoryPos
myMinimalImage	framework/frontend/OutputXYZTrajectoryPos.h	/^    bool myMinimalImage;$/;"	m	class:ProtoMol::OutputXYZTrajectoryPos
myMinimalPositions	framework/frontend/OutputCache.h	/^    mutable Vector3DBlock*   myMinimalPositions;$/;"	m	class:ProtoMol::OutputCache
myMinimas	framework/frontend/OutputDihedrals.h	/^    std::vector< std::vector< Real > > myMinimas;    $/;"	m	class:ProtoMol::OutputDihedrals
myMode	framework/io/File.h	/^    std::ios::openmode myMode;$/;"	m	class:ProtoMol::File
myMode	framework/parallel/Parallel-FD.cpp	/^  ParallelType Parallel::myMode           = ParallelType::STATIC;$/;"	m	class:ProtoMol::Parallel	file:
myMode	framework/parallel/Parallel.cpp	/^  ParallelType Parallel::myMode           = ParallelType::STATIC;$/;"	m	class:ProtoMol::Parallel	file:
myMode	framework/parallel/Parallel.h	/^    static ParallelType     myMode;          \/\/\/< Parallelization scheme$/;"	m	class:ProtoMol::Parallel
myMolKE	framework/frontend/OutputCache.h	/^    mutable Real myMolKE;$/;"	m	class:ProtoMol::OutputCache
myMolP	framework/frontend/OutputCache.h	/^    mutable Real myMolP;$/;"	m	class:ProtoMol::OutputCache
myMolT	framework/frontend/OutputCache.h	/^    mutable Real myMolT;$/;"	m	class:ProtoMol::OutputCache
myMolecularDistance	framework/frontend/OutputBSDL.h	/^    bool myMolecularDistance;$/;"	m	class:ProtoMol::OutputBSDL
myMolecule	framework/base/XSC.h	/^    unsigned int myMolecule, old_type, new_type;$/;"	m	struct:ProtoMol::XSC
myMollyForcesList	framework/forces/ForceGroup.h	/^    std::list<MollyForce*>    myMollyForcesList;$/;"	m	class:ProtoMol::ForceGroup
myNX	framework/base/FFTComplex.cpp	/^    int myNX;$/;"	m	class:ProtoMol::FFTInternal	file:
myNX	framework/base/Grid.h	/^    unsigned int myNX;$/;"	m	class:ProtoMol::Grid
myNX	framework/base/MultiGrid.h	/^    int myNX;                    \/\/\/< x dimension of the grid level 0$/;"	m	class:ProtoMol::MultiGrid
myNX	framework/forces/NonbondedMultiGridSystemForce.h	/^    unsigned int myNX;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myNX	framework/forces/NonbondedPMEwaldSystemForce.h	/^    unsigned int myNX;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myNX	framework/topology/ArrayCellListStructure.h	/^    int         myNX,myNY,myNZ;$/;"	m	class:ProtoMol::ArrayCellListStructure
myNX1	framework/topology/ArrayCellListStructure.h	/^    int         myNX1,myNY1,myNZ1;$/;"	m	class:ProtoMol::ArrayCellListStructure
myNXOffset	framework/base/Grid.h	/^    int myNXOffset;$/;"	m	class:ProtoMol::Grid
myNXOffset	framework/base/MultiGrid.h	/^    int myNXOffset;              \/\/\/< x index offset between to grid levels$/;"	m	class:ProtoMol::MultiGrid
myNY	framework/base/FFTComplex.cpp	/^    int myNY;$/;"	m	class:ProtoMol::FFTInternal	file:
myNY	framework/base/Grid.h	/^    unsigned int myNY;$/;"	m	class:ProtoMol::Grid
myNY	framework/base/MultiGrid.h	/^    int myNY;                    \/\/\/< y dimension of the grid level 0$/;"	m	class:ProtoMol::MultiGrid
myNY	framework/forces/NonbondedMultiGridSystemForce.h	/^    unsigned int myNY;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myNY	framework/forces/NonbondedPMEwaldSystemForce.h	/^    unsigned int myNY;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myNY	framework/topology/ArrayCellListStructure.h	/^    int         myNX,myNY,myNZ;$/;"	m	class:ProtoMol::ArrayCellListStructure
myNY1	framework/topology/ArrayCellListStructure.h	/^    int         myNX1,myNY1,myNZ1;$/;"	m	class:ProtoMol::ArrayCellListStructure
myNYOffset	framework/base/Grid.h	/^    int myNYOffset;$/;"	m	class:ProtoMol::Grid
myNYOffset	framework/base/MultiGrid.h	/^    int myNYOffset;              \/\/\/< y index offset between to grid levels$/;"	m	class:ProtoMol::MultiGrid
myNZ	framework/base/FFTComplex.cpp	/^    int myNZ;$/;"	m	class:ProtoMol::FFTInternal	file:
myNZ	framework/base/Grid.h	/^    unsigned int myNZ;$/;"	m	class:ProtoMol::Grid
myNZ	framework/base/MultiGrid.h	/^    int myNZ;                    \/\/\/< z dimension of the grid level 0$/;"	m	class:ProtoMol::MultiGrid
myNZ	framework/forces/NonbondedMultiGridSystemForce.h	/^    unsigned int myNZ;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myNZ	framework/forces/NonbondedPMEwaldSystemForce.h	/^    unsigned int myNZ;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myNZ	framework/topology/ArrayCellListStructure.h	/^    int         myNX,myNY,myNZ;$/;"	m	class:ProtoMol::ArrayCellListStructure
myNZ1	framework/topology/ArrayCellListStructure.h	/^    int         myNX1,myNY1,myNZ1;$/;"	m	class:ProtoMol::ArrayCellListStructure
myNZOffset	framework/base/Grid.h	/^    int myNZOffset;$/;"	m	class:ProtoMol::Grid
myNZOffset	framework/base/MultiGrid.h	/^    int myNZOffset;              \/\/\/< z index offset between to grid levels$/;"	m	class:ProtoMol::MultiGrid
myName	tools/rem/sequential/replica.h	/^  string myName;$/;"	m	class:Replica
myNames	framework/io/XYZReader.h	/^    std::vector<std::string>* myNames;$/;"	m	class:ProtoMol::XYZReader
myNames	framework/io/XYZTrajectoryReader.h	/^    std::vector<std::string>* myNames;$/;"	m	class:ProtoMol::XYZTrajectoryReader
myNames	framework/io/XYZTrajectoryWriter.h	/^    const std::vector<std::string>* myNames;$/;"	m	class:ProtoMol::XYZTrajectoryWriter
myNext	framework/parallel/Parallel-FD.cpp	/^  int          Parallel::myNext           = 0;$/;"	m	class:ProtoMol::Parallel	file:
myNext	framework/parallel/Parallel.cpp	/^  int          Parallel::myNext           = 0;$/;"	m	class:ProtoMol::Parallel	file:
myNext	framework/parallel/Parallel.h	/^    static int              myNext;          \/\/\/< Counter of next() calls$/;"	m	class:ProtoMol::Parallel
myNextIntegrator	framework/integrators/MTSIntegrator.h	/^    StandardIntegrator *myNextIntegrator;$/;"	m	class:ProtoMol::MTSIntegrator
myNextRange	framework/parallel/Parallel-FD.cpp	/^  int          Parallel::myNextRange[2]   = {0,0};$/;"	m	class:ProtoMol::Parallel	file:
myNextRange	framework/parallel/Parallel.cpp	/^  int          Parallel::myNextRange[2]   = {0,0};$/;"	m	class:ProtoMol::Parallel	file:
myNextRange	framework/parallel/Parallel.h	/^    static int              myNextRange[2];  \/\/\/< Actual work package to work on [from,to]$/;"	m	class:ProtoMol::Parallel
myNextStep	framework/frontend/Output.h	/^    int  myNextStep;$/;"	m	class:ProtoMol::Output
myNextStep	tools/rem/sequential/replica.h	/^  int myNextStep;$/;"	m	class:Replica
myNonWaterAtomTypes	framework/frontend/OutputTemperatures.h	/^    std::vector<int> myNonWaterAtomTypes;$/;"	m	class:ProtoMol::OutputTemperatures
myNonWaterT	framework/frontend/OutputCache.h	/^    mutable Real myNonWaterT;$/;"	m	class:ProtoMol::OutputCache
myNum	framework/parallel/Parallel-FD.cpp	/^  int          Parallel::myNum            = 1;$/;"	m	class:ProtoMol::Parallel	file:
myNum	framework/parallel/Parallel.cpp	/^  int          Parallel::myNum            = 1;$/;"	m	class:ProtoMol::Parallel	file:
myNum	framework/parallel/Parallel.h	/^    static int              myNum;           \/\/\/< Number of nodes, N$/;"	m	class:ProtoMol::Parallel
myNumFree	framework/integrators/NPTVerletIntegrator.h	/^    unsigned int myNumFree;  \/\/  Total # of degrees of freedom = (3*Natoms - 3) - NumConstraints$/;"	m	class:ProtoMol::NPTVerletIntegrator
myNumFree	framework/integrators/NVTVerletIntegrator.h	/^    unsigned int myNumFree;  \/\/  Total # of degrees of freedom = (3*Natoms - 3) - NumConstraints$/;"	m	class:ProtoMol::NVTVerletIntegrator
myNumIter	framework/integrators/BSplineMOLLYIntegrator.h	/^    unsigned int myNumIter;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myNumIter	framework/integrators/DMDLeapfrogIntegrator.h	/^    int myNumIter;$/;"	m	class:ProtoMol::DMDLeapfrogIntegrator
myNumParameters	framework/integrators/DLMCIntegrator.h	/^    static const int myNumParameters;$/;"	m	class:ProtoMol::DLMCIntegrator
myNumParameters	framework/integrators/HMCIntegrator.h	/^    static const int myNumParameters;$/;"	m	class:ProtoMol::HMCIntegrator
myNumSteps	tools/rem/sequential/replica.h	/^  int myNumSteps;$/;"	m	class:Replica
myOk	framework/frontend/InputPosVel.h	/^    bool myOk;$/;"	m	class:ProtoMol::InputPosVel
myOldAtomCount	framework/forces/NonbondedFullEwaldSystemForce.h	/^    unsigned int myOldAtomCount; \/\/ Keep track of old values and hope$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myOldEnergies	framework/integrators/DihedralHMCIntegrator.h	/^    ScalarStructure* myOldEnergies;$/;"	m	class:ProtoMol::DihedralHMCIntegrator
myOldEnergies	framework/integrators/MCIntegrator.h	/^    ScalarStructure* myOldEnergies;$/;"	m	class:ProtoMol::MCIntegrator
myOldForces	framework/integrators/Integrator.h	/^    Vector3DBlock   *myOldForces;$/;"	m	class:ProtoMol::Integrator
myOldForces	framework/integrators/ShadowHMCIntegrator.h	/^            Vector3DBlock myOldForces;$/;"	m	class:ProtoMol::ShadowHMCIntegrator
myOldHKLmax	framework/forces/NonbondedFullEwaldSystemForce.h	/^    int myOldHKLmax;             \/\/ we do not need to reallocate memory ...$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myOldId	framework/parallel/Parallel-FD.cpp	/^  int          Parallel::myOldId          = 0;$/;"	m	class:ProtoMol::Parallel	file:
myOldId	framework/parallel/Parallel.cpp	/^  int          Parallel::myOldId          = 0;$/;"	m	class:ProtoMol::Parallel	file:
myOldId	framework/parallel/Parallel.h	/^    static int              myOldId;         \/\/\/< Saves processor id when switching MPI off$/;"	m	class:ProtoMol::Parallel
myOldKineticEnergy	framework/integrators/MCIntegrator.h	/^    Real myOldKineticEnergy;$/;"	m	class:ProtoMol::MCIntegrator
myOldMode	framework/parallel/Parallel-FD.cpp	/^  ParallelType Parallel::myOldMode        = ParallelType::STATIC;$/;"	m	class:ProtoMol::Parallel	file:
myOldMode	framework/parallel/Parallel.cpp	/^  ParallelType Parallel::myOldMode        = ParallelType::STATIC;$/;"	m	class:ProtoMol::Parallel	file:
myOldMode	framework/parallel/Parallel.h	/^    static ParallelType     myOldMode;       \/\/\/< Saves parallelization scheme when switching MPI off$/;"	m	class:ProtoMol::Parallel
myOldNum	framework/parallel/Parallel-FD.cpp	/^  int          Parallel::myOldNum         = 1;$/;"	m	class:ProtoMol::Parallel	file:
myOldNum	framework/parallel/Parallel.cpp	/^  int          Parallel::myOldNum         = 1;$/;"	m	class:ProtoMol::Parallel	file:
myOldNum	framework/parallel/Parallel.h	/^    static int              myOldNum;        \/\/\/< Saves number of processors when switching MPI off$/;"	m	class:ProtoMol::Parallel
myOldPositions	framework/integrators/DihedralHMCIntegrator.h	/^    Vector3DBlock*   myOldPositions;$/;"	m	class:ProtoMol::DihedralHMCIntegrator
myOldPositions	framework/integrators/MCIntegrator.h	/^    Vector3DBlock*   myOldPositions;$/;"	m	class:ProtoMol::MCIntegrator
myOldVelocities	framework/integrators/DihedralHMCIntegrator.h	/^    Vector3DBlock*   myOldVelocities;$/;"	m	class:ProtoMol::DihedralHMCIntegrator
myOldVelocities	framework/integrators/MCIntegrator.h	/^    Vector3DBlock*   myOldVelocities;$/;"	m	class:ProtoMol::MCIntegrator
myOmega	framework/forces/MagneticDipoleForce.h	/^    Real myChi, myR, myOmega, myPhi, myHx, myHy, myHz, myD;$/;"	m	class:ProtoMol::MagneticDipoleForce
myOmega	framework/forces/PaulTrapExtendedForce.h	/^    Real myOmega;$/;"	m	class:ProtoMol::PaulTrapExtendedForce
myOmegaR	framework/forces/PaulTrapExtendedForce.h	/^    std::vector<Real> myOmegaR;$/;"	m	class:ProtoMol::PaulTrapExtendedForce
myOmegaR	framework/frontend/OutputPaulTrap.h	/^    Real myOmegaR;$/;"	m	class:ProtoMol::OutputPaulTrap
myOmegaR1	framework/forces/PaulTrapExtendedForce.h	/^    Real myOmegaR1;$/;"	m	class:ProtoMol::PaulTrapExtendedForce
myOmegaZ	framework/forces/PaulTrapExtendedForce.h	/^    std::vector<Real> myOmegaZ;$/;"	m	class:ProtoMol::PaulTrapExtendedForce
myOmegaZ	framework/frontend/OutputPaulTrap.h	/^    Real myOmegaZ;$/;"	m	class:ProtoMol::OutputPaulTrap
myOmegaZ1	framework/forces/PaulTrapExtendedForce.h	/^    Real myOmegaZ1;$/;"	m	class:ProtoMol::PaulTrapExtendedForce
myOneAtomPair	framework/forces/NonbondedCutoffForce.h	/^    TOneAtomPair myOneAtomPair;$/;"	m	class:ProtoMol::NonbondedCutoffForce
myOneAtomPair	framework/forces/NonbondedFullSystemForce.h	/^    TOneAtomPair myOneAtomPair;$/;"	m	class:ProtoMol::NonbondedFullSystemForce
myOneAtomPair	framework/forces/NonbondedSimpleFullSystemForce.h	/^    TOneAtomPair myOneAtomPair;$/;"	m	class:ProtoMol::NonbondedSimpleFullSystemForce
myOptimize	framework/integrators/ShadowHMCIntegrator.h	/^            bool myOptimize;$/;"	m	class:ProtoMol::ShadowHMCIntegrator
myOrder	framework/integrators/Modifier.h	/^    int  myOrder;$/;"	m	class:ProtoMol::Modifier
myOrder	framework/integrators/ShadowHMCIntegrator.h	/^            unsigned int myOrder,$/;"	m	class:ProtoMol::ShadowHMCIntegrator
myOrder	framework/topology/CmpCnCnSwitchingFunction.h	/^	  Real mySwitchon, mySwitchon2, myCutoff, myCutoff2, myCompoff, myCompoff2, myOrder;$/;"	m	class:ProtoMol::CmpCnCnSwitchingFunction
myOrder	framework/topology/CnSwitchingFunction.h	/^	  Real mySwitchon, mySwitchon2, myCutoff, myCutoff2, myOrder, mySwitchoff;$/;"	m	class:ProtoMol::CnSwitchingFunction
myOrder2k	framework/integrators/ModifierShadow.h	/^            unsigned int myOrder2k,$/;"	m	class:ProtoMol::ModifierShadow
myOrigFunc	framework/topology/ComplementSwitchingFunction.h	/^    TOriginalSwitchingFunction myOrigFunc;$/;"	m	class:ProtoMol::ComplementSwitchingFunction
myOrigFunc	framework/topology/RangeSwitchingFunction.h	/^    TOriginalSwitchingFunction myOrigFunc;$/;"	m	class:ProtoMol::RangeSwitchingFunction
myOrigin	framework/base/MultiGrid.h	/^    Vector3D myOrigin;        \/\/ $/;"	m	class:ProtoMol::MultiGrid
myOrigin	framework/forces/ElectricFieldSystemForce.h	/^    Vector3D myOrigin;$/;"	m	class:ProtoMol::ElectricFieldSystemForce
myOrigin	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Vector3D myOrigin;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myOrigin	framework/forces/NonbondedMultiGridSystemForce.h	/^    Vector3D myOrigin;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myOrigin	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Vector3D myOrigin;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myOrigin	framework/topology/PeriodicBoundaryConditions.h	/^    Vector3D myOrigin;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myOrthogonal	framework/topology/PeriodicBoundaryConditions.h	/^    bool myOrthogonal;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myOutputFreq	framework/frontend/Output.h	/^    int  myOutputFreq;       \/\/\/< Output freqeuncy$/;"	m	class:ProtoMol::Output
myOutputList	framework/frontend/OutputCollection.h	/^    Container    myOutputList;$/;"	m	class:ProtoMol::OutputCollection
myP	framework/frontend/OutputCache.h	/^    mutable Real myP;$/;"	m	class:ProtoMol::OutputCache
myP	framework/parallel/Parallel-FD.cpp	/^  int          Parallel::myP;$/;"	m	class:ProtoMol::Parallel	file:
myP	framework/parallel/Parallel.cpp	/^  int          Parallel::myP;$/;"	m	class:ProtoMol::Parallel	file:
myP	framework/parallel/Parallel.h	/^    static int              myP;             \/\/\/< Node number$/;"	m	class:ProtoMol::Parallel
myPAR	framework/frontend/OutputCache.h	/^    PAR myPAR;$/;"	m	class:ProtoMol::OutputCache
myPAR	framework/io/AMBERReader.h	/^    PAR *myPAR;$/;"	m	class:ProtoMol::AMBERReader
myPAR	framework/io/PARReader.h	/^    PAR* myPAR;$/;"	m	class:ProtoMol::PARReader
myPARFile	tools/rem/sequential/replica.h	/^  string myPARFile;$/;"	m	class:Replica
myPDBFile	tools/rem/sequential/replica.h	/^  string myPDBFile;$/;"	m	class:Replica
myPE	framework/frontend/OutputCache.h	/^    mutable Real myPE;$/;"	m	class:ProtoMol::OutputCache
myPGM	framework/io/PGMReader.h	/^    PGM* myPGM;$/;"	m	class:ProtoMol::PGMReader
myPOSA	framework/frontend/OutputState.h	/^    XYZTrajectoryWriter* myPOSA;$/;"	m	class:ProtoMol::OutputState
myPOSB	framework/frontend/OutputState.h	/^    XYZTrajectoryWriter* myPOSB;$/;"	m	class:ProtoMol::OutputState
myPPM	framework/io/PPMReader.h	/^    PPM* myPPM;$/;"	m	class:ProtoMol::PPMReader
myPSF	framework/frontend/OutputCache.h	/^    PSF myPSF;$/;"	m	class:ProtoMol::OutputCache
myPSF	framework/io/AMBERReader.h	/^    PSF *myPSF;$/;"	m	class:ProtoMol::AMBERReader
myPSF	framework/io/PSFReader.h	/^    PSF* myPSF;$/;"	m	class:ProtoMol::PSFReader
myPSFFile	tools/rem/sequential/replica.h	/^  string myPSFFile;$/;"	m	class:Replica
myParameterSize	framework/forces/WrapperMetaForce.h	/^    unsigned int myParameterSize;$/;"	m	class:ProtoMol::WrapperMetaForce
myParameters	framework/forces/WrapperMetaForce.h	/^    std::vector<Parameter> myParameters;$/;"	m	class:ProtoMol::WrapperMetaForce
myParameters	tools/rem/sequential/replica.h	/^  vector<string> myParameters;$/;"	m	class:Replica
myParentDir	tools/rem/sequential/replica.h	/^  string myParentDir;$/;"	m	class:Replica
myPart	framework/integrators/PaulTrapIntegrator.h	/^    Real           myPart;$/;"	m	class:ProtoMol::PaulTrapIntegrator
myPartReal	framework/integrators/PaulTrapIntegrator.h	/^    Real           myPartReal;$/;"	m	class:ProtoMol::PaulTrapIntegrator
myPaulA	framework/frontend/OutputPaulTrap.h	/^    Real myPaulA;$/;"	m	class:ProtoMol::OutputPaulTrap
myPaulF	framework/forces/PaulTrapExtendedForce.h	/^    Real myPaulF;$/;"	m	class:ProtoMol::PaulTrapExtendedForce
myPaulF	framework/frontend/OutputPaulTrap.h	/^    Real myPaulF;$/;"	m	class:ProtoMol::OutputPaulTrap
myPaulF2	framework/frontend/OutputPaulTrap.h	/^    Real myPaulF2;$/;"	m	class:ProtoMol::OutputPaulTrap
myPaulK	framework/frontend/OutputPaulTrap.h	/^    Real myPaulK;$/;"	m	class:ProtoMol::OutputPaulTrap
myPaulLow	framework/frontend/OutputPaulTrap.h	/^    Real myPaulLow;$/;"	m	class:ProtoMol::OutputPaulTrap
myPaulM	framework/frontend/OutputPaulTrap.h	/^    Real myPaulM;$/;"	m	class:ProtoMol::OutputPaulTrap
myPaulOmega	framework/frontend/OutputPaulTrap.h	/^    Real myPaulOmega;$/;"	m	class:ProtoMol::OutputPaulTrap
myPaulQ	framework/frontend/OutputPaulTrap.h	/^    Real myPaulQ;$/;"	m	class:ProtoMol::OutputPaulTrap
myPaulR	framework/frontend/OutputPaulTrap.h	/^    Real myPaulR;$/;"	m	class:ProtoMol::OutputPaulTrap
myPaulUHom	framework/forces/PaulTrapExtendedForce.h	/^    Real myPaulUHom;$/;"	m	class:ProtoMol::PaulTrapExtendedForce
myPaulUHom	framework/frontend/OutputPaulTrap.h	/^    Real myPaulUHom;$/;"	m	class:ProtoMol::OutputPaulTrap
myPhi	framework/forces/MagneticDipoleForce.h	/^    Real myChi, myR, myOmega, myPhi, myHx, myHy, myHz, myD;$/;"	m	class:ProtoMol::MagneticDipoleForce
myPipeSize	framework/parallel/Parallel-FD.cpp	/^  int          Parallel::myPipeSize       = 1;$/;"	m	class:ProtoMol::Parallel	file:
myPipeSize	framework/parallel/Parallel.cpp	/^  int          Parallel::myPipeSize       = 1;$/;"	m	class:ProtoMol::Parallel	file:
myPipeSize	framework/parallel/Parallel.h	/^    static int              myPipeSize;      \/\/\/< Number of add. work packages to push to slaves$/;"	m	class:ProtoMol::Parallel
myPointSelfEnergy	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myPointSelfEnergy;   \/\/ Precomputed energy terms$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myPointSelfEnergy	framework/forces/NonbondedMultiGridSystemForce.h	/^    Real myPointSelfEnergy;\/\/ Precomputed energy terms$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myPointSelfEnergy	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myPointSelfEnergy;   \/\/ Precomputed energy terms$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myPointers	framework/frontend/Factory.h	/^    std::set<const Type*> myPointers;$/;"	m	class:ProtoMol::FactoryBase
myPort	framework/imd/HapticSystemForce.h	/^    int myPort;$/;"	m	class:ProtoMol::HapticSystemForce
myPositions	framework/frontend/Output.h	/^    const Vector3DBlock*   myPositions;$/;"	m	class:ProtoMol::Output
myPositions	framework/frontend/OutputCache.h	/^    const Vector3DBlock*   myPositions;$/;"	m	class:ProtoMol::OutputCache
myPositions	framework/frontend/OutputCollection.h	/^    const Vector3DBlock*   myPositions;$/;"	m	class:ProtoMol::OutputCollection
myPositions	framework/integrators/Integrator.h	/^    Vector3DBlock   *myPositions;$/;"	m	class:ProtoMol::Integrator
myPositions	framework/integrators/Modifier.h	/^    Vector3DBlock*   myPositions;$/;"	m	class:ProtoMol::Modifier
myPostDriftOrNextModifiers	framework/integrators/Integrator.h	/^    std::set<Modifier*> myPostDriftOrNextModifiers;$/;"	m	class:ProtoMol::Integrator
myPostForceModifiers	framework/integrators/Integrator.h	/^    std::set<Modifier*> myPostForceModifiers;$/;"	m	class:ProtoMol::Integrator
myPostStepModifiers	framework/integrators/Integrator.h	/^    std::set<Modifier*> myPostStepModifiers;$/;"	m	class:ProtoMol::Integrator
myPotEnergy	framework/integrators/Integrator.h	/^    Real myPotEnergy;$/;"	m	class:ProtoMol::Integrator
myPreDriftOrNextModifiers	framework/integrators/Integrator.h	/^    std::set<Modifier*> myPreDriftOrNextModifiers;$/;"	m	class:ProtoMol::Integrator
myPreForceModifiers	framework/integrators/Integrator.h	/^    std::set<Modifier*> myPreForceModifiers;$/;"	m	class:ProtoMol::Integrator
myPreStepModifiers	framework/integrators/Integrator.h	/^    std::set<Modifier*> myPreStepModifiers;$/;"	m	class:ProtoMol::Integrator
myPreviousIntegrator	framework/integrators/StandardIntegrator.h	/^    StandardIntegrator *myPreviousIntegrator;$/;"	m	class:ProtoMol::StandardIntegrator
myProtomol	tools/rem/sequential/replica.h	/^  string myProtomol;$/;"	m	class:Replica
myPxAngle	framework/integrators/BSplineMOLLYIntegrator.h	/^    std::vector<ReducedHessAngle> *myPxAngle;  $/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myQ	framework/base/Grid.h	/^    Array<zomplex,3> myQ;  $/;"	m	class:ProtoMol::Grid
myQ	framework/base/MultiGrid.h	/^    std::vector<Array<Real,3> > myQ;  \/\/\/< Arrays of charges$/;"	m	class:ProtoMol::MultiGrid
myQTmp	framework/base/Grid.h	/^    Array<zomplex,3> myQTmp;  $/;"	m	class:ProtoMol::Grid
myQuit	framework/base/Report.h	/^      bool myQuit;$/;"	m	class:ProtoMol::Report::MyStreamer
myR	framework/forces/MagneticDipoleForce.h	/^    Real myChi, myR, myOmega, myPhi, myHx, myHy, myHz, myD;$/;"	m	class:ProtoMol::MagneticDipoleForce
myR	framework/forces/MagneticDipoleMirrorSystemForce.h	/^    Real myChi, myR, myD, myHx, myHy, myHz, myF;$/;"	m	class:ProtoMol::MagneticDipoleMirrorSystemForce
myR0	framework/forces/PaulTrapExtendedForce.h	/^    Real myR0;$/;"	m	class:ProtoMol::PaulTrapExtendedForce
myR0	framework/topology/RangeSwitchingFunction.h	/^    Real myR0;$/;"	m	class:ProtoMol::RangeSwitchingFunction
myR0Squared	framework/topology/RangeSwitchingFunction.h	/^    Real myR0Squared;$/;"	m	class:ProtoMol::RangeSwitchingFunction
myR1	framework/topology/RangeSwitchingFunction.h	/^    Real myR1;  $/;"	m	class:ProtoMol::RangeSwitchingFunction
myR1Squared	framework/topology/RangeSwitchingFunction.h	/^    Real myR1Squared;  $/;"	m	class:ProtoMol::RangeSwitchingFunction
myREMRates	framework/frontend/OutputCache.h	/^    std::vector<Real> myREMRates;$/;"	m	class:ProtoMol::OutputCache
myRS	framework/base/MultiGrid.h	/^    Real myRS;                   \/\/\/< 1 \/ Softening distance$/;"	m	class:ProtoMol::MultiGrid
myRS	framework/forces/CoulombMultiGridDirectForce.h	/^    Real myRS;$/;"	m	class:ProtoMol::CoulombMultiGridDirectForce
myRS	framework/forces/NonbondedMultiGridSystemForce.h	/^    Real myRS;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myRadius	framework/forces/SphericalSystemForce.h	/^    Real myRadius;$/;"	m	class:ProtoMol::SphericalSystemForce
myRadius	framework/io/XFigWriter.h	/^    Real       myRadius;$/;"	m	class:ProtoMol::XFigWriter
myRadius2	framework/forces/SphericalSystemForce.h	/^    Real myRadius2;$/;"	m	class:ProtoMol::SphericalSystemForce
myRandomForces	framework/integrators/DMDLeapfrogIntegrator.h	/^    Vector3DBlock *myRandomForces;$/;"	m	class:ProtoMol::DMDLeapfrogIntegrator
myRatio	framework/base/MultiGrid.h	/^    int myRatio;                 \/\/\/<  Ratio between to levels, usually 2$/;"	m	class:ProtoMol::MultiGrid
myRatio	framework/forces/NonbondedMultiGridSystemForce.h	/^    unsigned int myRatio;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myRatio	framework/integrators/ShadowHMCIntegrator.h	/^            Real myRatio;$/;"	m	class:ProtoMol::ShadowHMCIntegrator
myRc	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myRc;                \/\/ Cutoff real term$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myRc	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myRc;                \/\/ Cutoff real term$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myRcSquared	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myRcSquared;         \/\/ Cutoff squared real term$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myRcSquared	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myRcSquared;         \/\/ Cutoff squared real term$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myReal	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Timer myReal;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myReal	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Timer myReal;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myRealCellSize	framework/topology/CubicCellManager.h	/^    mutable Vector3D myRealCellSize;$/;"	m	class:ProtoMol::CubicCellManager
myRealRCellSize	framework/topology/CubicCellManager.h	/^    mutable Vector3D myRealRCellSize;$/;"	m	class:ProtoMol::CubicCellManager
myRealTime	framework/base/Timer.h	/^    double myRealTime;$/;"	m	class:ProtoMol::TimeRep
myReciprocal	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Timer myReciprocal;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myReciprocal	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Timer myReciprocal;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myRecv	framework/parallel/Parallel-FD.cpp	/^  int          Parallel::myRecv;$/;"	m	class:ProtoMol::Parallel	file:
myRecv	framework/parallel/Parallel.cpp	/^  int          Parallel::myRecv;$/;"	m	class:ProtoMol::Parallel	file:
myRecv	framework/parallel/Parallel.h	/^    static int              myRecv;          \/\/\/< Number of outstanding receives$/;"	m	class:ProtoMol::Parallel
myRemoveAngularMotion	framework/integrators/PaulTrapIntegrator.h	/^    bool           myRemoveAngularMotion;$/;"	m	class:ProtoMol::PaulTrapIntegrator
myRemoveCommonMotion	framework/integrators/PaulTrapIntegrator.h	/^    bool           myRemoveCommonMotion;$/;"	m	class:ProtoMol::PaulTrapIntegrator
myReplicaHistory	framework/frontend/OutputCache.h	/^    const Real *myReplicaHistory;$/;"	m	class:ProtoMol::OutputCache
myReportLevel	framework/base/Report.h	/^      short myReportLevel;$/;"	m	class:ProtoMol::Report::MyStreamer
myReportlevel	framework/base/Report.h	/^      short myReportlevel;$/;"	m	class:ProtoMol::Report::reportlevel
myResetFlags	framework/base/Report.h	/^      std::ios::fmtflags myResetFlags;\/\/ Resest\/default flags$/;"	m	class:ProtoMol::Report::MyStreamer
myRnd	framework/forces/FrictionExtendedForce.h	/^    Vector3D myRnd;$/;"	m	class:ProtoMol::FrictionExtendedForce
myRunningFlag	framework/base/Cycles.h	/^    bool  myRunningFlag;$/;"	m	class:ProtoMol::Cycles
myRunningFlag	framework/base/Timer.h	/^    bool myRunningFlag;$/;"	m	class:ProtoMol::Timer
myS	framework/base/MultiGrid.h	/^    Real myS;                    \/\/\/< Softening distance$/;"	m	class:ProtoMol::MultiGrid
myS	framework/forces/CoulombMultiGridDirectForce.h	/^    Real myS;$/;"	m	class:ProtoMol::CoulombMultiGridDirectForce
myS	framework/forces/CoulombMultiGridDirectTableForce.h	/^    Real myS;$/;"	m	class:ProtoMol::CoulombMultiGridDirectTableForce
myS	framework/forces/CoulombMultiGridDirectTableForceBase.h	/^      Real myS;$/;"	m	class:ProtoMol::CoulombMultiGridDirectTableForceBase::LookUpValues
myS	framework/forces/NonbondedMultiGridSystemForce.h	/^    Real myS;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myS2	framework/forces/NonbondedMultiGridSystemForce.h	/^    Real myS2;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myScale	framework/base/MultiGrid.h	/^    std::vector<Real> myScale;   \/\/\/< Scaling factor for each level$/;"	m	class:ProtoMol::MultiGrid
myScale	framework/frontend/OutputBSDL.h	/^    Real myScale;$/;"	m	class:ProtoMol::OutputBSDL
myScaledParticleIntPositions	framework/base/Grid.h	/^    std::vector<Int3D> myScaledParticleIntPositions;$/;"	m	class:ProtoMol::Grid
myScaledParticleIntPositions	framework/base/MultiGrid.h	/^    std::vector<Int3D> myScaledParticleIntPositions;  \/\/\/< Starting index for anter\/-interpolation$/;"	m	class:ProtoMol::MultiGrid
myScreen	framework/frontend/OutputPaulTrap.h	/^    bool myScreen;$/;"	m	class:ProtoMol::OutputPaulTrap
mySeed	framework/integrators/BBKIntegrator.h	/^    int mySeed;$/;"	m	class:ProtoMol::BBKIntegrator
mySeed	framework/integrators/DMDLeapfrogIntegrator.h	/^    int mySeed;$/;"	m	class:ProtoMol::DMDLeapfrogIntegrator
mySeed	framework/integrators/LangevinImpulseIntegrator.h	/^    int mySeed;$/;"	m	class:ProtoMol::LangevinImpulseIntegrator
mySeparateWater	framework/frontend/OutputTemperatures.h	/^    bool mySeparateWater;$/;"	m	class:ProtoMol::OutputTemperatures
mySet	framework/topology/ExclusionTable.h	/^    std::set<ExclusionPair> mySet;$/;"	m	class:ProtoMol::ExclusionTable
myShadowK	framework/integrators/ModifierShadow.h	/^                         myShadowK,$/;"	m	class:ProtoMol::ModifierShadow
myShadowK	framework/integrators/ShadowHMCIntegrator.h	/^                         myShadowK;$/;"	m	class:ProtoMol::ShadowHMCIntegrator
mySigma	framework/base/MultiGrid.h	/^    int mySigma;                 \/\/\/< 1 if interpolation weights ...,0 for w=0, 0 else$/;"	m	class:ProtoMol::MultiGrid
mySigma	framework/integrators/DMDLeapfrogIntegrator.h	/^    Real mySigma;$/;"	m	class:ProtoMol::DMDLeapfrogIntegrator
mySilentHint	framework/base/Report.h	/^      short mySilentHint;$/;"	m	class:ProtoMol::Report::MyStreamer
mySinCos	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Vector3D* mySinCos;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
mySinCosA	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real* mySinCosA;          \/\/ Look up tables$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
mySize	framework/base/LookUpTableBase.h	/^    int                mySize;$/;"	m	class:ProtoMol::LookUpTableBase
mySize	framework/io/XYZBinWriter.h	/^    unsigned int mySize;$/;"	m	class:ProtoMol::XYZBinWriter
mySize	framework/topology/ArrayCellListStructure.h	/^    size_type   mySize;$/;"	m	class:ProtoMol::ArrayCellListStructure
mySourceConfig	tools/rem/sequential/replica.h	/^  string mySourceConfig;$/;"	m	class:Replica
mySquaredCutoff	framework/forces/ElectricFieldSystemForce.h	/^    Real mySquaredCutoff;$/;"	m	class:ProtoMol::ElectricFieldSystemForce
mySquaredCutoff	framework/forces/OneAtomPair.h	/^    Real mySquaredCutoff;$/;"	m	class:ProtoMol::OneAtomPair
mySquaredCutoff	framework/forces/OneAtomPairTwo.h	/^    Real mySquaredCutoff;$/;"	m	class:ProtoMol::OneAtomPairTwo
myStartSerial	framework/base/systemutilities.cpp	/^  static void (*myStartSerial)(bool) = NULL;$/;"	v	file:
myStartTime	framework/base/Cycles.h	/^    ticks myStartTime;$/;"	m	class:ProtoMol::Cycles
myStartTime	framework/base/Timer.h	/^    TimeRep myStartTime;$/;"	m	class:ProtoMol::Timer
myStatesFile	framework/frontend/OutputState.h	/^    std::string myStatesFile;$/;"	m	class:ProtoMol::OutputState
myStep	framework/integrators/ModifierRemoveAngularMomentum.h	/^    int myStep;$/;"	m	class:ProtoMol::ModifierRemoveAngularMomentum
myStep	framework/integrators/ModifierRemoveLinearMomentum.h	/^    int myStep;$/;"	m	class:ProtoMol::ModifierRemoveLinearMomentum
myStepCounter	framework/imd/HapticSystemForce.h	/^    int myStepCounter;$/;"	m	class:ProtoMol::HapticSystemForce
myStepInc	framework/imd/HapticSystemForce.h	/^    int myStepInc;$/;"	m	class:ProtoMol::HapticSystemForce
myStoredBeta	framework/integrators/ModifierShadow.h	/^            std::deque< Real > myStoredBeta;$/;"	m	class:ProtoMol::ModifierShadow
myStoredPos	framework/integrators/ModifierShadow.h	/^            std::deque< Vector3DBlock > myStoredPos,$/;"	m	class:ProtoMol::ModifierShadow
myStoredVel	framework/integrators/ModifierShadow.h	/^                                        myStoredVel;$/;"	m	class:ProtoMol::ModifierShadow
myStream	framework/base/Report.h	/^      std::ostream* myStream;$/;"	m	class:ProtoMol::Report::MyStreamer
mySumMass	framework/integrators/NoseNVTLeapfrogIntegrator.h	/^    Real           mySumMass;$/;"	m	class:ProtoMol::NoseNVTLeapfrogIntegrator
mySurface	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Timer mySurface;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
mySurface	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Timer mySurface;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
mySwapEndian	framework/io/DCDTrajectoryReader.h	/^    bool mySwapEndian;$/;"	m	class:ProtoMol::DCDTrajectoryReader
mySwapPositions	framework/integrators/MOLLYIntegrator.h	/^    Vector3DBlock* mySwapPositions;$/;"	m	class:ProtoMol::MOLLYIntegrator
mySwitch1	framework/topology/C2SwitchingFunction.h	/^    Real mySwitchon, mySwitchon2,  myCutoff, myCutoff2, mySwitch1, mySwitch2, mySwitch3;$/;"	m	class:ProtoMol::C2SwitchingFunction
mySwitch2	framework/topology/C2SwitchingFunction.h	/^    Real mySwitchon, mySwitchon2,  myCutoff, myCutoff2, mySwitch1, mySwitch2, mySwitch3;$/;"	m	class:ProtoMol::C2SwitchingFunction
mySwitch3	framework/topology/C2SwitchingFunction.h	/^    Real mySwitchon, mySwitchon2,  myCutoff, myCutoff2, mySwitch1, mySwitch2, mySwitch3;$/;"	m	class:ProtoMol::C2SwitchingFunction
mySwitchoff	framework/topology/CnSwitchingFunction.h	/^	  Real mySwitchon, mySwitchon2, myCutoff, myCutoff2, myOrder, mySwitchoff;$/;"	m	class:ProtoMol::CnSwitchingFunction
mySwitchon	framework/topology/C2SwitchingFunction.h	/^    Real mySwitchon, mySwitchon2,  myCutoff, myCutoff2, mySwitch1, mySwitch2, mySwitch3;$/;"	m	class:ProtoMol::C2SwitchingFunction
mySwitchon	framework/topology/CmpCnCnSwitchingFunction.h	/^	  Real mySwitchon, mySwitchon2, myCutoff, myCutoff2, myCompoff, myCompoff2, myOrder;$/;"	m	class:ProtoMol::CmpCnCnSwitchingFunction
mySwitchon	framework/topology/CnSwitchingFunction.h	/^	  Real mySwitchon, mySwitchon2, myCutoff, myCutoff2, myOrder, mySwitchoff;$/;"	m	class:ProtoMol::CnSwitchingFunction
mySwitchon2	framework/topology/C2SwitchingFunction.h	/^    Real mySwitchon, mySwitchon2,  myCutoff, myCutoff2, mySwitch1, mySwitch2, mySwitch3;$/;"	m	class:ProtoMol::C2SwitchingFunction
mySwitchon2	framework/topology/CmpCnCnSwitchingFunction.h	/^	  Real mySwitchon, mySwitchon2, myCutoff, myCutoff2, myCompoff, myCompoff2, myOrder;$/;"	m	class:ProtoMol::CmpCnCnSwitchingFunction
mySwitchon2	framework/topology/CnSwitchingFunction.h	/^	  Real mySwitchon, mySwitchon2, myCutoff, myCutoff2, myOrder, mySwitchoff;$/;"	m	class:ProtoMol::CnSwitchingFunction
mySystemForcesList	framework/forces/ForceGroup.h	/^    std::list<SystemForce*>   mySystemForcesList;$/;"	m	class:ProtoMol::ForceGroup
mySystemTime	framework/base/Timer.h	/^    double mySystemTime;$/;"	m	class:ProtoMol::TimeRep
myT	framework/frontend/OutputCache.h	/^    mutable Real myT;$/;"	m	class:ProtoMol::OutputCache
myT	framework/integrators/PaulTrapIntegrator.h	/^    std::vector<Real> myT;$/;"	m	class:ProtoMol::PaulTrapIntegrator
myTRate	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myTRate;             \/\/$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myTRate	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myTRate;             \/\/$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myTable	framework/base/LookUpTableBase.h	/^    TReal*             myTable;$/;"	m	class:ProtoMol::LookUpTableBase
myTable	framework/base/ScalarStructure.h	/^    Real myTable[LAST-FIRST];$/;"	m	class:ProtoMol::ScalarStructure
myTable	framework/topology/ExclusionTable.h	/^    std::vector<ExclusionPair> myTable;$/;"	m	class:ProtoMol::ExclusionTable
myTargetKE	framework/integrators/NoseNVTLeapfrogIntegrator.h	/^    Real           myTargetKE;$/;"	m	class:ProtoMol::NoseNVTLeapfrogIntegrator
myTargetPres	framework/integrators/NPTVerletIntegrator.h	/^    const Real myTargetPres; \/\/  Target pressure.  Units: (bar)$/;"	m	class:ProtoMol::NPTVerletIntegrator
myTargetTemp	framework/integrators/NPTVerletIntegrator.h	/^    const Real myTargetTemp; \/\/  Target temperature.  Units: (K)$/;"	m	class:ProtoMol::NPTVerletIntegrator
myTargetTemp	framework/integrators/NVTVerletIntegrator.h	/^    const Real myTargetTemp; \/\/  Target temperature.  Units: (K)$/;"	m	class:ProtoMol::NVTVerletIntegrator
myTargetTemperature	tools/rem/sequential/replica.h	/^  double myTargetTemperature;$/;"	m	class:Replica
myTauP	framework/integrators/NPTVerletIntegrator.h	/^    const Real myTauP;       \/\/  box volumr oscillation time constant.  Units: (fs)$/;"	m	class:ProtoMol::NPTVerletIntegrator
myTauT	framework/integrators/NPTVerletIntegrator.h	/^    const Real myTauT;       \/\/  thermostat oscillation period.  Units: (fs)$/;"	m	class:ProtoMol::NPTVerletIntegrator
myTauT	framework/integrators/NVTVerletIntegrator.h	/^    const Real myTauT;       \/\/  thermostat oscillation time period.  Units: (fs)$/;"	m	class:ProtoMol::NVTVerletIntegrator
myTauV	framework/integrators/NPTVerletIntegrator.h	/^    const Real myTauV;       \/\/  box volume thermostat oscillation period.  Units: (fs)$/;"	m	class:ProtoMol::NPTVerletIntegrator
myTemp	framework/io/REMConfigurationReader.h	/^    Real myTemp;$/;"	m	class:ProtoMol::REMConfigurationReader
myTemp	framework/io/TempFileReader.h	/^    Real myTemp;$/;"	m	class:ProtoMol::TempFileReader
myTempForces	framework/integrators/PLeapfrogIntegrator.h	/^    Vector3DBlock* myTempForces;$/;"	m	class:ProtoMol::PLeapfrogIntegrator
myTemperature	framework/integrators/DMDLeapfrogIntegrator.h	/^    Real myTemperature;$/;"	m	class:ProtoMol::DMDLeapfrogIntegrator
myTemperature	framework/integrators/NoseNVTLeapfrogIntegrator.h	/^    const Real     myTemperature;$/;"	m	class:ProtoMol::NoseNVTLeapfrogIntegrator
myTemperature	framework/integrators/PaulTrapIntegrator.h	/^    const Real     myTemperature;$/;"	m	class:ProtoMol::PaulTrapIntegrator
myTemperatureFile	tools/rem/sequential/replica.h	/^  string myTemperatureFile;$/;"	m	class:Replica
myTers	framework/io/PDBReader.h	/^    std::vector<PDB::Ter>* myTers;$/;"	m	class:ProtoMol::PDBReader
myTexts	framework/base/Configuration.h	/^    TextMapType  myTexts;$/;"	m	class:ProtoMol::Configuration
myTheIntegrator	framework/integrators/ModifierAveraging.h	/^    MOLLYIntegrator* myTheIntegrator;$/;"	m	class:ProtoMol::ModifierAveraging
myTheIntegrator	framework/integrators/ModifierFriction.h	/^    NoseNVTLeapfrogIntegrator* myTheIntegrator;$/;"	m	class:ProtoMol::ModifierFriction
myTheIntegrator	framework/integrators/ModifierIncrementTimestep.h	/^    STSIntegrator* myTheIntegrator;$/;"	m	class:ProtoMol::ModifierIncrementTimestep
myTheIntegrator	framework/integrators/ModifierMollification.h	/^    MOLLYIntegrator* myTheIntegrator;$/;"	m	class:ProtoMol::ModifierMollification
myTheIntegrator	framework/integrators/ModifierNPTRattle.h	/^    const TIntegrator* myTheIntegrator;$/;"	m	class:ProtoMol::ModifierNPTRattle
myTheIntegrator	framework/integrators/ModifierNPTShake.h	/^    const TIntegrator* myTheIntegrator;$/;"	m	class:ProtoMol::ModifierNPTShake
myTheIntegrator	framework/integrators/ModifierNVTRattle.h	/^    const TIntegrator* myTheIntegrator;$/;"	m	class:ProtoMol::ModifierNVTRattle
myTheIntegrator	framework/integrators/ModifierNVTShake.h	/^    const TIntegrator* myTheIntegrator;$/;"	m	class:ProtoMol::ModifierNVTShake
myTheIntegrator	framework/integrators/ModifierPostForceBarostat.h	/^    TIntegrator* myTheIntegrator;$/;"	m	class:ProtoMol::ModifierPostForceBarostat
myTheIntegrator	framework/integrators/ModifierPostForceThermostat.h	/^    TIntegrator* myTheIntegrator;$/;"	m	class:ProtoMol::ModifierPostForceThermostat
myTheIntegrator	framework/integrators/ModifierPreForceBarostat.h	/^    TIntegrator* myTheIntegrator;$/;"	m	class:ProtoMol::ModifierPreForceBarostat
myTheIntegrator	framework/integrators/ModifierPreForceThermostat.h	/^    TIntegrator* myTheIntegrator;$/;"	m	class:ProtoMol::ModifierPreForceThermostat
myTheIntegrator	framework/integrators/ModifierRattle.h	/^    const Integrator* myTheIntegrator;$/;"	m	class:ProtoMol::ModifierRattle
myTheIntegrator	framework/integrators/ModifierShake.h	/^    const Integrator* myTheIntegrator;$/;"	m	class:ProtoMol::ModifierShake
myThermalInertia	framework/integrators/NoseNVTLeapfrogIntegrator.h	/^    const Real     myThermalInertia;$/;"	m	class:ProtoMol::NoseNVTLeapfrogIntegrator
myThermalInertia	framework/integrators/PaulTrapIntegrator.h	/^    const Real     myThermalInertia;$/;"	m	class:ProtoMol::PaulTrapIntegrator
myThermostatType	framework/integrators/PaulTrapIntegrator.h	/^    ThermostatType myThermostatType;$/;"	m	class:ProtoMol::PaulTrapIntegrator
myTime	framework/integrators/PaulTrapIntegrator.h	/^    std::vector<Real> myTime;$/;"	m	class:ProtoMol::PaulTrapIntegrator
myTimeAnterpolate	framework/forces/NonbondedMultiGridSystemForce.h	/^    Timer myTimeAnterpolate;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myTimeCoarseToFine	framework/forces/NonbondedMultiGridSystemForce.h	/^    std::vector<Timer> myTimeCoarseToFine;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myTimeCorrection	framework/forces/NonbondedMultiGridSystemForce.h	/^    Timer myTimeCorrection;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myTimeCorrectionMG	framework/forces/NonbondedMultiGridSystemForce.h	/^    std::vector<Timer> myTimeCorrectionMG; $/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myTimeDirect	framework/forces/NonbondedMultiGridSystemForce.h	/^    Timer myTimeDirect;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myTimeFineToCoarse	framework/forces/NonbondedMultiGridSystemForce.h	/^    std::vector<Timer> myTimeFineToCoarse;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myTimeInit	framework/forces/NonbondedMultiGridSystemForce.h	/^    Timer myTimeInit;    $/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myTimeInterpolate	framework/forces/NonbondedMultiGridSystemForce.h	/^    Timer myTimeInterpolate;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myTimeList	framework/forces/TimeForce.h	/^    std::vector<TimeRep> myTimeList;$/;"	m	class:ProtoMol::TimeForce
myTimeLong	framework/forces/NonbondedMultiGridSystemForce.h	/^    Timer myTimeLong;    $/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myTimeShort	framework/forces/NonbondedMultiGridSystemForce.h	/^    Timer myTimeShort;   $/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myTimeStep	framework/io/DCDTrajectoryWriter.h	/^    Real myTimeStep;$/;"	m	class:ProtoMol::DCDTrajectoryWriter
myTimer	framework/forces/TimeForce.h	/^    Timer myTimer;$/;"	m	class:ProtoMol::TimeForce
myTimer	framework/frontend/OutputFile.h	/^    Timer myTimer;$/;"	m	class:ProtoMol::OutputFile
myTimestep	framework/integrators/STSIntegrator.h	/^    Real myTimestep;$/;"	m	class:ProtoMol::STSIntegrator
myToRange	framework/forces/NonbondedFullSystemForce.h	/^    std::vector<PairUInt> myToRange;$/;"	m	class:ProtoMol::NonbondedFullSystemForce
myToRange	framework/forces/NonbondedSimpleFullSystemForce.h	/^    std::vector<PairUInt> myToRange;$/;"	m	class:ProtoMol::NonbondedSimpleFullSystemForce
myToZ	framework/io/XFigWriter.h	/^    Real       myToZ;$/;"	m	class:ProtoMol::XFigWriter
myTopo	framework/integrators/Integrator.h	/^    GenericTopology *myTopo;$/;"	m	class:ProtoMol::Integrator
myTopology	framework/frontend/Output.h	/^    const GenericTopology* myTopology; $/;"	m	class:ProtoMol::Output
myTopology	framework/frontend/OutputCache.h	/^    const GenericTopology* myTopology; $/;"	m	class:ProtoMol::OutputCache
myTopology	framework/frontend/OutputCollection.h	/^    const GenericTopology* myTopology; $/;"	m	class:ProtoMol::OutputCollection
myTopology	framework/integrators/Modifier.h	/^    GenericTopology* myTopology; $/;"	m	class:ProtoMol::Modifier
myTotalTime	framework/base/Timer.h	/^    TimeRep myTotalTime;$/;"	m	class:ProtoMol::Timer
myType	framework/base/AbstractEnumType.h	/^    Enum myType;$/;"	m	class:ProtoMol::AbstractEnumType
myType	framework/frontend/InputPosVel.h	/^    InputPosVelType myType;$/;"	m	class:ProtoMol::InputPosVel
myTypeOfBSpline	framework/integrators/BSplineMOLLYIntegrator.h	/^    BSplineType myTypeOfBSpline;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myU0	framework/forces/PaulTrapExtendedForce.h	/^    Real myU0;$/;"	m	class:ProtoMol::PaulTrapExtendedForce
myUnit	framework/frontend/OutputPaulTrap.h	/^    std::string myUnit;$/;"	m	class:ProtoMol::OutputPaulTrap
myUnit	framework/frontend/OutputScreen.h	/^    std::string myUnit;$/;"	m	class:ProtoMol::OutputScreen
myUseBarrier	framework/parallel/Parallel-FD.cpp	/^  bool         Parallel::myUseBarrier     = false;$/;"	m	class:ProtoMol::Parallel	file:
myUseBarrier	framework/parallel/Parallel.cpp	/^  bool         Parallel::myUseBarrier     = false;$/;"	m	class:ProtoMol::Parallel	file:
myUseBarrier	framework/parallel/Parallel.h	/^    static bool             myUseBarrier;    \/\/\/< Flag to signal usage of MPI_Barrier$/;"	m	class:ProtoMol::Parallel
myUserTime	framework/base/Timer.h	/^    double myUserTime;$/;"	m	class:ProtoMol::TimeRep
myV	framework/base/Grid.h	/^    Real myV;$/;"	m	class:ProtoMol::Grid
myV	framework/base/MultiGrid.h	/^    std::vector<Array<Real,3> > myV;  \/\/\/< Arrays of potentials$/;"	m	class:ProtoMol::MultiGrid
myV	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myV,myVr;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myV	framework/forces/NonbondedMultiGridSystemForce.h	/^    Real myV;$/;"	m	class:ProtoMol::NonbondedMultiGridSystemForce
myV	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myV,myVr;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myV	framework/frontend/OutputCache.h	/^    mutable Real myV;$/;"	m	class:ProtoMol::OutputCache
myV	framework/topology/PeriodicBoundaryConditions.h	/^    Real myV;$/;"	m	class:ProtoMol::PeriodicBoundaryConditions
myVELA	framework/frontend/OutputState.h	/^    XYZTrajectoryWriter* myVELA;$/;"	m	class:ProtoMol::OutputState
myVELB	framework/frontend/OutputState.h	/^    XYZTrajectoryWriter* myVELB;$/;"	m	class:ProtoMol::OutputState
myValue	framework/base/Value.h	/^    PlaceHolder* myValue;$/;"	m	class:ProtoMol::Value
myValue	framework/frontend/InputValue.h	/^    Value myValue;$/;"	m	class:ProtoMol::InputValue
myValues	framework/base/Configuration.h	/^    ValueMapType myValues;$/;"	m	class:ProtoMol::Configuration
myVector	framework/base/Vector.h	/^    std::vector<T> & myVector;$/;"	m	class:ProtoMol::VectorPacker
myVector	framework/base/Vector.h	/^    std::vector<T> myVector; $/;"	m	class:ProtoMol::Vector
myVelocities	framework/frontend/Output.h	/^    const Vector3DBlock*   myVelocities; $/;"	m	class:ProtoMol::Output
myVelocities	framework/frontend/OutputCache.h	/^    const Vector3DBlock*   myVelocities; $/;"	m	class:ProtoMol::OutputCache
myVelocities	framework/frontend/OutputCollection.h	/^    const Vector3DBlock*   myVelocities; $/;"	m	class:ProtoMol::OutputCollection
myVelocities	framework/integrators/Integrator.h	/^    Vector3DBlock   *myVelocities;$/;"	m	class:ProtoMol::Integrator
myVelocities	framework/integrators/Modifier.h	/^    Vector3DBlock*   myVelocities; $/;"	m	class:ProtoMol::Modifier
myVhat	framework/integrators/DMDLeapfrogIntegrator.h	/^    Vector3DBlock *myVhat;$/;"	m	class:ProtoMol::DMDLeapfrogIntegrator
myView	framework/frontend/OutputBSDL.h	/^    std::string myView;$/;"	m	class:ProtoMol::OutputBSDL
myVolume	framework/integrators/NPTVerletIntegrator.h	/^    Real myVolume;           \/\/  Current cubic volume.  Units (AA^3)$/;"	m	class:ProtoMol::NPTVerletIntegrator
myVr	framework/forces/NonbondedFullEwaldSystemForce.h	/^    Real myV,myVr;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
myVr	framework/forces/NonbondedPMEwaldSystemForce.h	/^    Real myV,myVr;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
myWater	framework/frontend/OutputBSDL.h	/^    bool myWater;$/;"	m	class:ProtoMol::OutputBSDL
myWaterAtomTypes	framework/frontend/OutputTemperatures.h	/^    std::vector<int> myWaterAtomTypes;$/;"	m	class:ProtoMol::OutputTemperatures
myWaterT	framework/frontend/OutputCache.h	/^    mutable Real myWaterT;$/;"	m	class:ProtoMol::OutputCache
myWidth	framework/base/Grid.h	/^    Real myWidth;$/;"	m	class:ProtoMol::Grid
myWidthr	framework/base/Grid.h	/^    Real myWidthr;$/;"	m	class:ProtoMol::Grid
myWorkState	framework/parallel/Parallel-FD.cpp	/^  Parallel::WorkState Parallel::myWorkState = Parallel::SEQUENTIAL;$/;"	m	class:ProtoMol::Parallel	file:
myWorkState	framework/parallel/Parallel.cpp	/^  Parallel::WorkState Parallel::myWorkState = Parallel::SEQUENTIAL;$/;"	m	class:ProtoMol::Parallel	file:
myWorkState	framework/parallel/Parallel.h	/^    static WorkState        myWorkState;     \/\/\/< Actual work state$/;"	m	class:ProtoMol::Parallel
myX	framework/io/DCDTrajectoryReader.h	/^    std::vector<float4> myX;$/;"	m	class:ProtoMol::DCDTrajectoryReader
myX	framework/io/DCDTrajectoryWriter.h	/^    std::vector<float4> myX;$/;"	m	class:ProtoMol::DCDTrajectoryWriter
myXYZ	framework/frontend/OutputXYZBinTrajectoryPos.h	/^    XYZBinWriter* myXYZ;$/;"	m	class:ProtoMol::OutputXYZBinTrajectoryPos
myXYZ	framework/frontend/OutputXYZBinTrajectoryVel.h	/^    XYZBinWriter* myXYZ;$/;"	m	class:ProtoMol::OutputXYZBinTrajectoryVel
myXYZ	framework/frontend/OutputXYZTrajectoryForce.h	/^    XYZTrajectoryWriter* myXYZ;$/;"	m	class:ProtoMol::OutputXYZTrajectoryForce
myXYZ	framework/frontend/OutputXYZTrajectoryPos.h	/^    XYZTrajectoryWriter* myXYZ;$/;"	m	class:ProtoMol::OutputXYZTrajectoryPos
myXYZ	framework/frontend/OutputXYZTrajectoryVel.h	/^    XYZTrajectoryWriter* myXYZ;$/;"	m	class:ProtoMol::OutputXYZTrajectoryVel
myXxAngle	framework/integrators/BSplineMOLLYIntegrator.h	/^    std::vector<ReducedHessAngle> *myXxAngle;$/;"	m	class:ProtoMol::BSplineMOLLYIntegrator
myY	framework/io/DCDTrajectoryReader.h	/^    std::vector<float4> myY;$/;"	m	class:ProtoMol::DCDTrajectoryReader
myY	framework/io/DCDTrajectoryWriter.h	/^    std::vector<float4> myY;$/;"	m	class:ProtoMol::DCDTrajectoryWriter
myZ	framework/io/DCDTrajectoryReader.h	/^    std::vector<float4> myZ;$/;"	m	class:ProtoMol::DCDTrajectoryReader
myZ	framework/io/DCDTrajectoryWriter.h	/^    std::vector<float4> myZ;$/;"	m	class:ProtoMol::DCDTrajectoryWriter
my_angle	framework/topology/AngleInfo.h	/^    Real                      my_angle;$/;"	m	class:ProtoMol::AngleInfo
my_angleType	framework/topology/AngleInfo.h	/^    AngleType                 my_angleType;$/;"	m	class:ProtoMol::AngleInfo
my_atomID	framework/topology/AngleInfo.h	/^    unsigned int              my_atomID;$/;"	m	class:ProtoMol::AngleInfo
my_bondedAtoms	framework/topology/AngleInfo.h	/^    std::vector<unsigned int> my_bondedAtoms;$/;"	m	class:ProtoMol::AngleInfo
my_isExclusionAtom	framework/topology/AngleInfo.h	/^    bool                      my_isExclusionAtom;$/;"	m	class:ProtoMol::AngleInfo
my_isInnerAtom	framework/topology/AngleInfo.h	/^    bool                      my_isInnerAtom;$/;"	m	class:ProtoMol::AngleInfo
my_pointer	framework/topology/AngleInfo.h	/^    unsigned int              my_pointer;$/;"	m	class:ProtoMol::AngleInfo
my_visited	framework/topology/AngleInfo.h	/^    bool                      my_visited;$/;"	m	class:ProtoMol::AngleInfo
mybonds	framework/base/Atom.h	/^    std::vector< int > mybonds;$/;"	m	struct:ProtoMol::Atom
myerf	framework/base/mathutilities.cpp	/^  Real myerf(Real x){$/;"	f	namespace:ProtoMol
myiSGPAR	framework/frontend/OutputCache.h	/^    iSGPAR myiSGPAR;$/;"	m	class:ProtoMol::OutputCache
n	compilerTests/glutTest.cpp	/^static GLfloat n[6][3] = {  \/* Normals for the 6 faces of a cube. *\/$/;"	v	file:
name	framework/base/Atom.h	/^    std::string name;$/;"	m	struct:ProtoMol::Atom
name	framework/base/AtomType.h	/^    std::string name;       \/\/\/< The name of this atom type.$/;"	m	struct:ProtoMol::AtomType
name	framework/base/Molecule.h	/^    std::string name;$/;"	m	struct:ProtoMol::Molecule
names	framework/base/XYZ.h	/^    std::vector<std::string> names;$/;"	m	struct:ProtoMol::XYZ
nbfixs	framework/base/PAR.h	/^    std::vector<Nbfix> nbfixs;$/;"	m	class:ProtoMol::PAR
negative	framework/base/PAR.h	/^      bool negative;       $/;"	m	struct:ProtoMol::PAR::Nonbonded
negative2	framework/base/PAR.h	/^      bool negative2;       \/\/\/< flag for a negative VDW paramenter second term (see above), default to true$/;"	m	struct:ProtoMol::PAR::Nonbonded
netint	framework/imd/imd.cpp	/^    } netint;$/;"	t	namespace:ProtoMol::IMD	file:
new_type	framework/base/XSC.h	/^    unsigned int myMolecule, old_type, new_type;$/;"	m	struct:ProtoMol::XSC
newtype	framework/base/Molecule.h	/^    unsigned int type, newtype;$/;"	m	struct:ProtoMol::Molecule
next	framework/integrators/MTSIntegrator.h	/^  inline Integrator* MTSIntegrator::next(){$/;"	f	class:ProtoMol::MTSIntegrator
next	framework/integrators/MTSIntegrator.h	/^  inline const Integrator* MTSIntegrator::next() const{$/;"	f	class:ProtoMol::MTSIntegrator
next	framework/integrators/STSIntegrator.h	/^    virtual Integrator* next(){return NULL;}$/;"	f	class:ProtoMol::STSIntegrator
next	framework/integrators/STSIntegrator.h	/^    virtual const Integrator* next() const {return NULL;}$/;"	f	class:ProtoMol::STSIntegrator
next	framework/parallel/Parallel-FD.cpp	/^  bool Parallel::next(){$/;"	f	class:ProtoMol::Parallel
next	framework/parallel/Parallel.cpp	/^  bool Parallel::next(){$/;"	f	class:ProtoMol::Parallel
next	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    void next(void){$/;"	f	class:ProtoMol::CellListEnumerator
next	framework/topology/CellListEnumerator_standard.h	/^    void next(){$/;"	f	class:ProtoMol::CellListEnumerator
nextMaster	framework/parallel/Parallel-FD.cpp	/^  void Parallel::nextMaster(){$/;"	f	class:ProtoMol::Parallel
nextMaster	framework/parallel/Parallel.cpp	/^  void Parallel::nextMaster(){$/;"	f	class:ProtoMol::Parallel
nextNewPair	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    void nextNewPair(int inc){$/;"	f	class:ProtoMol::CellListEnumerator
nextNewPair	framework/topology/CellListEnumerator_standard.h	/^    void nextNewPair(int inc){$/;"	f	class:ProtoMol::CellListEnumerator
ngrp	framework/base/PSF.h	/^    std::vector<Ngrp> ngrp;$/;"	m	class:ProtoMol::PSF
node	framework/io/TempFileReader.h	/^    int node;$/;"	m	class:ProtoMol::TempFileReader
nonbondedForceFunction	framework/forces/OneAtomPair.h	/^    TNonbondedForce nonbondedForceFunction;  $/;"	m	class:ProtoMol::OneAtomPair
nonbondedForceFunction	framework/forces/OneAtomPairFull.h	/^    TNonbondedForce nonbondedForceFunction;$/;"	m	class:ProtoMol::OneAtomPairFull
nonbondedForceFunction	framework/forces/OneMollyPair.h	/^    TNonbondedForce nonbondedForceFunction; $/;"	m	class:ProtoMol::OneMollyPair
nonbondedForceFunctionFirst	framework/forces/OneAtomPairTwo.h	/^    TNonbondedForceFirst nonbondedForceFunctionFirst;  $/;"	m	class:ProtoMol::OneAtomPairTwo
nonbondedForceFunctionFirst	framework/forces/OneAtomPairTwoFull.h	/^    TNonbondedForceFirst nonbondedForceFunctionFirst;  $/;"	m	class:ProtoMol::OneAtomPairTwoFull
nonbondedForceFunctionFirst	framework/forces/OneMollyPairTwo.h	/^    TNonbondedForceFirst nonbondedForceFunctionFirst;  $/;"	m	class:ProtoMol::OneMollyPairTwo
nonbondedForceFunctionSecond	framework/forces/OneAtomPairTwo.h	/^    TNonbondedForceSecond nonbondedForceFunctionSecond;  $/;"	m	class:ProtoMol::OneAtomPairTwo
nonbondedForceFunctionSecond	framework/forces/OneAtomPairTwoFull.h	/^    TNonbondedForceSecond nonbondedForceFunctionSecond;  $/;"	m	class:ProtoMol::OneAtomPairTwoFull
nonbondedForceFunctionSecond	framework/forces/OneMollyPairTwo.h	/^    TNonbondedForceSecond nonbondedForceFunctionSecond;  $/;"	m	class:ProtoMol::OneMollyPairTwo
nonbondedHessian	framework/forces/OneMollyPair.h	/^    typename ReducedHessTraits<TNonbondedForce>::Hessian nonbondedHessian;$/;"	m	class:ProtoMol::OneMollyPair
nonbondedHessianFirst	framework/forces/OneMollyPairTwo.h	/^    typename ReducedHessTraits<TNonbondedForceFirst>::Hessian nonbondedHessianFirst;$/;"	m	class:ProtoMol::OneMollyPairTwo
nonbondedHessianSecond	framework/forces/OneMollyPairTwo.h	/^    typename ReducedHessTraits<TNonbondedForceSecond>::Hessian nonbondedHessianSecond;$/;"	m	class:ProtoMol::OneMollyPairTwo
nonbondeds	framework/base/PAR.h	/^    std::vector<Nonbonded> nonbondeds;$/;"	m	class:ProtoMol::PAR
nonbondeds	framework/base/PSF.h	/^    std::vector<Nonbonded> nonbondeds;$/;"	m	class:ProtoMol::PSF
norm	framework/base/Vector3D.h	/^    Real norm() const {$/;"	f	struct:ProtoMol::Vector3D
norm	framework/base/mathutilities.cpp	/^  Real norm(Real a, Real b) { $/;"	f	namespace:ProtoMol
normSquared	framework/base/Vector3D.h	/^    Real normSquared() const {$/;"	f	struct:ProtoMol::Vector3D
normVector3DOp	framework/topology/PeriodicBoundaryConditions.cpp	/^  static bool normVector3DOp (const Vector3D& v1, const Vector3D& v2){$/;"	f	namespace:ProtoMol	file:
normalize	framework/base/Vector3D.h	/^    Real normalize() {$/;"	f	struct:ProtoMol::Vector3D
normalizeString	framework/base/stringutilities.cpp	/^  string normalizeString(const string& word){$/;"	f	namespace:ProtoMol
normalized	framework/base/Vector3D.h	/^    Vector3D normalized() const {$/;"	f	struct:ProtoMol::Vector3D
notSameCell	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    bool notSameCell(){return (i != j);}$/;"	f	class:ProtoMol::CellListEnumerator
notSameCell	framework/topology/CellListEnumerator_standard.h	/^    bool notSameCell(){return (i != j);}$/;"	f	class:ProtoMol::CellListEnumerator
numBonds	framework/topology/AngleInfo.cpp	/^  unsigned int AngleInfo::numBonds()const {$/;"	f	class:ProtoMol::AngleInfo
numComps	framework/topology/BankLennardJonesParameterTable.h	/^    unsigned int numComps;$/;"	m	struct:ProtoMol::BankLennardJonesParameterTable
numTables	framework/topology/BankLennardJonesParameterTable.h	/^    unsigned int numTables;$/;"	m	struct:ProtoMol::BankLennardJonesParameterTable
number	framework/base/PAR.h	/^      int number;          \/\/\/< nonbonded number$/;"	m	struct:ProtoMol::PAR::Nonbonded
number	framework/base/PAR.h	/^      int number;         \/\/\/< angle number$/;"	m	struct:ProtoMol::PAR::Angle
number	framework/base/PAR.h	/^      int number;         \/\/\/< bond number$/;"	m	struct:ProtoMol::PAR::Bond
number	framework/base/PAR.h	/^      int number;         \/\/\/< dihedral number$/;"	m	struct:ProtoMol::PAR::Dihedral
number	framework/base/PAR.h	/^      int number;         \/\/\/< improper number$/;"	m	struct:ProtoMol::PAR::Improper
number	framework/base/PAR.h	/^      int number;         \/\/\/< nbfi number$/;"	m	struct:ProtoMol::PAR::Nbfix
number	framework/base/PAR.h	/^      int number;        \/\/\/< hydrogen bond number$/;"	m	struct:ProtoMol::PAR::Hbond
number	framework/base/PSF.h	/^      int number;               \/\/\/< atom number$/;"	m	struct:ProtoMol::PSF::Atom
number	framework/base/PSF.h	/^      int number;     \/\/\/< acceptor number$/;"	m	struct:ProtoMol::PSF::Acceptor
number	framework/base/PSF.h	/^      int number;     \/\/\/< angle number$/;"	m	struct:ProtoMol::PSF::Angle
number	framework/base/PSF.h	/^      int number;     \/\/\/< bond number$/;"	m	struct:ProtoMol::PSF::Bond
number	framework/base/PSF.h	/^      int number;     \/\/\/< dihedral number$/;"	m	struct:ProtoMol::PSF::Dihedral
number	framework/base/PSF.h	/^      int number;     \/\/\/< donor number$/;"	m	struct:ProtoMol::PSF::Donor
number	framework/base/PSF.h	/^      int number;     \/\/\/< improper number$/;"	m	struct:ProtoMol::PSF::Improper
number	framework/base/PSF.h	/^      int number;     \/\/\/< ngrp number$/;"	m	struct:ProtoMol::PSF::Ngrp
number	framework/base/PSF.h	/^      int number;     \/\/\/< nonbonded structure number$/;"	m	struct:ProtoMol::PSF::Nonbonded
numberOfBlocks	framework/forces/AngleSystemForce.h	/^  inline unsigned int AngleSystemForce<TBoundaryConditions>::numberOfBlocks(const GenericTopology* topo, $/;"	f	class:ProtoMol::AngleSystemForce
numberOfBlocks	framework/forces/BondSystemForce.h	/^  inline unsigned int BondSystemForce<TBoundaryConditions>::numberOfBlocks(const GenericTopology* topo, $/;"	f	class:ProtoMol::BondSystemForce
numberOfBlocks	framework/forces/CompareForce.cpp	/^  unsigned int CompareForce::numberOfBlocks(const GenericTopology* topo,$/;"	f	class:ProtoMol::CompareForce
numberOfBlocks	framework/forces/DihedralSystemForce.h	/^  inline unsigned int DihedralSystemForce<TBoundaryConditions>::numberOfBlocks(const GenericTopology* topo, $/;"	f	class:ProtoMol::DihedralSystemForce
numberOfBlocks	framework/forces/ElectricFieldSystemForce.h	/^  inline unsigned int ElectricFieldSystemForce<TBoundaryConditions,TSwitchingFunction,TConstraint>::numberOfBlocks(const GenericTopology*,$/;"	f	class:ProtoMol::ElectricFieldSystemForce
numberOfBlocks	framework/forces/ExternalGravitationSystemForce.cpp	/^  unsigned int ExternalGravitationSystemForce::numberOfBlocks(const GenericTopology*, $/;"	f	class:ProtoMol::ExternalGravitationSystemForce
numberOfBlocks	framework/forces/ExternalMagneticFieldExtendedForce.cpp	/^  unsigned int ExternalMagneticFieldExtendedForce::numberOfBlocks(const GenericTopology*, $/;"	f	class:ProtoMol::ExternalMagneticFieldExtendedForce
numberOfBlocks	framework/forces/Force.h	/^    virtual unsigned int numberOfBlocks(const GenericTopology*,const Vector3DBlock*){return 1;}$/;"	f	class:ProtoMol::Force
numberOfBlocks	framework/forces/FrictionExtendedForce.cpp	/^  unsigned int FrictionExtendedForce::numberOfBlocks(const GenericTopology*, $/;"	f	class:ProtoMol::FrictionExtendedForce
numberOfBlocks	framework/forces/HarmDihedralSystemForce.h	/^  inline unsigned int HarmDihedralSystemForce<TBoundaryConditions>::numberOfBlocks(const GenericTopology* topo, $/;"	f	class:ProtoMol::HarmDihedralSystemForce
numberOfBlocks	framework/forces/ImproperSystemForce.h	/^  inline unsigned int ImproperSystemForce<TBoundaryConditions>::numberOfBlocks(const GenericTopology* topo, $/;"	f	class:ProtoMol::ImproperSystemForce
numberOfBlocks	framework/forces/NonbondedCutoffForce.h	/^    virtual unsigned int numberOfBlocks(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedCutoffForce
numberOfBlocks	framework/forces/NonbondedFullEwaldSystemForce.h	/^					     TSwitchingFunction>::numberOfBlocks(const GenericTopology* topo,$/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
numberOfBlocks	framework/forces/NonbondedFullSystemForce.h	/^    virtual unsigned int numberOfBlocks(const GenericTopology*, const Vector3DBlock*){return Parallel::getAvailableNum();} $/;"	f	class:ProtoMol::NonbondedFullSystemForce
numberOfBlocks	framework/forces/NonbondedMultiGridSystemForce.h	/^					     smooth>::numberOfBlocks(const GenericTopology* topo, const Vector3DBlock* positions){$/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
numberOfBlocks	framework/forces/NonbondedPMEwaldSystemForce.h	/^					   real,reciprocal,correction,TInterpolation,TSwitchingFunction>::numberOfBlocks(const GenericTopology* topo,$/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
numberOfBlocks	framework/forces/NonbondedSimpleFullSystemForce.h	/^    virtual unsigned int numberOfBlocks(const GenericTopology*, const Vector3DBlock*){$/;"	f	class:ProtoMol::NonbondedSimpleFullSystemForce
numberOfBlocks	framework/forces/PaulTrapExtendedForce.h	/^  inline unsigned int PaulTrapExtendedForce<TBoundaryConditions>::numberOfBlocks(const GenericTopology*,$/;"	f	class:ProtoMol::PaulTrapExtendedForce
numberOfBlocks	framework/forces/SphericalSystemForce.cpp	/^  unsigned int SphericalSystemForce::numberOfBlocks(const GenericTopology* , $/;"	f	class:ProtoMol::SphericalSystemForce
numberOfBlocks	framework/forces/TimeForce.cpp	/^  unsigned int TimeForce::numberOfBlocks(const GenericTopology* topo,$/;"	f	class:ProtoMol::TimeForce
obj	framework/frontend/Factory.h	/^    static Factory* obj;$/;"	m	class:ProtoMol::Factory
obj	framework/frontend/Factory.h	/^  Factory<Type>* Factory<Type>::obj=NULL;$/;"	m	class:ProtoMol::Factory
obj	framework/frontend/HelpTextFactory.h	/^    static HelpTextFactory* obj;$/;"	m	class:ProtoMol::HelpTextFactory
obj	framework/parallel/Parallel-FD.cpp	/^  Parallel*    Parallel::obj     = NULL;$/;"	m	class:ProtoMol::Parallel	file:
obj	framework/parallel/Parallel.cpp	/^  Parallel*    Parallel::obj     = NULL;$/;"	m	class:ProtoMol::Parallel	file:
obj	framework/parallel/Parallel.h	/^    static Parallel*        obj;             \/\/\/< Instance$/;"	m	class:ProtoMol::Parallel
occupancy	framework/base/PDB.h	/^      Real        occupancy;	   \/\/\/< occupancy	   $/;"	m	struct:ProtoMol::PDB::Atom
off_type	framework/base/sstream_local.h	/^    typedef streamoff   off_type;$/;"	t	class:std::stringbuf
ok	framework/base/Value.h	/^      bool ok;$/;"	m	class:ProtoMol::Value::Holder
ok	framework/parallel/Parallel-FD.cpp	/^  bool Parallel::ok(const string& err){$/;"	f	class:ProtoMol::Parallel
ok	framework/parallel/Parallel.cpp	/^  bool Parallel::ok(const string& err){$/;"	f	class:ProtoMol::Parallel
ok	framework/parallel/Parallel.h	/^    static bool ok()                   {return (myInitialized && !myFinalized);}$/;"	f	class:ProtoMol::Parallel
old_type	framework/base/XSC.h	/^    unsigned int myMolecule, old_type, new_type;$/;"	m	struct:ProtoMol::XSC
oldconformstring	framework/frontend/OutputDihedrals.h	/^    std::string oldconformstring;$/;"	m	class:ProtoMol::OutputDihedrals
open	framework/frontend/InputPosVel.cpp	/^  bool InputPosVel::open(){$/;"	f	class:ProtoMol::InputPosVel
open	framework/frontend/InputPosVel.cpp	/^  bool InputPosVel::open(const string& filename){$/;"	f	class:ProtoMol::InputPosVel
open	framework/frontend/OutputFile.cpp	/^  bool OutputFile::open(){$/;"	f	class:ProtoMol::OutputFile
open	framework/io/AMBERReader.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::AMBERReader
open	framework/io/AMBERReader.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::AMBERReader
open	framework/io/AMBERReader.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::AMBERReader
open	framework/io/CRDReader.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::CRDReader
open	framework/io/CRDReader.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::CRDReader
open	framework/io/CRDReader.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::CRDReader
open	framework/io/ConfigurationReader.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::ConfigurationReader
open	framework/io/ConfigurationReader.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::ConfigurationReader
open	framework/io/ConfigurationReader.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::ConfigurationReader
open	framework/io/DCDTrajectoryReader.h	/^    virtual bool open(){myFirst=true;return File::open();}$/;"	f	class:ProtoMol::DCDTrajectoryReader
open	framework/io/DCDTrajectoryReader.h	/^    virtual bool open(const char* filename){myFirst=true;return File::open(filename);}$/;"	f	class:ProtoMol::DCDTrajectoryReader
open	framework/io/DCDTrajectoryReader.h	/^    virtual bool open(const std::string& filename){myFirst=true;return File::open(filename);}$/;"	f	class:ProtoMol::DCDTrajectoryReader
open	framework/io/DCDTrajectoryWriter.cpp	/^  bool DCDTrajectoryWriter::open(Real timestep, unsigned int firststep, bool isLittleEndian){$/;"	f	class:ProtoMol::DCDTrajectoryWriter
open	framework/io/DCDTrajectoryWriter.cpp	/^  bool DCDTrajectoryWriter::open(const char* filename, Real timestep, unsigned int firststep, bool isLittleEndian){$/;"	f	class:ProtoMol::DCDTrajectoryWriter
open	framework/io/DCDTrajectoryWriter.cpp	/^  bool DCDTrajectoryWriter::open(const string& filename, Real timestep, unsigned int firststep, bool isLittleEndian){$/;"	f	class:ProtoMol::DCDTrajectoryWriter
open	framework/io/DCDTrajectoryWriter.h	/^    virtual bool open(){myFirst = false;return File::open();}$/;"	f	class:ProtoMol::DCDTrajectoryWriter
open	framework/io/DCDTrajectoryWriter.h	/^    virtual bool open(const char* filename){myFirst = false;return File::open(filename);}$/;"	f	class:ProtoMol::DCDTrajectoryWriter
open	framework/io/DCDTrajectoryWriter.h	/^    virtual bool open(const std::string& filename){myFirst = false;return File::open(filename);}$/;"	f	class:ProtoMol::DCDTrajectoryWriter
open	framework/io/File.cpp	/^  bool File::open(){$/;"	f	class:ProtoMol::File
open	framework/io/File.cpp	/^  bool File::open(const char* filename){$/;"	f	class:ProtoMol::File
open	framework/io/File.cpp	/^  bool File::open(const string& filename){$/;"	f	class:ProtoMol::File
open	framework/io/PARReader.cpp	/^  bool PARReader::open(PAR::CharmmTypeEnum charmmType){$/;"	f	class:ProtoMol::PARReader
open	framework/io/PARReader.cpp	/^  bool PARReader::open(const std::string& filename, PAR::CharmmTypeEnum charmmType){$/;"	f	class:ProtoMol::PARReader
open	framework/io/PARReader.h	/^    virtual bool open(){return File::open();};$/;"	f	class:ProtoMol::PARReader
open	framework/io/PARReader.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::PARReader
open	framework/io/PARReader.h	/^    virtual bool open(const std::string& filename){return File::open(filename);};$/;"	f	class:ProtoMol::PARReader
open	framework/io/PARReader.h	/^  inline bool PARReader::open(const char* filename, PAR::CharmmTypeEnum charmmType){$/;"	f	class:ProtoMol::PARReader
open	framework/io/PARWriter.cpp	/^  bool PARWriter::open(PAR::CharmmTypeEnum charmmType){$/;"	f	class:ProtoMol::PARWriter
open	framework/io/PARWriter.cpp	/^  bool PARWriter::open(const char* filename, PAR::CharmmTypeEnum charmmType){$/;"	f	class:ProtoMol::PARWriter
open	framework/io/PARWriter.cpp	/^  bool PARWriter::open(const std::string& filename, PAR::CharmmTypeEnum charmmType){$/;"	f	class:ProtoMol::PARWriter
open	framework/io/PARWriter.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::PARWriter
open	framework/io/PARWriter.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::PARWriter
open	framework/io/PARWriter.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::PARWriter
open	framework/io/PDBReader.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::PDBReader
open	framework/io/PDBReader.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::PDBReader
open	framework/io/PDBReader.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::PDBReader
open	framework/io/PDBWriter.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::PDBWriter
open	framework/io/PDBWriter.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::PDBWriter
open	framework/io/PDBWriter.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::PDBWriter
open	framework/io/PGMReader.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::PGMReader
open	framework/io/PGMReader.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::PGMReader
open	framework/io/PGMReader.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::PGMReader
open	framework/io/PGMWriter.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::PGMWriter
open	framework/io/PGMWriter.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::PGMWriter
open	framework/io/PGMWriter.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::PGMWriter
open	framework/io/PNGWriter.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::PNGWriter
open	framework/io/PNGWriter.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::PNGWriter
open	framework/io/PNGWriter.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::PNGWriter
open	framework/io/PPMReader.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::PPMReader
open	framework/io/PPMReader.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::PPMReader
open	framework/io/PPMReader.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::PPMReader
open	framework/io/PPMWriter.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::PPMWriter
open	framework/io/PPMWriter.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::PPMWriter
open	framework/io/PPMWriter.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::PPMWriter
open	framework/io/PSFReader.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::PSFReader
open	framework/io/PSFReader.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::PSFReader
open	framework/io/PSFReader.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::PSFReader
open	framework/io/PSFWriter.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::PSFWriter
open	framework/io/PSFWriter.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::PSFWriter
open	framework/io/PSFWriter.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::PSFWriter
open	framework/io/REMConfigurationReader.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::REMConfigurationReader
open	framework/io/REMConfigurationReader.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::REMConfigurationReader
open	framework/io/REMConfigurationReader.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::REMConfigurationReader
open	framework/io/TempFileReader.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::TempFileReader
open	framework/io/TempFileReader.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::TempFileReader
open	framework/io/TempFileReader.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::TempFileReader
open	framework/io/XFigWriter.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::XFigWriter
open	framework/io/XFigWriter.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::XFigWriter
open	framework/io/XFigWriter.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::XFigWriter
open	framework/io/XYZBinReader.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::XYZBinReader
open	framework/io/XYZBinReader.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::XYZBinReader
open	framework/io/XYZBinReader.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::XYZBinReader
open	framework/io/XYZBinWriter.cpp	/^  bool XYZBinWriter::open(bool isLittleEndian, unsigned int size){$/;"	f	class:ProtoMol::XYZBinWriter
open	framework/io/XYZBinWriter.cpp	/^  bool XYZBinWriter::open(const char* filename, bool isLittleEndian, unsigned int size){$/;"	f	class:ProtoMol::XYZBinWriter
open	framework/io/XYZBinWriter.cpp	/^  bool XYZBinWriter::open(const std::string& filename, bool isLittleEndian, unsigned int size){$/;"	f	class:ProtoMol::XYZBinWriter
open	framework/io/XYZBinWriter.h	/^    virtual bool open(){return File::open();};$/;"	f	class:ProtoMol::XYZBinWriter
open	framework/io/XYZBinWriter.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::XYZBinWriter
open	framework/io/XYZBinWriter.h	/^    virtual bool open(const std::string& filename){return File::open(filename);};$/;"	f	class:ProtoMol::XYZBinWriter
open	framework/io/XYZReader.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::XYZReader
open	framework/io/XYZReader.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::XYZReader
open	framework/io/XYZReader.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::XYZReader
open	framework/io/XYZTrajectoryReader.h	/^    virtual bool open(){myFirst=true;return File::open();}$/;"	f	class:ProtoMol::XYZTrajectoryReader
open	framework/io/XYZTrajectoryReader.h	/^    virtual bool open(const char* filename){myFirst=true;return File::open(filename);}$/;"	f	class:ProtoMol::XYZTrajectoryReader
open	framework/io/XYZTrajectoryReader.h	/^    virtual bool open(const std::string& filename){myFirst=true;return File::open(filename);}$/;"	f	class:ProtoMol::XYZTrajectoryReader
open	framework/io/XYZTrajectoryWriter.cpp	/^  bool XYZTrajectoryWriter::open(const XYZ& xyz){$/;"	f	class:ProtoMol::XYZTrajectoryWriter
open	framework/io/XYZTrajectoryWriter.cpp	/^  bool XYZTrajectoryWriter::open(const std::string& filename, const XYZ& xyz){$/;"	f	class:ProtoMol::XYZTrajectoryWriter
open	framework/io/XYZTrajectoryWriter.cpp	/^  bool XYZTrajectoryWriter::open(const std::string& filename, const std::vector<std::string>& names){$/;"	f	class:ProtoMol::XYZTrajectoryWriter
open	framework/io/XYZTrajectoryWriter.cpp	/^  bool XYZTrajectoryWriter::open(const std::string& filename,const std::vector<Atom>& atoms, const std::vector<AtomType>& atomTypes){$/;"	f	class:ProtoMol::XYZTrajectoryWriter
open	framework/io/XYZTrajectoryWriter.cpp	/^  bool XYZTrajectoryWriter::open(const std::vector<Atom>& atoms, const std::vector<AtomType>& atomTypes){$/;"	f	class:ProtoMol::XYZTrajectoryWriter
open	framework/io/XYZTrajectoryWriter.cpp	/^  bool XYZTrajectoryWriter::open(const std::vector<std::string>& names){$/;"	f	class:ProtoMol::XYZTrajectoryWriter
open	framework/io/XYZTrajectoryWriter.h	/^    virtual bool open(){myFirst = false;return File::open();}$/;"	f	class:ProtoMol::XYZTrajectoryWriter
open	framework/io/XYZTrajectoryWriter.h	/^    virtual bool open(const char* filename){myFirst = false;return File::open(filename);}$/;"	f	class:ProtoMol::XYZTrajectoryWriter
open	framework/io/XYZTrajectoryWriter.h	/^    virtual bool open(const std::string& filename){myFirst = false;return File::open(filename);}$/;"	f	class:ProtoMol::XYZTrajectoryWriter
open	framework/io/XYZWriter.h	/^    virtual bool open(){return File::open();}$/;"	f	class:ProtoMol::XYZWriter
open	framework/io/XYZWriter.h	/^    virtual bool open(const char* filename){return File::open(filename);}$/;"	f	class:ProtoMol::XYZWriter
open	framework/io/XYZWriter.h	/^    virtual bool open(const std::string& filename){return File::open(filename);}$/;"	f	class:ProtoMol::XYZWriter
operator !	framework/frontend/InputPosVel.cpp	/^  bool InputPosVel::operator!() const { $/;"	f	class:ProtoMol::InputPosVel
operator !	framework/io/File.cpp	/^  bool File::operator!() const { $/;"	f	class:ProtoMol::File
operator !=	framework/base/AbstractEnumType.h	/^    bool operator!=(Enum a)  {return (a != myType);}$/;"	f	class:ProtoMol::AbstractEnumType
operator !=	framework/base/AbstractEnumType.h	/^    bool operator!=(const AbstractEnumType& a)  {return (a.myType != myType);}$/;"	f	class:ProtoMol::AbstractEnumType
operator !=	framework/base/Array_Fastest.h	/^  inline bool operator != (const Array<T,N> & A, const Array<T,N> & B) $/;"	f	namespace:ProtoMol
operator !=	framework/base/Array_NoPartialSpecialization.h	/^  bool operator != (const Array<T,N> & A, const Array<T,N> & B) $/;"	f	namespace:ProtoMol
operator !=	framework/base/Matrix3by3.cpp	/^  bool Matrix3by3::operator!=(const Matrix3by3& tm) const$/;"	f	class:ProtoMol::Matrix3by3
operator !=	framework/base/Value.h	/^    friend bool operator!=(const T& v1, const Value& v2) {return !(Value(v1) == v2);}$/;"	f	class:ProtoMol::Value
operator !=	framework/base/Value.h	/^    friend bool operator!=(const Value& v1, const T& v2) {return !(v1 == Value(v2));}$/;"	f	class:ProtoMol::Value
operator !=	framework/base/Value.h	/^    friend bool operator!=(const Value& v1, const Value& v2){return !(v1 == v2);}$/;"	f	class:ProtoMol::Value
operator !=	framework/base/Vector3D.h	/^    bool operator!=(const Vector3D& b) const {$/;"	f	struct:ProtoMol::Vector3D
operator ()	framework/base/Array_Fastest.h	/^    ArraySize<2> operator () (size_t dim) $/;"	f	class:ProtoMol::ArraySizes
operator ()	framework/base/Array_Fastest.h	/^    ArraySize<N+1> operator () (size_t dim) $/;"	f	class:ProtoMol::ArraySize
operator ()	framework/base/Array_NoPartialSpecialization.h	/^    ArraySize<2> operator () (unsigned int dim) $/;"	f	class:ProtoMol::ArraySizes
operator ()	framework/base/Array_NoPartialSpecialization.h	/^    ArraySize<N+1> operator () (unsigned int dim) $/;"	f	class:ProtoMol::ArraySize
operator ()	framework/base/Matrix3by3.cpp	/^  Real Matrix3by3::operator()(int i, int j) const$/;"	f	class:ProtoMol::Matrix3by3
operator ()	framework/base/Matrix3by3.cpp	/^  void Matrix3by3::operator()(Real x00, Real x01, Real x02,$/;"	f	class:ProtoMol::Matrix3by3
operator ()	framework/base/Matrix3by3.cpp	/^  void Matrix3by3::operator()(int i, int j, Real x)$/;"	f	class:ProtoMol::Matrix3by3
operator ()	framework/base/ReducedHessAngle.cpp	/^  Matrix3by3 ReducedHessAngle::operator()(int i, int j) const$/;"	f	class:ProtoMol::ReducedHessAngle
operator ()	framework/base/ReducedHessAngle.cpp	/^  void ReducedHessAngle::operator()(int i, int j, Matrix3by3 x) $/;"	f	class:ProtoMol::ReducedHessAngle
operator ()	framework/base/Report.cpp	/^    MyStreamer& debug::operator()(MyStreamer& stream) const{$/;"	f	class:ProtoMol::Report::debug
operator ()	framework/base/Report.cpp	/^    MyStreamer& reportlevel::operator()(MyStreamer& stream) const{$/;"	f	class:ProtoMol::Report::reportlevel
operator ()	framework/base/Vector.h	/^    VectorPacker<T,2> operator () (T elm){ $/;"	f	class:ProtoMol::Vector
operator ()	framework/base/Vector.h	/^    VectorPacker<T,N+1> operator () (T elm) { $/;"	f	class:ProtoMol::VectorPacker
operator ()	framework/base/stringutilities.cpp	/^  bool ltstrNocase::operator()(const string& s1, const string& s2) const{$/;"	f	class:ProtoMol::ltstrNocase
operator ()	framework/forces/CoulombEwaldRealForce.h	/^    void operator()(Real &energy, $/;"	f	class:ProtoMol::CoulombEwaldRealForce
operator ()	framework/forces/CoulombEwaldRealTableForce.h	/^    void operator()(Real &energy, $/;"	f	class:ProtoMol::CoulombEwaldRealTableForce
operator ()	framework/forces/CoulombForce.h	/^    void operator()(Real &energy, $/;"	f	class:ProtoMol::CoulombForce
operator ()	framework/forces/CoulombMultiGridDirectForce.h	/^    void operator()(Real &energy, $/;"	f	class:ProtoMol::CoulombMultiGridDirectForce
operator ()	framework/forces/CoulombMultiGridDirectTableForce.h	/^    void operator()(Real &energy, $/;"	f	class:ProtoMol::CoulombMultiGridDirectTableForce
operator ()	framework/forces/CoulombTableForce.h	/^    void operator()(Real &energy, $/;"	f	class:ProtoMol::CoulombTableForce
operator ()	framework/forces/GravitationForce.h	/^    void operator()(Real &energy, $/;"	f	class:ProtoMol::GravitationForce
operator ()	framework/forces/LennardJonesForce.h	/^    void operator()(Real &energy, $/;"	f	class:ProtoMol::LennardJonesForce
operator ()	framework/forces/LennardJonesTableForce.h	/^    void operator()(Real &energy, $/;"	f	class:ProtoMol::LennardJonesTableForce
operator ()	framework/forces/MagneticDipoleForce.cpp	/^  void MagneticDipoleForce::operator()(Real &energy, $/;"	f	class:ProtoMol::MagneticDipoleForce
operator ()	framework/forces/ReducedHessCoulomb.cpp	/^  Matrix3by3 ReducedHessCoulomb::operator()(const Real rawEnergy,$/;"	f	class:ProtoMol::ReducedHessCoulomb
operator ()	framework/forces/ReducedHessLennardJones.cpp	/^    Matrix3by3 ReducedHessLennardJones::operator()(const Real rawEnergy,$/;"	f	class:ProtoMol::ReducedHessLennardJones
operator ()	framework/topology/BankLennardJonesParameterTable.h	/^    const LennardJonesParameters& operator()(int i, int j, int type1, int type2) const{$/;"	f	struct:ProtoMol::BankLennardJonesParameterTable
operator ()	framework/topology/C1SwitchingFunction.h	/^    void operator()(Real &value, Real &derivOverD, Real distSquared) const{$/;"	f	class:ProtoMol::C1SwitchingFunction
operator ()	framework/topology/C2SwitchingFunction.h	/^    void operator()(Real &value, Real &deriv, Real distSquared) const{$/;"	f	class:ProtoMol::C2SwitchingFunction
operator ()	framework/topology/CmpCnCnSwitchingFunction.h	/^    void operator()(Real &value, Real &deriv, Real distSquared) const{$/;"	f	class:ProtoMol::CmpCnCnSwitchingFunction
operator ()	framework/topology/CnSwitchingFunction.cpp	/^    void CnSwitchingFunction::operator()( Real &value, Real &deriv,$/;"	f	class:ProtoMol::CnSwitchingFunction
operator ()	framework/topology/ComplementSwitchingFunction.h	/^    void operator()(Real &value, Real &derivOverD, Real distSquared) const{$/;"	f	class:ProtoMol::ComplementSwitchingFunction
operator ()	framework/topology/CutoffSwitchingFunction.h	/^    void operator()(Real &value, Real &derivOverD, Real distSquared) const{$/;"	f	class:ProtoMol::CutoffSwitchingFunction
operator ()	framework/topology/LennardJonesParameterTable.h	/^    const LennardJonesParameters& operator()(int type1, int type2) const{$/;"	f	class:ProtoMol::LennardJonesParameterTable
operator ()	framework/topology/RangeSwitchingFunction.h	/^  inline void RangeSwitchingFunction<TOriginalSwitchingFunction>::operator()(Real &value, Real &derivOverD, Real distSquared) const {$/;"	f	class:ProtoMol::RangeSwitchingFunction
operator ()	framework/topology/ShiftSwitchingFunction.h	/^    void operator()(Real &value, Real &derivOverD, Real distSquared) const{$/;"	f	class:ProtoMol::ShiftSwitchingFunction
operator ()	framework/topology/UniversalSwitchingFunction.h	/^    void operator()(Real &value, Real &deriv, Real \/*distSquared*\/) const{ value=1.0; deriv=0.0;}$/;"	f	class:ProtoMol::UniversalSwitchingFunction
operator ()	tools/bccAnalyzer.cpp	/^  bool operator()(const PairVector3D& a, const PairVector3D& b) const {$/;"	f	class:PairVector3D
operator ()	tools/bccAnalyzer.cpp	/^  bool operator()(const Vector3D& v1, const Vector3D& v2) const{$/;"	f	class:radialCmpVector3D
operator ()	tools/bccAnalyzer.cpp	/^  bool operator()(const Vector3DIdx& v1, const Vector3DIdx& v2) const{$/;"	f	class:radialCmpVector3D
operator *	framework/base/Matrix3by3.cpp	/^  Matrix3by3 Matrix3by3::operator*(const Matrix3by3& tm) const $/;"	f	class:ProtoMol::Matrix3by3
operator *	framework/base/Matrix3by3.cpp	/^  Matrix3by3 Matrix3by3::operator*(const Real tm) const $/;"	f	class:ProtoMol::Matrix3by3
operator *	framework/base/Matrix3by3.cpp	/^  Vector3D Matrix3by3::operator*(const Vector3D& tm) const $/;"	f	class:ProtoMol::Matrix3by3
operator *	framework/base/Matrix3by3.cpp	/^  Vector3D operator*(const Vector3D& point, const Matrix3by3& tm)$/;"	f	namespace:ProtoMol
operator *	framework/base/ReducedHessAngle.cpp	/^  ReducedHessAngle ReducedHessAngle::operator*(const Real tm) $/;"	f	class:ProtoMol::ReducedHessAngle
operator *	framework/base/ReducedHessAngle.cpp	/^  ReducedHessAngle ReducedHessAngle::operator*(const ReducedHessAngle& tm) $/;"	f	class:ProtoMol::ReducedHessAngle
operator *	framework/base/Vector3D.h	/^    Real operator*(const Vector3D& b) const{$/;"	f	struct:ProtoMol::Vector3D
operator *	framework/base/Vector3D.h	/^    Vector3D operator*(Real w) const  {$/;"	f	struct:ProtoMol::Vector3D
operator *=	framework/base/Matrix3by3.cpp	/^  Matrix3by3& Matrix3by3::operator*=(const Matrix3by3& tm)$/;"	f	class:ProtoMol::Matrix3by3
operator *=	framework/base/Matrix3by3.cpp	/^  Matrix3by3& Matrix3by3::operator*=(const Real tm)$/;"	f	class:ProtoMol::Matrix3by3
operator *=	framework/base/ReducedHessAngle.cpp	/^  ReducedHessAngle& ReducedHessAngle::operator*=(const Real tm) $/;"	f	class:ProtoMol::ReducedHessAngle
operator *=	framework/base/Vector3D.h	/^    Vector3D &operator*=(Real w) {$/;"	f	struct:ProtoMol::Vector3D
operator +	framework/base/Matrix3by3.cpp	/^  Matrix3by3 Matrix3by3::operator+(const Matrix3by3& tm) const $/;"	f	class:ProtoMol::Matrix3by3
operator +	framework/base/ReducedHessAngle.cpp	/^  ReducedHessAngle ReducedHessAngle::operator+(const ReducedHessAngle& tm) $/;"	f	class:ProtoMol::ReducedHessAngle
operator +	framework/base/Timer.cpp	/^  TimeRep TimeRep::operator+(const TimeRep& time) const$/;"	f	class:ProtoMol::TimeRep
operator +	framework/base/Vector3D.h	/^    Vector3D operator+(const Vector3D& b) const  {$/;"	f	struct:ProtoMol::Vector3D
operator +	framework/topology/CubicCellLocation.h	/^    CubicCellLocation  operator+(const CubicCellLocation& b) const {return CubicCellLocation(x+b.x,y+b.y,z+b.z);}$/;"	f	class:ProtoMol::CubicCellLocation
operator +=	framework/base/Matrix3by3.cpp	/^  Matrix3by3& Matrix3by3::operator+=(const Matrix3by3& tm)$/;"	f	class:ProtoMol::Matrix3by3
operator +=	framework/base/ReducedHessAngle.cpp	/^  ReducedHessAngle& ReducedHessAngle::operator+=(const ReducedHessAngle& tm) $/;"	f	class:ProtoMol::ReducedHessAngle
operator +=	framework/base/Timer.cpp	/^  TimeRep& TimeRep::operator+=(const TimeRep& time)$/;"	f	class:ProtoMol::TimeRep
operator +=	framework/base/Timer.cpp	/^  Timer& Timer::operator+=(const TimeRep& time)$/;"	f	class:ProtoMol::Timer
operator +=	framework/base/Vector3D.h	/^    Vector3D &operator+=(const Vector3D& b) {$/;"	f	struct:ProtoMol::Vector3D
operator -	framework/base/Matrix3by3.cpp	/^  Matrix3by3 Matrix3by3::operator-(const Matrix3by3& tm) const $/;"	f	class:ProtoMol::Matrix3by3
operator -	framework/base/Matrix3by3.cpp	/^  Matrix3by3 Matrix3by3::operator-(void) const  $/;"	f	class:ProtoMol::Matrix3by3
operator -	framework/base/ReducedHessAngle.cpp	/^  ReducedHessAngle ReducedHessAngle::operator-(const ReducedHessAngle& tm) $/;"	f	class:ProtoMol::ReducedHessAngle
operator -	framework/base/Timer.cpp	/^  TimeRep TimeRep::operator-(const TimeRep& time) const$/;"	f	class:ProtoMol::TimeRep
operator -	framework/base/Vector3D.h	/^    Vector3D operator-() const  {$/;"	f	struct:ProtoMol::Vector3D
operator -	framework/base/Vector3D.h	/^    Vector3D operator-(const Vector3D& b) const  {$/;"	f	struct:ProtoMol::Vector3D
operator -	framework/topology/CubicCellLocation.h	/^    CubicCellLocation  operator-(const CubicCellLocation& b) const {return CubicCellLocation(x-b.x,y-b.y,z-b.z);}$/;"	f	class:ProtoMol::CubicCellLocation
operator -=	framework/base/Matrix3by3.cpp	/^  Matrix3by3& Matrix3by3::operator-=(const Matrix3by3& tm)$/;"	f	class:ProtoMol::Matrix3by3
operator -=	framework/base/ReducedHessAngle.cpp	/^  ReducedHessAngle& ReducedHessAngle::operator-=(const ReducedHessAngle& tm) $/;"	f	class:ProtoMol::ReducedHessAngle
operator -=	framework/base/Timer.cpp	/^  TimeRep& TimeRep::operator-=(const TimeRep& time)$/;"	f	class:ProtoMol::TimeRep
operator -=	framework/base/Timer.cpp	/^  Timer& Timer::operator-=(const TimeRep& time)$/;"	f	class:ProtoMol::Timer
operator -=	framework/base/Vector3D.h	/^    Vector3D &operator-=(const Vector3D& b) {$/;"	f	struct:ProtoMol::Vector3D
operator /	framework/base/Matrix3by3.cpp	/^  Matrix3by3 Matrix3by3::operator\/(const Real tm) const$/;"	f	class:ProtoMol::Matrix3by3
operator /	framework/base/ReducedHessAngle.cpp	/^  ReducedHessAngle ReducedHessAngle::operator\/(const Real tm) $/;"	f	class:ProtoMol::ReducedHessAngle
operator /	framework/base/Vector3D.h	/^    Vector3D operator\/(Real w) const  {$/;"	f	struct:ProtoMol::Vector3D
operator /=	framework/base/Matrix3by3.cpp	/^  Matrix3by3& Matrix3by3::operator\/=(const Real tm)$/;"	f	class:ProtoMol::Matrix3by3
operator /=	framework/base/ReducedHessAngle.cpp	/^  ReducedHessAngle& ReducedHessAngle::operator\/=(const Real tm) $/;"	f	class:ProtoMol::ReducedHessAngle
operator /=	framework/base/Vector3D.h	/^    Vector3D &operator\/=(Real w) {$/;"	f	struct:ProtoMol::Vector3D
operator <	framework/base/Value.cpp	/^  bool operator<(const Value& v1, const Value& v2){$/;"	f	namespace:ProtoMol
operator <	framework/base/Value.h	/^    friend bool operator<(const T& v1, const Value& v2) {return (Value(v1) < v2);}$/;"	f	class:ProtoMol::Value
operator <	framework/base/Value.h	/^    friend bool operator<(const Value& v1, const T& v2) {return (v1 < Value(v2));}$/;"	f	class:ProtoMol::Value
operator <	framework/base/Vector3DBlock.h	/^  inline bool operator<(const Vector3DBlock& a, const Vector3DBlock& b){return a.vec == b.vec;}                  $/;"	f	namespace:ProtoMol
operator <	framework/base/simpleTypes.h	/^    bool operator<(const PairIntSorted& p) const{$/;"	f	struct:ProtoMol::PairIntSorted
operator <	framework/integrators/BSplineMOLLYIntegrator.h	/^      bool operator<(const BondIndex& a) const {$/;"	f	struct:ProtoMol::BSplineMOLLYIntegrator::BondIndex
operator <	framework/integrators/Modifier.h	/^  inline bool Modifier::operator<(const Modifier & m) const {$/;"	f	class:ProtoMol::Modifier
operator <	framework/topology/CubicCellLocation.h	/^  inline bool CubicCellLocation::operator<(const CubicCellLocation &c) const {$/;"	f	class:ProtoMol::CubicCellLocation
operator <	framework/topology/ExclusionTable.cpp	/^  bool ExclusionPair::operator<(const ExclusionPair & e) const{$/;"	f	class:ProtoMol::ExclusionPair
operator <<	framework/base/AbstractEnumType.h	/^    friend Report::MyStreamer& operator<< (Report::MyStreamer& OS, const AbstractEnumType& b){return (OS<<b.getString());}$/;"	f	class:ProtoMol::AbstractEnumType
operator <<	framework/base/Matrix3by3.cpp	/^  std::ostream& operator<<(std::ostream &os, const Matrix3by3& tm)$/;"	f	namespace:ProtoMol
operator <<	framework/base/PDB.cpp	/^  MyStreamer& operator<< (MyStreamer& OS, const PDB::Atom & p) {$/;"	f	namespace:ProtoMol
operator <<	framework/base/ReducedHessAngle.cpp	/^  ostream& operator<<(ostream &os, const ReducedHessAngle & tm)$/;"	f	namespace:ProtoMol
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (bool a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (char a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (char* a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (const char* a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (const ostream& a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (const string& a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (double a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (float a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (int a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (long a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (long long a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (ostream* a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (short a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (signed char a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (signed char* a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (unsigned char a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (unsigned char* a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (unsigned int a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (unsigned long a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (unsigned long long a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& MyStreamer::operator<< (unsigned short a) {$/;"	f	class:ProtoMol::Report::MyStreamer
operator <<	framework/base/Report.cpp	/^    MyStreamer& operator<<(MyStreamer &stream, const debug& d){$/;"	f	namespace:ProtoMol::Report
operator <<	framework/base/Report.cpp	/^    MyStreamer& operator<<(MyStreamer &stream, const reportlevel& rl){$/;"	f	namespace:ProtoMol::Report
operator <<	framework/base/Timer.cpp	/^  Report::MyStreamer& operator<<(Report::MyStreamer& os, const TimeRep& time)$/;"	f	namespace:ProtoMol
operator <<	framework/base/Timer.cpp	/^  Report::MyStreamer& operator<<(Report::MyStreamer& os, const Timer& timer)$/;"	f	namespace:ProtoMol
operator <<	framework/base/TimerStatistic.cpp	/^  Report::MyStreamer& operator<<(Report::MyStreamer& os, $/;"	f	namespace:ProtoMol
operator <<	framework/base/Value.cpp	/^  MyStreamer& operator<< (MyStreamer& OS, const Value & v) {$/;"	f	namespace:ProtoMol
operator <<	framework/base/Vector3D.h	/^    friend Report::MyStreamer& operator<< (Report::MyStreamer& OS, const Vector3D & coords ) {$/;"	f	struct:ProtoMol::Vector3D
operator <<	framework/base/Vector3D.h	/^    friend std::ostream& operator<<(std::ostream& OS, const Vector3D & coords){$/;"	f	struct:ProtoMol::Vector3D
operator <<	framework/frontend/InputValue.h	/^    friend Report::MyStreamer& operator<< (Report::MyStreamer& OS, const InputValue & v){$/;"	f	class:ProtoMol::InputValue
operator <<	framework/io/DCDTrajectoryWriter.cpp	/^  DCDTrajectoryWriter& operator<<(DCDTrajectoryWriter& dcdWriter, const Vector3DBlock& coords){$/;"	f	namespace:ProtoMol
operator <<	framework/io/DCDTrajectoryWriter.cpp	/^  DCDTrajectoryWriter& operator<<(DCDTrajectoryWriter& dcdWriter, const XYZ& xyz){$/;"	f	namespace:ProtoMol
operator <<	framework/io/PARWriter.cpp	/^  PARWriter& operator<<(PARWriter& parWriter, const PAR& par){$/;"	f	namespace:ProtoMol
operator <<	framework/io/PDBWriter.cpp	/^  PDBWriter& operator<<(PDBWriter& pdbWriter, const PDB& pdb){$/;"	f	namespace:ProtoMol
operator <<	framework/io/PGMWriter.cpp	/^  PGMWriter& operator<<(PGMWriter& pgmWriter, const PGM& pgm){$/;"	f	namespace:ProtoMol
operator <<	framework/io/PGMWriter.cpp	/^  PGMWriter& operator<<(PGMWriter& pgmWriter, const PPM& ppm){$/;"	f	namespace:ProtoMol
operator <<	framework/io/PNGWriter.cpp	/^  PNGWriter& operator<<(PNGWriter& PNGWriter, const PPM& ppm){$/;"	f	namespace:ProtoMol
operator <<	framework/io/PNGWriter.cpp	/^  PNGWriter& operator<<(PNGWriter& pngWriter, const PGM& pgm){$/;"	f	namespace:ProtoMol
operator <<	framework/io/PPMWriter.cpp	/^  PPMWriter& operator<<(PPMWriter& ppmWriter, const PGM& pgm){$/;"	f	namespace:ProtoMol
operator <<	framework/io/PPMWriter.cpp	/^  PPMWriter& operator<<(PPMWriter& ppmWriter, const PPM& ppm){$/;"	f	namespace:ProtoMol
operator <<	framework/io/PSFWriter.cpp	/^  PSFWriter& operator<<(PSFWriter& psfWriter, const PSF& psf){$/;"	f	namespace:ProtoMol
operator <<	framework/io/XFigWriter.cpp	/^  XFigWriter& operator<<(XFigWriter& xyzWriter, const XYZ& xyz){$/;"	f	namespace:ProtoMol
operator <<	framework/io/XYZBinWriter.cpp	/^  XYZBinWriter& operator<<(XYZBinWriter& xyzWriter, const Vector3DBlock& coords){$/;"	f	namespace:ProtoMol
operator <<	framework/io/XYZBinWriter.cpp	/^  XYZBinWriter& operator<<(XYZBinWriter& xyzWriter, const XYZ& xyz){$/;"	f	namespace:ProtoMol
operator <<	framework/io/XYZTrajectoryWriter.cpp	/^  XYZTrajectoryWriter& operator<<(XYZTrajectoryWriter& xyzWriter, const Vector3DBlock& coords){$/;"	f	namespace:ProtoMol
operator <<	framework/io/XYZTrajectoryWriter.cpp	/^  XYZTrajectoryWriter& operator<<(XYZTrajectoryWriter& xyzWriter, const XYZ& xyz){$/;"	f	namespace:ProtoMol
operator <<	framework/io/XYZWriter.cpp	/^  XYZWriter& operator<<(XYZWriter& xyzWriter, const XYZ& xyz){$/;"	f	namespace:ProtoMol
operator <=	framework/base/Value.cpp	/^  bool operator<=(const Value& v1, const Value& v2){$/;"	f	namespace:ProtoMol
operator <=	framework/base/Value.h	/^    friend bool operator<=(const T& v1, const Value& v2){return (Value(v1) <= v2);}$/;"	f	class:ProtoMol::Value
operator <=	framework/base/Value.h	/^    friend bool operator<=(const Value& v1, const T& v2){return (v1  <= Value(v2));}$/;"	f	class:ProtoMol::Value
operator =	framework/base/AbstractEnumType.h	/^    AbstractEnumType& operator=(Enum a){myType = a;return *this;}$/;"	f	class:ProtoMol::AbstractEnumType
operator =	framework/base/Array_Fastest.h	/^    Array<T,N> & operator = (const Array<T,N> & A)$/;"	f	class:ProtoMol::Array
operator =	framework/base/Array_NoPartialSpecialization.h	/^    Array<T,N> & operator = (const Array<T,N> & A)$/;"	f	class:ProtoMol::Array
operator =	framework/base/LookUpTableBase.h	/^    LookUpTableBase& operator=(LookUpTableBase const& rhs){$/;"	f	class:ProtoMol::LookUpTableBase
operator =	framework/base/PGM.cpp	/^  PGM& PGM::operator=(const PPM& ppm){$/;"	f	class:ProtoMol::PGM
operator =	framework/base/PPM.cpp	/^  PPM& PPM::operator=(const PGM& pgm){$/;"	f	class:ProtoMol::PPM
operator =	framework/base/Value.cpp	/^  Value & Value::operator=(const Value & rhs) {$/;"	f	class:ProtoMol::Value
operator =	framework/base/Value.h	/^    Value& operator=(const T& value){$/;"	f	class:ProtoMol::Value
operator =	framework/base/Vector3D.h	/^     Vector3D& operator=(const Vector3D &c) {$/;"	f	struct:ProtoMol::Vector3D
operator =	framework/frontend/Factory.h	/^    Factory& operator=(const Factory&){return *this;}$/;"	f	class:ProtoMol::Factory
operator =	framework/frontend/Factory.h	/^    FactoryBase& operator=(const FactoryBase&){return *this;}$/;"	f	class:ProtoMol::FactoryBase
operator =	framework/frontend/ForceFactoryDetails.cpp	/^  ForceFactoryDetails& ForceFactoryDetails::operator=(const ForceFactoryDetails&){return *this;}$/;"	f	class:ProtoMol::ForceFactoryDetails
operator =	framework/frontend/HelpTextFactory.cpp	/^  HelpTextFactory& HelpTextFactory::operator=(const HelpTextFactory&){return *this;}$/;"	f	class:ProtoMol::HelpTextFactory
operator =	framework/frontend/InputValue.h	/^    InputValue & operator=(const InputValue & rhs) {$/;"	f	class:ProtoMol::InputValue
operator =	framework/frontend/InputValue.h	/^    InputValue& operator=(const T& value){$/;"	f	class:ProtoMol::InputValue
operator =	framework/frontend/InputValue.h	/^    InputValue& operator=(const char* value){return operator=(std::string(value));}$/;"	f	class:ProtoMol::InputValue
operator =	framework/frontend/IntegratorFactoryDetails.cpp	/^  IntegratorFactoryDetails& IntegratorFactoryDetails::operator=(const IntegratorFactoryDetails&){return *this;}$/;"	f	class:ProtoMol::IntegratorFactoryDetails
operator =	framework/frontend/OutputFactoryDetails.cpp	/^  OutputFactoryDetails& OutputFactoryDetails::operator=(const OutputFactoryDetails&){return *this;}$/;"	f	class:ProtoMol::OutputFactoryDetails
operator =	framework/frontend/TopologyFactoryDetails.cpp	/^  TopologyFactoryDetails& TopologyFactoryDetails::operator=(const TopologyFactoryDetails&){return *this;}$/;"	f	class:ProtoMol::TopologyFactoryDetails
operator =	framework/parallel/Parallel.h	/^    Parallel& operator=(const Parallel&){return *this;}$/;"	f	class:ProtoMol::Parallel
operator ==	framework/base/AbstractEnumType.h	/^    bool operator==(Enum a)  {return (a == myType);}$/;"	f	class:ProtoMol::AbstractEnumType
operator ==	framework/base/AbstractEnumType.h	/^    bool operator==(const AbstractEnumType& a)  {return (a.myType == myType);}$/;"	f	class:ProtoMol::AbstractEnumType
operator ==	framework/base/Array_Fastest.h	/^  inline bool operator == (const Array<T,N> & A, const Array<T,N> & B)$/;"	f	namespace:ProtoMol
operator ==	framework/base/Array_NoPartialSpecialization.h	/^  bool operator == (const Array<T,N> & A, const Array<T,N> & B)$/;"	f	namespace:ProtoMol
operator ==	framework/base/Matrix3by3.cpp	/^  bool Matrix3by3::operator==(const Matrix3by3& tm) const$/;"	f	class:ProtoMol::Matrix3by3
operator ==	framework/base/Value.cpp	/^  bool operator==(const Value& v1, const Value& v2){$/;"	f	namespace:ProtoMol
operator ==	framework/base/Value.h	/^    friend bool operator==(const T& v1, const Value& v2){return (Value(v1) == v2);}$/;"	f	class:ProtoMol::Value
operator ==	framework/base/Value.h	/^    friend bool operator==(const Value& v1, const T& v2){return (v1 == Value(v2));}$/;"	f	class:ProtoMol::Value
operator ==	framework/base/Vector3D.h	/^    bool operator==(const Vector3D& b) const {$/;"	f	struct:ProtoMol::Vector3D
operator ==	framework/base/Vector3DBlock.h	/^  inline bool operator==(const Vector3DBlock& a, const Vector3DBlock& b){return a.vec == b.vec;}                $/;"	f	namespace:ProtoMol
operator ==	framework/base/simpleTypes.h	/^    bool operator==(const PairIntSorted& p) const {return (first == p.first && second == p.second);}$/;"	f	struct:ProtoMol::PairIntSorted
operator ==	framework/topology/CubicCellLocation.h	/^    bool operator==(const CubicCellLocation& c) const {return (x == c.x && y == c.y && z == c.z);}$/;"	f	class:ProtoMol::CubicCellLocation
operator >	framework/base/Value.cpp	/^  bool operator>(const Value& v1, const Value& v2){$/;"	f	namespace:ProtoMol
operator >	framework/base/Value.h	/^    friend bool operator>(const T& v1, const Value& v2) {return (Value(v1) > v2);}$/;"	f	class:ProtoMol::Value
operator >	framework/base/Value.h	/^    friend bool operator>(const Value& v1, const T& v2) {return (v1  > Value(v2));}$/;"	f	class:ProtoMol::Value
operator >=	framework/base/Value.cpp	/^  bool operator>=(const Value& v1, const Value& v2){$/;"	f	namespace:ProtoMol
operator >=	framework/base/Value.h	/^    friend bool operator>=(const T& v1, const Value& v2){return (Value(v1) >= v2);}$/;"	f	class:ProtoMol::Value
operator >=	framework/base/Value.h	/^    friend bool operator>=(const Value& v1, const T& v2){return (v1 >= Value(v2));}$/;"	f	class:ProtoMol::Value
operator >>	framework/base/Value.h	/^    friend std::istream& operator>>(std::istream& is, Value& v){ v.read(is); return is;}$/;"	f	class:ProtoMol::Value
operator >>	framework/base/Vector3D.h	/^    friend std::istream& operator>>(std::istream& OS, Vector3D & coords){$/;"	f	struct:ProtoMol::Vector3D
operator >>	framework/frontend/InputPosVel.cpp	/^  InputPosVel& operator>>(InputPosVel& posReader, PDB& pdb){$/;"	f	namespace:ProtoMol
operator >>	framework/frontend/InputPosVel.cpp	/^  InputPosVel& operator>>(InputPosVel& posReader, Vector3DBlock& coords){$/;"	f	namespace:ProtoMol
operator >>	framework/frontend/InputPosVel.cpp	/^  InputPosVel& operator>>(InputPosVel& posReader, XYZ& xyz){$/;"	f	namespace:ProtoMol
operator >>	framework/io/AMBERReader.cpp	/^  AMBERReader& operator>>(AMBERReader& topReader, PAR& par){$/;"	f	namespace:ProtoMol
operator >>	framework/io/AMBERReader.cpp	/^  AMBERReader& operator>>(AMBERReader& topReader, PSF& psf){$/;"	f	namespace:ProtoMol
operator >>	framework/io/CRDReader.cpp	/^  CRDReader& operator>>(CRDReader& crdReader, Vector3DBlock& coords){$/;"	f	namespace:ProtoMol
operator >>	framework/io/ConfigurationReader.cpp	/^  ConfigurationReader& operator>>(ConfigurationReader& configReader, Configuration& config){$/;"	f	namespace:ProtoMol
operator >>	framework/io/DCDTrajectoryReader.cpp	/^  DCDTrajectoryReader& operator>>(DCDTrajectoryReader& dcdTrajectoryReader, Vector3DBlock& coords){$/;"	f	namespace:ProtoMol
operator >>	framework/io/DCDTrajectoryReader.cpp	/^  DCDTrajectoryReader& operator>>(DCDTrajectoryReader& dcdTrajectoryReader, XYZ& xyz){$/;"	f	namespace:ProtoMol
operator >>	framework/io/PARReader.cpp	/^  PARReader& operator>>(PARReader& parReader, PAR& par){$/;"	f	namespace:ProtoMol
operator >>	framework/io/PDBReader.cpp	/^  PDBReader& operator>>(PDBReader& pdbReader, PDB& pdb){$/;"	f	namespace:ProtoMol
operator >>	framework/io/PDBReader.cpp	/^  PDBReader& operator>>(PDBReader& pdbReader, Vector3DBlock& coords){$/;"	f	namespace:ProtoMol
operator >>	framework/io/PDBReader.cpp	/^  PDBReader& operator>>(PDBReader& pdbReader, XYZ& xyz){$/;"	f	namespace:ProtoMol
operator >>	framework/io/PGMReader.cpp	/^  PGMReader& operator>>(PGMReader& pgmReader, PGM& pgm){$/;"	f	namespace:ProtoMol
operator >>	framework/io/PGMReader.cpp	/^  PGMReader& operator>>(PGMReader& pgmReader, PPM& ppm){$/;"	f	namespace:ProtoMol
operator >>	framework/io/PPMReader.cpp	/^  PPMReader& operator>>(PPMReader& ppmReader, PGM& pgm){$/;"	f	namespace:ProtoMol
operator >>	framework/io/PPMReader.cpp	/^  PPMReader& operator>>(PPMReader& ppmReader, PPM& ppm){$/;"	f	namespace:ProtoMol
operator >>	framework/io/PSFReader.cpp	/^  PSFReader& operator>>(PSFReader& psfReader, PSF& psf){$/;"	f	namespace:ProtoMol
operator >>	framework/io/REMConfigurationReader.cpp	/^  REMConfigurationReader& operator>>(REMConfigurationReader& configReader, Configuration& config){$/;"	f	namespace:ProtoMol
operator >>	framework/io/TempFileReader.cpp	/^  TempFileReader &operator>>(TempFileReader &reader, Real &temp) {$/;"	f	namespace:ProtoMol
operator >>	framework/io/XYZBinReader.cpp	/^  XYZBinReader& operator>>(XYZBinReader& xyzbinReader, Vector3DBlock& coords){$/;"	f	namespace:ProtoMol
operator >>	framework/io/XYZBinReader.cpp	/^  XYZBinReader& operator>>(XYZBinReader& xyzbinReader, XYZ& xyz){$/;"	f	namespace:ProtoMol
operator >>	framework/io/XYZReader.cpp	/^  XYZReader& operator>>(XYZReader& xyzReader, Vector3DBlock& coords){$/;"	f	namespace:ProtoMol
operator >>	framework/io/XYZReader.cpp	/^  XYZReader& operator>>(XYZReader& xyzReader, XYZ& xyz){$/;"	f	namespace:ProtoMol
operator >>	framework/io/XYZTrajectoryReader.cpp	/^  XYZTrajectoryReader& operator>>(XYZTrajectoryReader& xyzReader, Vector3DBlock& coords){$/;"	f	namespace:ProtoMol
operator >>	framework/io/XYZTrajectoryReader.cpp	/^  XYZTrajectoryReader& operator>>(XYZTrajectoryReader& xyzReader, XYZ& xyz){$/;"	f	namespace:ProtoMol
operator Enum	framework/base/AbstractEnumType.h	/^    operator Enum() const{return myType;}$/;"	f	class:ProtoMol::AbstractEnumType
operator Enum	framework/base/ConstraintValueType.h	/^      operator Enum() const{return e;}$/;"	f	struct:ProtoMol::ConstraintValueEnum::Enum2Type
operator Enum	framework/base/ValueType.h	/^      operator Enum() const{return e;}$/;"	f	struct:ProtoMol::ValueEnum::Enum2ValueType
operator Real	framework/base/Value.cpp	/^  Value::operator Real() const {$/;"	f	class:ProtoMol::Value
operator T	framework/frontend/InputValue.h	/^    operator T() const {$/;"	f	class:ProtoMol::InputValue
operator UIntArrayN	framework/base/Array_Fastest.h	/^    operator UIntArrayN () const { return m_Dimensions; }$/;"	f	class:ProtoMol::ArraySize
operator Value	framework/frontend/InputValue.h	/^    operator Value() const{return myValue;}$/;"	f	class:ProtoMol::InputValue
operator Vector3D	framework/base/Value.cpp	/^  Value::operator Vector3D() const {$/;"	f	class:ProtoMol::Value
operator []	framework/base/Array_Fastest.h	/^    RefArray<T,N-1> & operator [](size_type Index) $/;"	f	class:ProtoMol::Array
operator []	framework/base/Array_Fastest.h	/^    RefArray<T,N-1> & operator [](size_type Index)$/;"	f	class:ProtoMol::RefArray
operator []	framework/base/Array_Fastest.h	/^    const RefArray<T,N-1> & operator [](size_type Index) const $/;"	f	class:ProtoMol::Array
operator []	framework/base/Array_Fastest.h	/^    const RefArray<T,N-1> & operator [](size_type Index) const$/;"	f	class:ProtoMol::RefArray
operator []	framework/base/Array_Fastest.h	/^    const_reference operator [](size_type Index) const$/;"	f	class:ProtoMol::RefArray
operator []	framework/base/Array_Fastest.h	/^    reference operator [](size_type Index)$/;"	f	class:ProtoMol::RefArray
operator []	framework/base/Array_NoPartialSpecialization.h	/^      RefArray<N-1> operator [](size_type Index)$/;"	f	class:ProtoMol::Array::RefArray
operator []	framework/base/Array_NoPartialSpecialization.h	/^      const RefArray<N-1> operator [](size_type Index) const$/;"	f	class:ProtoMol::Array::RefArray
operator []	framework/base/Array_NoPartialSpecialization.h	/^      const_reference operator [](size_type Index) const$/;"	f	class:ProtoMol::Array::RefArray
operator []	framework/base/Array_NoPartialSpecialization.h	/^      reference operator [](size_type Index)$/;"	f	class:ProtoMol::Array::RefArray
operator []	framework/base/Array_NoPartialSpecialization.h	/^    RefArray<N-1> operator [](size_type Index) $/;"	f	class:ProtoMol::Array
operator []	framework/base/Array_NoPartialSpecialization.h	/^    const RefArray<N-1> operator [](size_type Index) const $/;"	f	class:ProtoMol::Array
operator []	framework/base/Configuration.cpp	/^  Value& Configuration::operator[](const string& keyword){$/;"	f	class:ProtoMol::Configuration
operator []	framework/base/Configuration.cpp	/^  const Value& Configuration::operator[](const string& keyword) const{$/;"	f	class:ProtoMol::Configuration
operator []	framework/base/Molecule.h	/^    int operator [](int i ){return atoms[i];}$/;"	f	struct:ProtoMol::Molecule
operator []	framework/base/ScalarStructure.h	/^    Real operator [](Index i) const{return myTable[static_cast<int>(i)];}$/;"	f	class:ProtoMol::ScalarStructure
operator []	framework/base/ScalarStructure.h	/^    Real& operator [](Index i){return myTable[static_cast<int>(i)];}$/;"	f	class:ProtoMol::ScalarStructure
operator []	framework/base/Vector3D.h	/^    Real operator[](int index) const{$/;"	f	struct:ProtoMol::Vector3D
operator []	framework/base/Vector3D.h	/^    Real& operator[](int index){$/;"	f	struct:ProtoMol::Vector3D
operator []	framework/base/Vector3DBlock.h	/^    const_reference operator[](size_type n) const                {return vec[n];} $/;"	f	class:ProtoMol::Vector3DBlock
operator []	framework/base/Vector3DBlock.h	/^    reference operator[](size_type n)                            {return vec[n];}          $/;"	f	class:ProtoMol::Vector3DBlock
operator []	framework/topology/ArrayCellListStructure.h	/^    T2& operator[](const T1& t1){$/;"	f	class:ProtoMol::ArrayCellListStructure
operator ^	framework/base/Vector3D.h	/^    Vector3D operator^(const Vector3D& b) const  {$/;"	f	struct:ProtoMol::Vector3D
operator bool	framework/base/Value.cpp	/^  Value::operator bool() const {$/;"	f	class:ProtoMol::Value
operator int	framework/base/Value.cpp	/^  Value::operator int() const {$/;"	f	class:ProtoMol::Value
operator std::string	framework/base/AbstractEnumType.h	/^    operator std::string() const{return getString(myType);}$/;"	f	class:ProtoMol::AbstractEnumType
operator std::string	framework/base/Value.cpp	/^  Value::operator std::string() const {$/;"	f	class:ProtoMol::Value
operator std::string	framework/base/ValueType.h	/^      operator std::string() const{return str;}$/;"	f	struct:ProtoMol::ValueEnum::Enum2ValueType
operator std::vector<T>	framework/base/Vector.h	/^    operator std::vector<T> () {return myVector;};$/;"	f	class:ProtoMol::VectorPacker
operator std::vector<T>	framework/base/Vector.h	/^    operator std::vector<T>(){return myVector;};$/;"	f	class:ProtoMol::Vector
operator unsigned int	framework/base/Value.cpp	/^  Value::operator unsigned int() const {$/;"	f	class:ProtoMol::Value
operator vector<Real>	framework/base/Value.cpp	/^  Value::operator vector<Real>() const {$/;"	f	class:ProtoMol::Value
operator void*	framework/frontend/InputPosVel.cpp	/^  InputPosVel::operator void*() const{$/;"	f	class:ProtoMol::InputPosVel
operator void*	framework/io/File.cpp	/^  File::operator void*() const{$/;"	f	class:ProtoMol::File
optimize	framework/topology/ExclusionTable.cpp	/^  void ExclusionTable::optimize(){$/;"	f	class:ProtoMol::ExclusionTable
optimizeC	framework/integrators/ShadowHMCIntegrator.cpp	/^    void ShadowHMCIntegrator::optimizeC( Real ratio ) {$/;"	f	class:ProtoMol::ShadowHMCIntegrator
ordIdx	framework/topology/CmpCnCnSwitchingFunction.h	/^	  int ordInt, ordIdx;$/;"	m	class:ProtoMol::CmpCnCnSwitchingFunction
ordIdx	framework/topology/CnSwitchingFunction.h	/^	  int ordInt, ordIdx;$/;"	m	class:ProtoMol::CnSwitchingFunction
ordInt	framework/topology/CmpCnCnSwitchingFunction.h	/^	  int ordInt, ordIdx;$/;"	m	class:ProtoMol::CmpCnCnSwitchingFunction
ordInt	framework/topology/CnSwitchingFunction.h	/^	  int ordInt, ordIdx;$/;"	m	class:ProtoMol::CnSwitchingFunction
order	framework/integrators/Modifier.h	/^    int order() const{return myOrder;}$/;"	f	class:ProtoMol::Modifier
orderParam	framework/frontend/OutputState.h	/^    struct orderParam{$/;"	s	class:ProtoMol::OutputState
origin	framework/topology/PeriodicBoundaryConditions.h	/^    const Vector3D& origin() const {return myOrigin;}$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
origin	framework/topology/VacuumBoundaryConditions.cpp	/^  Vector3D VacuumBoundaryConditions::origin() const {return Vector3D(0,0,0);}$/;"	f	class:ProtoMol::VacuumBoundaryConditions
orphanAtoms	framework/io/PDBReader.cpp	/^  std::vector<PDB::Atom>* PDBReader::orphanAtoms(){$/;"	f	class:ProtoMol::PDBReader
orphanConfiguration	framework/io/ConfigurationReader.cpp	/^  Configuration* ConfigurationReader::orphanConfiguration(){$/;"	f	class:ProtoMol::ConfigurationReader
orphanConfiguration	framework/io/REMConfigurationReader.cpp	/^  Configuration* REMConfigurationReader::orphanConfiguration(){$/;"	f	class:ProtoMol::REMConfigurationReader
orphanCoords	framework/io/DCDTrajectoryReader.cpp	/^  Vector3DBlock* DCDTrajectoryReader::orphanCoords(){$/;"	f	class:ProtoMol::DCDTrajectoryReader
orphanCoords	framework/io/PDBReader.cpp	/^  Vector3DBlock* PDBReader::orphanCoords(){$/;"	f	class:ProtoMol::PDBReader
orphanCoords	framework/io/XYZBinReader.cpp	/^  Vector3DBlock* XYZBinReader::orphanCoords(){$/;"	f	class:ProtoMol::XYZBinReader
orphanCoords	framework/io/XYZReader.cpp	/^  Vector3DBlock* XYZReader::orphanCoords(){$/;"	f	class:ProtoMol::XYZReader
orphanCoords	framework/io/XYZTrajectoryReader.cpp	/^  Vector3DBlock* XYZTrajectoryReader::orphanCoords(){$/;"	f	class:ProtoMol::XYZTrajectoryReader
orphanNames	framework/io/XYZReader.cpp	/^  vector<string>* XYZReader::orphanNames(){$/;"	f	class:ProtoMol::XYZReader
orphanNames	framework/io/XYZTrajectoryReader.cpp	/^  vector<string>* XYZTrajectoryReader::orphanNames(){$/;"	f	class:ProtoMol::XYZTrajectoryReader
orphanPAR	framework/io/AMBERReader.cpp	/^  PAR* AMBERReader::orphanPAR(){$/;"	f	class:ProtoMol::AMBERReader
orphanPAR	framework/io/PARReader.cpp	/^  PAR* PARReader::orphanPAR(){$/;"	f	class:ProtoMol::PARReader
orphanPGM	framework/io/PGMReader.cpp	/^  PGM* PGMReader::orphanPGM(){$/;"	f	class:ProtoMol::PGMReader
orphanPPM	framework/io/PPMReader.cpp	/^  PPM* PPMReader::orphanPPM(){$/;"	f	class:ProtoMol::PPMReader
orphanPSF	framework/io/AMBERReader.cpp	/^  PSF* AMBERReader::orphanPSF(){$/;"	f	class:ProtoMol::AMBERReader
orphanPSF	framework/io/PSFReader.cpp	/^  PSF* PSFReader::orphanPSF(){$/;"	f	class:ProtoMol::PSFReader
orphanTers	framework/io/PDBReader.cpp	/^  std::vector<PDB::Ter>* PDBReader::orphanTers(){$/;"	f	class:ProtoMol::PDBReader
ostringstream	framework/base/sstream_local.h	/^    ostringstream(const std::string& s, int which=ios::out) :$/;"	f	class:std::ostringstream
ostringstream	framework/base/sstream_local.h	/^    ostringstream(int which=ios::out) :$/;"	f	class:std::ostringstream
ostringstream	framework/base/sstream_local.h	/^  class ostringstream : public stringstreambase, public ostream {$/;"	c	namespace:std
ourIdentity	framework/base/Matrix3by3.cpp	/^  const Matrix3by3 Matrix3by3::ourIdentity = Matrix3by3(1,0,0, 0,1,0, 0,0,1);$/;"	m	class:ProtoMol::Matrix3by3	file:
ourIdentity	framework/base/Matrix3by3.h	/^    static const Matrix3by3 ourIdentity;$/;"	m	class:ProtoMol::Matrix3by3
output	framework/base/ScalarStructure.cpp	/^  bool ScalarStructure::output(bool doOutput){$/;"	f	class:ProtoMol::ScalarStructure
output	framework/base/ScalarStructure.h	/^    bool output() const {return myDoOutput;}$/;"	f	class:ProtoMol::ScalarStructure
overflow	framework/base/sstream_local.h	/^inline int std::stringbuf::overflow(int ch)$/;"	f	class:std::stringbuf
p	compilerTests/pngTest.cpp	/^  unsigned char* p;$/;"	m	class:PPM	file:
p	framework/base/PGM.h	/^    unsigned char* p;$/;"	m	class:ProtoMol::PGM
p	framework/base/PPM.h	/^    unsigned char* p;$/;"	m	class:ProtoMol::PPM
pairs	framework/base/Molecule.h	/^    std::vector<PairInt> pairs;$/;"	m	struct:ProtoMol::Molecule
par	framework/frontend/OutputCache.h	/^    const PAR&                       par() const {return myPAR;}$/;"	f	class:ProtoMol::OutputCache
parallelEvaluate	framework/forces/AngleSystemForce.h	/^  inline void AngleSystemForce<TBoundaryConditions>::parallelEvaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::AngleSystemForce
parallelEvaluate	framework/forces/BondSystemForce.h	/^  inline void BondSystemForce<TBoundaryConditions>::parallelEvaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::BondSystemForce
parallelEvaluate	framework/forces/DihedralSystemForce.h	/^  inline void DihedralSystemForce<TBoundaryConditions>::parallelEvaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::DihedralSystemForce
parallelEvaluate	framework/forces/ElectricFieldSystemForce.h	/^  inline void ElectricFieldSystemForce<TBoundaryConditions,TSwitchingFunction,TConstraint>::parallelEvaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::ElectricFieldSystemForce
parallelEvaluate	framework/forces/ExtendedCompareForce.cpp	/^  void ExtendedCompareForce::parallelEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::ExtendedCompareForce
parallelEvaluate	framework/forces/ExtendedForce.h	/^  inline void ExtendedForce::parallelEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::ExtendedForce
parallelEvaluate	framework/forces/ExtendedTimeForce.cpp	/^  void ExtendedTimeForce::parallelEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::ExtendedTimeForce
parallelEvaluate	framework/forces/ExternalGravitationSystemForce.cpp	/^  void ExternalGravitationSystemForce::parallelEvaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::ExternalGravitationSystemForce
parallelEvaluate	framework/forces/ExternalMagneticFieldExtendedForce.cpp	/^  void ExternalMagneticFieldExtendedForce::parallelEvaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::ExternalMagneticFieldExtendedForce
parallelEvaluate	framework/forces/FrictionExtendedForce.cpp	/^  void FrictionExtendedForce::parallelEvaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::FrictionExtendedForce
parallelEvaluate	framework/forces/HarmDihedralSystemForce.h	/^  inline void HarmDihedralSystemForce<TBoundaryConditions>::parallelEvaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::HarmDihedralSystemForce
parallelEvaluate	framework/forces/ImproperSystemForce.h	/^  inline void ImproperSystemForce<TBoundaryConditions>::parallelEvaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::ImproperSystemForce
parallelEvaluate	framework/forces/MollyForce.h	/^  inline void MollyForce::parallelEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::MollyForce
parallelEvaluate	framework/forces/NonbondedCutoffMollyForce.h	/^  void NonbondedCutoffMollyForce<TCellManager,TOneAtomPair>::parallelEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedCutoffMollyForce
parallelEvaluate	framework/forces/NonbondedCutoffSystemForce.h	/^  void NonbondedCutoffSystemForce<TCellManager,TOneAtomPair>::parallelEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedCutoffSystemForce
parallelEvaluate	framework/forces/NonbondedFullEwaldSystemForce.h	/^				     TSwitchingFunction>::parallelEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
parallelEvaluate	framework/forces/NonbondedFullSystemForce.h	/^    virtual void parallelEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedFullSystemForce
parallelEvaluate	framework/forces/NonbondedMultiGridSystemForce.h	/^				     smooth>::parallelEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
parallelEvaluate	framework/forces/NonbondedPMEwaldSystemForce.h	/^				   real,reciprocal,correction,TInterpolation,TSwitchingFunction>::parallelEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
parallelEvaluate	framework/forces/NonbondedSimpleFullSystemForce.h	/^    virtual void parallelEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::NonbondedSimpleFullSystemForce
parallelEvaluate	framework/forces/PaulTrapExtendedForce.h	/^  inline void PaulTrapExtendedForce<TBoundaryConditions>::parallelEvaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::PaulTrapExtendedForce
parallelEvaluate	framework/forces/SphericalSystemForce.cpp	/^  void SphericalSystemForce::parallelEvaluate(const GenericTopology* topo,$/;"	f	class:ProtoMol::SphericalSystemForce
parallelEvaluate	framework/forces/SystemCompareForce.cpp	/^  void SystemCompareForce::parallelEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::SystemCompareForce
parallelEvaluate	framework/forces/SystemForce.h	/^  inline void SystemForce::parallelEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::SystemForce
parallelEvaluate	framework/forces/SystemTimeForce.cpp	/^  void SystemTimeForce::parallelEvaluate(const GenericTopology* topo, $/;"	f	class:ProtoMol::SystemTimeForce
parameters	framework/base/MakeableDefinition.h	/^    std::vector<Parameter> parameters; \/\/\/< parameters of the obejct$/;"	m	struct:ProtoMol::MakeableDefinition
parameters	framework/base/ObjectDefinition.h	/^    std::vector<Parameter> parameters;$/;"	m	struct:ProtoMol::ObjectDefinition
parameters	framework/frontend/HelpTextFactory.h	/^    std::vector<Parameter> parameters;$/;"	m	struct:ProtoMol::HelpText
parseCommandLine	framework/frontend/parseCommandLine.cpp	/^  vector<vector<string> > parseCommandLine (int argc, char **argv, $/;"	f	namespace:ProtoMol
parseParameters	tools/rem/sequential/main.cc	/^vector<string> parseParameters(const string& parameterString) {$/;"	f
pauseCalc	framework/integrators/ModifierShadow.h	/^    inline void ModifierShadow::pauseCalc() {$/;"	f	class:ProtoMol::ModifierShadow
paused	framework/integrators/ModifierShadow.h	/^            bool paused;$/;"	m	class:ProtoMol::ModifierShadow
pdb	framework/frontend/OutputCache.h	/^    const std::vector<PDB::Atom>& pdb() const {return myAtoms;}$/;"	f	class:ProtoMol::OutputCache
periodicCell	framework/topology/ArrayCellListStructure.h	/^    T1 periodicCell(const T1& t1) const{$/;"	f	class:ProtoMol::ArrayCellListStructure
periodicity	framework/base/PAR.h	/^      int periodicity;    \/\/\/< periodicity$/;"	m	struct:ProtoMol::PAR::Improper
periodicity	framework/base/PAR.h	/^      std::vector< int > periodicity;     \/\/\/< periodicity$/;"	m	struct:ProtoMol::PAR::Dihedral
periodicity	framework/topology/Torsion.h	/^    std::vector< int > periodicity;    \/\/\/< The periodicity ($n$ value) for this interaction.$/;"	m	class:ProtoMol::Torsion
perturbSystem	framework/integrators/DLMCIntegrator.cpp	/^  void DLMCIntegrator::perturbSystem() {$/;"	f	class:ProtoMol::DLMCIntegrator
perturbSystem	framework/integrators/HMCIntegrator.cpp	/^    void HMCIntegrator::perturbSystem() {$/;"	f	class:ProtoMol::HMCIntegrator
perturbSystem	framework/integrators/ShadowHMCIntegrator.cpp	/^    void ShadowHMCIntegrator::perturbSystem() {$/;"	f	class:ProtoMol::ShadowHMCIntegrator
phaseShift	framework/base/PAR.h	/^      Real phaseShift;    \/\/\/< phase shift$/;"	m	struct:ProtoMol::PAR::Improper
phaseShift	framework/base/PAR.h	/^      std::vector< Real > phaseShift;     \/\/\/< phase shift$/;"	m	struct:ProtoMol::PAR::Dihedral
phaseShift	framework/topology/Torsion.h	/^    std::vector< Real > phaseShift;    \/\/\/< The phase shift ($\\delta$ value) for this interaction, in radians.  $/;"	m	class:ProtoMol::Torsion
plain	framework/base/Report.cpp	/^    MyStreamer& plain(MyStreamer& stream){$/;"	f	namespace:ProtoMol::Report
pointer	framework/base/Array_Fastest.h	/^    typedef T *       pointer;$/;"	t	class:ProtoMol::Array
pointer	framework/base/Array_Fastest.h	/^    typedef T *       pointer;$/;"	t	class:ProtoMol::RefArray
pointer	framework/base/Array_NoPartialSpecialization.h	/^      typedef T *       pointer;$/;"	t	class:ProtoMol::Array::RefArray
pointer	framework/base/Array_NoPartialSpecialization.h	/^    typedef T *       pointer;$/;"	t	class:ProtoMol::Array
pointer	framework/base/Vector3DBlock.h	/^    typedef std::vector<Vector3D>::pointer                   pointer;                                    $/;"	t	class:ProtoMol::Vector3DBlock
pointer	framework/topology/ArrayCellListStructure.h	/^    typedef TContainer::pointer	      pointer;$/;"	t	class:ProtoMol::ArrayCellListStructure
polarizability	framework/base/PAR.h	/^      Real polarizability; \/\/\/< polarizability or ignore (see description of negative below), default to zero$/;"	m	struct:ProtoMol::PAR::Nonbonded
polarizability2	framework/base/PAR.h	/^      Real polarizability2; \/\/\/< VDW parameter polarizability, default to zero$/;"	m	struct:ProtoMol::PAR::Nonbonded
policies	framework/frontend/ForceFactoryDetails.h	/^      std::set<std::string,ltstrNocase> policies;$/;"	m	struct:ProtoMol::ForceFactoryDetails::ForceType
policiesSorted	framework/frontend/ForceFactoryDetails.h	/^      std::map<std::string,std::string,ltstrNocase> policiesSorted;$/;"	m	struct:ProtoMol::ForceFactoryDetails::ForceType
policy	framework/frontend/ForceFactoryDetails.h	/^      std::set<std::string,ltstrNocase> policy;$/;"	m	struct:ProtoMol::ForceFactoryDetails::ForceType
poly5	framework/base/mathutilities.cpp	/^  Real poly5(Real ar){$/;"	f	namespace:ProtoMol
popElement	framework/base/Stack.h	/^  T Stack<T>::popElement() {$/;"	f	class:ProtoMol::Stack
pop_back	framework/base/Vector3DBlock.h	/^    void pop_back()                                              {return vec.pop_back();}                  $/;"	f	class:ProtoMol::Vector3DBlock
port	framework/imd/IMDElf.h	/^    int port;$/;"	m	class:ProtoMol::IMDElf
pos_type	framework/base/sstream_local.h	/^    typedef streampos   pos_type;$/;"	t	class:std::stringbuf
position	framework/base/Molecule.h	/^    Vector3D position;$/;"	m	struct:ProtoMol::Molecule
positions	framework/forces/OneAtomPair.h	/^    const Vector3DBlock* positions;$/;"	m	class:ProtoMol::OneAtomPair
positions	framework/forces/OneAtomPairFull.h	/^    const Vector3DBlock* positions;$/;"	m	class:ProtoMol::OneAtomPairFull
positions	framework/forces/OneAtomPairTwo.h	/^    const Vector3DBlock* positions;$/;"	m	class:ProtoMol::OneAtomPairTwo
positions	framework/forces/OneAtomPairTwoFull.h	/^    const Vector3DBlock* positions;$/;"	m	class:ProtoMol::OneAtomPairTwoFull
positions	framework/forces/OneMollyPair.h	/^    const Vector3DBlock* positions;$/;"	m	class:ProtoMol::OneMollyPair
positions	framework/forces/OneMollyPairTwo.h	/^    const Vector3DBlock* positions;$/;"	m	class:ProtoMol::OneMollyPairTwo
postDriftOrNextModify	framework/integrators/Integrator.cpp	/^  void Integrator::postDriftOrNextModify(){$/;"	f	class:ProtoMol::Integrator
postForceModify	framework/integrators/Integrator.cpp	/^  void Integrator::postForceModify(){$/;"	f	class:ProtoMol::Integrator
postStepModify	framework/integrators/Integrator.cpp	/^  void Integrator::postStepModify(){$/;"	f	class:ProtoMol::Integrator
postprocess	framework/forces/CompareForce.cpp	/^  void CompareForce::postprocess(const GenericTopology* topo, Vector3DBlock* forces,ScalarStructure* energies){$/;"	f	class:ProtoMol::CompareForce
postprocess	framework/forces/TimeForce.cpp	/^  void TimeForce::postprocess(const GenericTopology* , Vector3DBlock*,ScalarStructure* ){$/;"	f	class:ProtoMol::TimeForce
potentialEnergy	framework/base/ScalarStructure.h	/^  inline Real ScalarStructure::potentialEnergy() const {$/;"	f	class:ProtoMol::ScalarStructure
potentialEnergy	framework/frontend/OutputCache.cpp	/^  Real OutputCache::potentialEnergy() const{$/;"	f	class:ProtoMol::OutputCache
power	framework/base/mathutilities.cpp	/^  Real power(Real x, int n){$/;"	f	namespace:ProtoMol
power	framework/base/mathutilities.h	/^      static Real power(Real x){ return 1\/x;}$/;"	f	struct:ProtoMol::Private::Power
power	framework/base/mathutilities.h	/^      static Real power(Real x){ return x;}$/;"	f	struct:ProtoMol::Private::Power
power	framework/base/mathutilities.h	/^      static Real power(Real x){$/;"	f	struct:ProtoMol::Private::Power
power	framework/base/mathutilities.h	/^      static Real power(Real){ return 1;}$/;"	f	struct:ProtoMol::Private::Power
power	framework/base/mathutilities.h	/^  template <int _power> inline Real power(Real x) {$/;"	f	namespace:ProtoMol
power	framework/base/mathutilities.h	/^  template<> inline Real power<-1>(Real x) {return 1.\/x;}$/;"	f	namespace:ProtoMol
power	framework/base/mathutilities.h	/^  template<> inline Real power<0>(Real) {return 1;}$/;"	f	namespace:ProtoMol
power	framework/base/mathutilities.h	/^  template<> inline Real power<1>(Real x) {return x;}$/;"	f	namespace:ProtoMol
power	framework/base/mathutilities.h	/^  template<int _power> inline Real power(Real x){$/;"	f	namespace:ProtoMol
preDriftOrNextModify	framework/integrators/Integrator.cpp	/^  void Integrator::preDriftOrNextModify(){$/;"	f	class:ProtoMol::Integrator
preForceModify	framework/integrators/Integrator.cpp	/^  void Integrator::preForceModify(){$/;"	f	class:ProtoMol::Integrator
preStepModify	framework/integrators/Integrator.cpp	/^  void Integrator::preStepModify(){$/;"	f	class:ProtoMol::Integrator
precision	framework/base/Report.cpp	/^    void MyStreamer::precision(int prec){$/;"	f	class:ProtoMol::Report::MyStreamer
precomputeG	framework/base/MultiGrid.h	/^  inline void MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::precomputeG(){$/;"	f	class:ProtoMol::MultiGrid
preprocess	framework/forces/CompareForce.cpp	/^  void CompareForce::preprocess(unsigned int numAtoms){$/;"	f	class:ProtoMol::CompareForce
preprocess	framework/forces/TimeForce.cpp	/^  void TimeForce::preprocess(unsigned int){$/;"	f	class:ProtoMol::TimeForce
pressure	framework/base/ScalarStructure.h	/^  inline Real ScalarStructure::pressure(Real volume) const {$/;"	f	class:ProtoMol::ScalarStructure
pressure	framework/frontend/OutputCache.cpp	/^  Real OutputCache::pressure() const{$/;"	f	class:ProtoMol::OutputCache
previous	framework/integrators/StandardIntegrator.cpp	/^  Integrator* StandardIntegrator::previous(){$/;"	f	class:ProtoMol::StandardIntegrator
previous	framework/integrators/StandardIntegrator.cpp	/^  const Integrator* StandardIntegrator::previous() const{$/;"	f	class:ProtoMol::StandardIntegrator
print	framework/base/Configuration.cpp	/^  string Configuration::print() const{$/;"	f	class:ProtoMol::Configuration
print	framework/base/Grid.h	/^  void Grid<TInterpolation>::print(){$/;"	f	class:ProtoMol::Grid
print	framework/base/MultiGrid.h	/^    void print(int level){printQ(level);printV(level);}$/;"	f	class:ProtoMol::MultiGrid
print	framework/base/Report.h	/^    inline  bool MyStreamer::print() const{$/;"	f	class:ProtoMol::Report::MyStreamer
print	framework/base/pmconstants.cpp	/^    string print(){$/;"	f	namespace:ProtoMol::Constant
print	framework/frontend/Factory.h	/^    static std::string print(){$/;"	f	class:ProtoMol::Factory
print	framework/integrators/IntegratorDefinition.cpp	/^  string IntegratorDefinition::print() const{$/;"	f	class:ProtoMol::IntegratorDefinition
print	framework/integrators/Modifier.h	/^    std::string print() const{$/;"	f	class:ProtoMol::Modifier
print	framework/topology/Topology.h	/^    virtual std::string print(const Vector3DBlock* positions=NULL) const{$/;"	f	class:ProtoMol::Topology
printConst	framework/base/MultiGrid.h	/^  void MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::printConst(){$/;"	f	class:ProtoMol::MultiGrid
printQ	framework/base/MultiGrid.h	/^  void MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::printQ(int level){$/;"	f	class:ProtoMol::MultiGrid
printV	framework/base/MultiGrid.h	/^  void MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::printV(int level){$/;"	f	class:ProtoMol::MultiGrid
protomolAbort	framework/base/systemutilities.cpp	/^  void protomolAbort(){$/;"	f	namespace:ProtoMol
protomolEndSerial	framework/base/systemutilities.cpp	/^  void protomolEndSerial(bool exludeMaster){$/;"	f	namespace:ProtoMol
protomolExit	framework/base/systemutilities.cpp	/^  void protomolExit(){$/;"	f	namespace:ProtoMol
protomolStartSerial	framework/base/systemutilities.cpp	/^  void protomolStartSerial(bool exludeMaster){$/;"	f	namespace:ProtoMol
prototype	framework/frontend/IntegratorFactoryDetails.h	/^      const Integrator* prototype;$/;"	m	struct:ProtoMol::IntegratorFactoryDetails::IntegratorInput
psf	framework/frontend/OutputCache.h	/^    const PSF&                       psf() const {return myPSF;}$/;"	f	class:ProtoMol::OutputCache
push_back	framework/base/Vector3DBlock.h	/^    void push_back(const Vector3D& t)                            {return vec.push_back(t);}                     $/;"	f	class:ProtoMol::Vector3DBlock
quit	framework/base/Report.cpp	/^    MyStreamer& quit(MyStreamer& stream){$/;"	f	namespace:ProtoMol::Report
rFavg	framework/forces/CompareForce.h	/^      Real absF2,rFavg,rFmax,rPE;	$/;"	m	struct:ProtoMol::CompareForce::CompareError
rFmax	framework/forces/CompareForce.h	/^      Real absF2,rFavg,rFmax,rPE;	$/;"	m	struct:ProtoMol::CompareForce::CompareError
rPE	framework/forces/CompareForce.h	/^      Real absF2,rFavg,rFmax,rPE;	$/;"	m	struct:ProtoMol::CompareForce::CompareError
r_ub	framework/base/PAR.h	/^      Real r_ub;      \/\/\/< Urey-Bradley radius$/;"	m	struct:ProtoMol::PAR::Angle
radialCmpVector3D	tools/bccAnalyzer.cpp	/^  radialCmpVector3D():c(Vector3D(0.0,0.0,0.0)){}$/;"	f	class:radialCmpVector3D
radialCmpVector3D	tools/bccAnalyzer.cpp	/^  radialCmpVector3D(const Vector3D& a):c(a){}$/;"	f	class:radialCmpVector3D
radialCmpVector3D	tools/bccAnalyzer.cpp	/^class radialCmpVector3D {$/;"	c	file:
radix2b_	framework/base/fft.c	/^int radix2b_(double *a1, double *a2, double *b1, double *b2,int * b, int *ldb, double *c2, double *d2)$/;"	f
radix2f_	framework/base/fft.c	/^int radix2f_(double *a1,double * a2, double *b1,double * b2,int * b,int *ldb, double *c2,double * d2)$/;"	f
radix3b_	framework/base/fft.c	/^int radix3b_(double *a1,double * a2, double *a3,double * b1,double * b2,double * b3, int *b, int *ldb, double *c2, double *d2, double *c3, double *d3)$/;"	f
radix3f_	framework/base/fft.c	/^int radix3f_(double *a1, double *a2, double *a3, double *b1, double *b2, double *b3, int *b, int *ldb, double *c2, double *d2, double *c3, double *d3)$/;"	f
radix4b_	framework/base/fft.c	/^int radix4b_(double *a1, double *a2, double *a3, double *a4, double *b1, double *b2, double *b3, double *b4, int *b, int *ldb, double *c2, double *d2, double *c3, double *d3, double *c4, double *d4)$/;"	f
radix4f_	framework/base/fft.c	/^int radix4f_(double *a1, double *a2, double *a3, double *a4, double *b1, double *b2, double *b3, double *b4, int *b, int *ldb, double *c2, double *d2, double *c3, double *d3, double *c4, double *d4)$/;"	f
radix5b_	framework/base/fft.c	/^int radix5b_(double *a1,double * a2,double * a3,double * a4,double * a5,double * b1,double * b2,double * b3,double * b4,double * b5,int * b,int *ldb, double *c2,double * d2,double * c3,double * d3,double * c4,double * d4, double *c5, double *d5)$/;"	f
radix5f_	framework/base/fft.c	/^int radix5f_(double *a1,double * a2,double * a3,double * a4,double * a5,double * b1,double * b2,double * b3,double * b4,double * b5,int *b, int *ldb, double *c2,double * d2,double * c3,double * d3,double * c4,double * d4,double * c5,double * d5)$/;"	f
radix7b_	framework/base/fft.c	/^int radix7b_(double *a1, double *a2,double * a3,double * a4,double * a5,double * a6,double * a7,double * b1,double * b2,double * b3,double * b4,double * b5, double *b6, double *b7, int *b, int *ldb)$/;"	f
radix7f_	framework/base/fft.c	/^int radix7f_(double *a1,double * a2,double * a3, double *a4,double * a5,double * a6,double * a7,double * b1,double * b2,double * b3,double * b4,double * b5, double *b6,double * b7,int * b,int * ldb)$/;"	f
randomGaussian	framework/base/mathutilities.cpp	/^  Real randomGaussian(Real sdv, unsigned int seed){$/;"	f	namespace:ProtoMol
randomGaussianNumber	framework/base/mathutilities.cpp	/^  Real randomGaussianNumber(Real mean, Real stdev, unsigned int iseed) {$/;"	f	namespace:ProtoMol
randomGaussianNumber	framework/base/mathutilities.cpp	/^  Real randomGaussianNumber(unsigned int seed) {$/;"	f	namespace:ProtoMol
randomNumber	framework/base/mathutilities.cpp	/^  Real randomNumber(unsigned int seed) {$/;"	f	namespace:ProtoMol
randomVelocity	framework/topology/topologyutilities.cpp	/^  void randomVelocity(Real temperature,$/;"	f	namespace:ProtoMol
randomVelocity	framework/topology/topologyutilities.cpp	/^  void randomVelocity(Real temperatureFrom,$/;"	f	namespace:ProtoMol
rbegin	framework/base/Vector3DBlock.h	/^    const_reverse_iterator rbegin() const                        {return vec.rbegin();}    $/;"	f	class:ProtoMol::Vector3DBlock
rbegin	framework/base/Vector3DBlock.h	/^    reverse_iterator rbegin()                                    {return vec.rbegin();}                   $/;"	f	class:ProtoMol::Vector3DBlock
rc	framework/imd/IMDElf.h	/^    int rc;$/;"	m	class:ProtoMol::IMDElf
rdbuf	framework/base/sstream_local.h	/^    stringbuf* rdbuf()$/;"	f	class:std::stringstreambase
re	framework/base/FFTComplex.h	/^    double re;$/;"	m
re	framework/base/fft.c	/^  double re;$/;"	m	file:
read	framework/base/Value.cpp	/^  void Value::read(std::istream& is){$/;"	f	class:ProtoMol::Value
read	framework/base/Value.h	/^      virtual void read(std::istream& is){ ok = ValueTrait::read(is,holder) && ValueTrait::check(Constraint(),holder);}$/;"	f	class:ProtoMol::Value::Holder
read	framework/base/ValueType.h	/^    static bool read(std::istream& is, RepType & v){  $/;"	f	struct:ProtoMol::ValueTraits
read	framework/base/ValueType.h	/^    static bool read(std::istream& is, RepType & v){  std::string tmp; is >> tmp; return toReal(tmp,v);}$/;"	f	struct:ProtoMol::ValueTraits
read	framework/base/ValueType.h	/^    static bool read(std::istream& is, RepType & v){  std::string tmp; is >> tmp; return toUInt(tmp,v);}$/;"	f	struct:ProtoMol::ValueTraits
read	framework/base/ValueType.h	/^    static bool read(std::istream& is, RepType & v){  std::string x,y,z; is >> x >> y >> z; return toVector3D(x+" "+y+" "+z,v);}$/;"	f	struct:ProtoMol::ValueTraits
read	framework/base/ValueType.h	/^    static bool read(std::istream& is, RepType & v){ $/;"	f	struct:ProtoMol::ValueTraits
read	framework/base/ValueType.h	/^    static bool read(std::istream& is, RepType & v){ is >> v; return true;}$/;"	f	struct:ProtoMol::ValueTraits
read	framework/base/ValueType.h	/^    static bool read(std::istream& is, RepType & v){ std::string tmp; is >> tmp; return toBool(tmp,v);}$/;"	f	struct:ProtoMol::ValueTraits
read	framework/base/ValueType.h	/^    static bool read(std::istream& is, RepType & v){ std::string tmp; is >> tmp; return toInt(tmp,v);}$/;"	f	struct:ProtoMol::ValueTraits
read	framework/io/AMBERReader.cpp	/^  bool AMBERReader::read() {$/;"	f	class:ProtoMol::AMBERReader
read	framework/io/AMBERReader.cpp	/^  bool AMBERReader::read(PSF& psf,PAR& par) {$/;"	f	class:ProtoMol::AMBERReader
read	framework/io/CRDReader.cpp	/^  bool CRDReader::read() {$/;"	f	class:ProtoMol::CRDReader
read	framework/io/CRDReader.cpp	/^  bool CRDReader::read(Vector3DBlock& coords) {$/;"	f	class:ProtoMol::CRDReader
read	framework/io/ConfigurationReader.cpp	/^  bool ConfigurationReader::read() {$/;"	f	class:ProtoMol::ConfigurationReader
read	framework/io/ConfigurationReader.cpp	/^  bool ConfigurationReader::read(Configuration& config){$/;"	f	class:ProtoMol::ConfigurationReader
read	framework/io/DCDTrajectoryReader.cpp	/^  bool DCDTrajectoryReader::read() {$/;"	f	class:ProtoMol::DCDTrajectoryReader
read	framework/io/DCDTrajectoryReader.cpp	/^  bool DCDTrajectoryReader::read(Vector3DBlock& coords) {$/;"	f	class:ProtoMol::DCDTrajectoryReader
read	framework/io/File.cpp	/^  std::fstream& File::read(char* c, std::streamsize count){$/;"	f	class:ProtoMol::File
read	framework/io/PARReader.cpp	/^  bool PARReader::read() {$/;"	f	class:ProtoMol::PARReader
read	framework/io/PARReader.cpp	/^  bool PARReader::read(PAR& par) {$/;"	f	class:ProtoMol::PARReader
read	framework/io/PDBReader.cpp	/^  bool PDBReader::read() {$/;"	f	class:ProtoMol::PDBReader
read	framework/io/PDBReader.cpp	/^  bool PDBReader::read(PDB& pdb){$/;"	f	class:ProtoMol::PDBReader
read	framework/io/PDBReader.cpp	/^  bool PDBReader::read(Vector3DBlock& coords, std::vector<PDB::Atom>& atoms,  std::vector<PDB::Ter>& ters) {$/;"	f	class:ProtoMol::PDBReader
read	framework/io/PGMReader.cpp	/^  bool PGMReader::read() {$/;"	f	class:ProtoMol::PGMReader
read	framework/io/PGMReader.cpp	/^  bool PGMReader::read(PGM& pgm) {$/;"	f	class:ProtoMol::PGMReader
read	framework/io/PGMReader.cpp	/^  bool PGMReader::read(PPM& ppm) {$/;"	f	class:ProtoMol::PGMReader
read	framework/io/PPMReader.cpp	/^  bool PPMReader::read() {$/;"	f	class:ProtoMol::PPMReader
read	framework/io/PPMReader.cpp	/^  bool PPMReader::read(PGM& pgm) {$/;"	f	class:ProtoMol::PPMReader
read	framework/io/PPMReader.cpp	/^  bool PPMReader::read(PPM& ppm) {$/;"	f	class:ProtoMol::PPMReader
read	framework/io/PSFReader.cpp	/^  bool PSFReader::read() {$/;"	f	class:ProtoMol::PSFReader
read	framework/io/PSFReader.cpp	/^  bool PSFReader::read(PSF& psf) {$/;"	f	class:ProtoMol::PSFReader
read	framework/io/REMConfigurationReader.cpp	/^  bool REMConfigurationReader::read() {$/;"	f	class:ProtoMol::REMConfigurationReader
read	framework/io/REMConfigurationReader.cpp	/^  bool REMConfigurationReader::read(Configuration& config){$/;"	f	class:ProtoMol::REMConfigurationReader
read	framework/io/TempFileReader.cpp	/^  bool TempFileReader::read() {$/;"	f	class:ProtoMol::TempFileReader
read	framework/io/TempFileReader.cpp	/^  bool TempFileReader::read(Real &temp) {$/;"	f	class:ProtoMol::TempFileReader
read	framework/io/XYZBinReader.cpp	/^  bool XYZBinReader::read() {$/;"	f	class:ProtoMol::XYZBinReader
read	framework/io/XYZBinReader.cpp	/^  bool XYZBinReader::read(Vector3DBlock& coords) {$/;"	f	class:ProtoMol::XYZBinReader
read	framework/io/XYZReader.cpp	/^  bool XYZReader::read() {$/;"	f	class:ProtoMol::XYZReader
read	framework/io/XYZReader.cpp	/^  bool XYZReader::read(Vector3DBlock& coords, std::vector<std::string>& names){$/;"	f	class:ProtoMol::XYZReader
read	framework/io/XYZReader.cpp	/^  bool XYZReader::read(XYZ& xyz) {$/;"	f	class:ProtoMol::XYZReader
read	framework/io/XYZTrajectoryReader.cpp	/^  bool XYZTrajectoryReader::read() {$/;"	f	class:ProtoMol::XYZTrajectoryReader
read	framework/io/XYZTrajectoryReader.cpp	/^  bool XYZTrajectoryReader::read(Vector3DBlock& coords, std::vector<std::string>& names){$/;"	f	class:ProtoMol::XYZTrajectoryReader
read	framework/io/XYZTrajectoryReader.cpp	/^  bool XYZTrajectoryReader::read(XYZ& xyz) {$/;"	f	class:ProtoMol::XYZTrajectoryReader
readInput	tools/rem/sequential/main.cc	/^void readInput(char* fileName,$/;"	f
realChi	framework/forces/MagneticDipoleForce.h	/^    Real volum, expfactor, realChi, kappa;$/;"	m	class:ProtoMol::MagneticDipoleForce
realTerm	framework/forces/NonbondedFullEwaldSystemForce.h	/^				     TSwitchingFunction>::realTerm(const RealTopologyType* realTopo,$/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
realTerm	framework/forces/NonbondedPMEwaldSystemForce.h	/^				   TSwitchingFunction>::realTerm(const RealTopologyType* realTopo,$/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
realTopo	framework/forces/OneAtomPair.h	/^    const SemiGenericTopology<TBoundaryConditions>* realTopo;$/;"	m	class:ProtoMol::OneAtomPair
realTopo	framework/forces/OneAtomPairFull.h	/^    const SemiGenericTopology<TBoundaryConditions>* realTopo;$/;"	m	class:ProtoMol::OneAtomPairFull
realTopo	framework/forces/OneAtomPairTwo.h	/^    const SemiGenericTopology<TBoundaryConditions>* realTopo;$/;"	m	class:ProtoMol::OneAtomPairTwo
realTopo	framework/forces/OneAtomPairTwoFull.h	/^    const SemiGenericTopology<TBoundaryConditions>* realTopo;$/;"	m	class:ProtoMol::OneAtomPairTwoFull
realTopo	framework/forces/OneMollyPair.h	/^    const SemiGenericTopology<TBoundaryConditions>* realTopo;$/;"	m	class:ProtoMol::OneMollyPair
realTopo	framework/forces/OneMollyPairTwo.h	/^    const SemiGenericTopology<TBoundaryConditions>* realTopo;$/;"	m	class:ProtoMol::OneMollyPairTwo
realclear	framework/base/systemutilities.h	/^  void realclear(T& t){$/;"	f	namespace:ProtoMol
reciprocalTerm	framework/forces/NonbondedFullEwaldSystemForce.h	/^				     TSwitchingFunction>::reciprocalTerm(const RealTopologyType* realTopo,$/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
reciprocalTerm	framework/forces/NonbondedPMEwaldSystemForce.h	/^				   TSwitchingFunction>::reciprocalTerm(const RealTopologyType* realTopo,$/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
reciprocalTermParallel	framework/forces/NonbondedPMEwaldSystemForce.h	/^				   TSwitchingFunction>::reciprocalTermParallel(const RealTopologyType* realTopo,$/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
reclose	framework/frontend/OutputFile.cpp	/^  bool OutputFile::reclose(){$/;"	f	class:ProtoMol::OutputFile
recoverable	framework/base/Report.cpp	/^    MyStreamer& recoverable(MyStreamer& stream){$/;"	f	namespace:ProtoMol::Report
recv	framework/parallel/Parallel-FD.cpp	/^  void Parallel::recv(Real *, int, int) {}$/;"	f	class:ProtoMol::Parallel
recv	framework/parallel/Parallel-FD.cpp	/^  void Parallel::recv(Real *data, int num, int address) {$/;"	f	class:ProtoMol::Parallel
recv	framework/parallel/Parallel-FD.cpp	/^  void Parallel::recv(Vector3DBlock *, int) {}$/;"	f	class:ProtoMol::Parallel
recv	framework/parallel/Parallel-FD.cpp	/^  void Parallel::recv(Vector3DBlock *vect, int address) {$/;"	f	class:ProtoMol::Parallel
recv	framework/parallel/Parallel.cpp	/^  void Parallel::recv(Real *, int, int) {}$/;"	f	class:ProtoMol::Parallel
recv	framework/parallel/Parallel.cpp	/^  void Parallel::recv(Real *data, int num, int address) {$/;"	f	class:ProtoMol::Parallel
recv	framework/parallel/Parallel.cpp	/^  void Parallel::recv(Vector3DBlock *, int) {}$/;"	f	class:ProtoMol::Parallel
recv	framework/parallel/Parallel.cpp	/^  void Parallel::recv(Vector3DBlock *vect, int address) {$/;"	f	class:ProtoMol::Parallel
recvcounts	framework/parallel/Parallel-FD.cpp	/^  int*    recvcounts = NULL;$/;"	v
reduce	framework/base/Proxy.h	/^    void reduce()      const {myCount--;}$/;"	f	class:ProtoMol::Proxy
reduce	framework/parallel/Parallel-FD.cpp	/^  void Parallel::reduce(ScalarStructure* energies, Vector3DBlock* coords){$/;"	f	class:ProtoMol::Parallel
reduce	framework/parallel/Parallel-FD.cpp	/^  void Parallel::reduce(ScalarStructure*, Vector3DBlock*){}$/;"	f	class:ProtoMol::Parallel
reduce	framework/parallel/Parallel.cpp	/^  void Parallel::reduce(ScalarStructure* energies, Vector3DBlock* coords){$/;"	f	class:ProtoMol::Parallel
reduce	framework/parallel/Parallel.cpp	/^  void Parallel::reduce(ScalarStructure*, Vector3DBlock*){}$/;"	f	class:ProtoMol::Parallel
reduceSlaves	framework/parallel/Parallel-FD.cpp	/^  void Parallel::reduceSlaves(Real* begin, Real* end) {$/;"	f	class:ProtoMol::Parallel
reduceSlaves	framework/parallel/Parallel-FD.cpp	/^  void Parallel::reduceSlaves(Real*, Real*) {}$/;"	f	class:ProtoMol::Parallel
reduceSlaves	framework/parallel/Parallel.cpp	/^  void Parallel::reduceSlaves(Real* begin, Real* end) {$/;"	f	class:ProtoMol::Parallel
reduceSlaves	framework/parallel/Parallel.cpp	/^  void Parallel::reduceSlaves(Real*, Real*) {}$/;"	f	class:ProtoMol::Parallel
reducedHessBond	framework/base/reducedHessBond.cpp	/^  Matrix3by3 reducedHessBond(const Vector3D& atom_i,$/;"	f	namespace:ProtoMol
reference	framework/base/Array_Fastest.h	/^    typedef T &       reference;$/;"	t	class:ProtoMol::Array
reference	framework/base/Array_Fastest.h	/^    typedef T &       reference;$/;"	t	class:ProtoMol::RefArray
reference	framework/base/Array_NoPartialSpecialization.h	/^      typedef T &       reference;$/;"	t	class:ProtoMol::Array::RefArray
reference	framework/base/Array_NoPartialSpecialization.h	/^    typedef T &       reference;$/;"	t	class:ProtoMol::Array
reference	framework/base/Vector3DBlock.h	/^    typedef std::vector<Vector3D>::reference                 reference;                                  $/;"	t	class:ProtoMol::Vector3DBlock
reference	framework/topology/ArrayCellListStructure.h	/^    typedef TContainer::reference         reference;$/;"	t	class:ProtoMol::ArrayCellListStructure
registerAliases	framework/base/Configuration.cpp	/^  void Configuration::registerAliases(const string& keyword, const vector<string>& aliases){$/;"	f	class:ProtoMol::Configuration
registerAllExemplarsConfiguration	framework/frontend/OutputFactoryDetails.cpp	/^  void OutputFactoryDetails::registerAllExemplarsConfiguration(Configuration* config){$/;"	f	class:ProtoMol::OutputFactoryDetails
registerAllExemplarsConfiguration	framework/frontend/TopologyFactoryDetails.cpp	/^  void TopologyFactoryDetails::registerAllExemplarsConfiguration(Configuration* config){$/;"	f	class:ProtoMol::TopologyFactoryDetails
registerConfiguration	framework/frontend/InputValue.h	/^    static void registerConfiguration(Configuration* config){$/;"	f	class:ProtoMol::InputValue
registerConfiguration	framework/frontend/InputValue.h	/^    static void registerConfiguration(Configuration* config, const Text& txt){$/;"	f	class:ProtoMol::InputValue
registerConfiguration	framework/frontend/InputValue.h	/^    static void registerConfiguration(Configuration* config,T v) {$/;"	f	class:ProtoMol::InputValue
registerConfiguration	framework/frontend/InputValue.h	/^    static void registerConfiguration(Configuration* config,T v, const Text& txt) {$/;"	f	class:ProtoMol::InputValue
registerConfiguration	framework/frontend/InputValue.h	/^    static void registerConfiguration(Configuration* config,Value v) {$/;"	f	class:ProtoMol::InputValue
registerConfiguration	framework/frontend/InputValue.h	/^    static void registerConfiguration(Configuration* config,Value v, const Text& txt) {$/;"	f	class:ProtoMol::InputValue
registerExemplar	framework/frontend/Factory.h	/^    static void registerExemplar(const Type* exemplar, std::string id=""){$/;"	f	class:ProtoMol::Factory
registerExemplar	framework/frontend/Factory.h	/^    static void registerExemplar(const Type* exemplar,const std::vector<std::string>& aliases, std::string id=""){$/;"	f	class:ProtoMol::Factory
registerExemplar	framework/frontend/HelpTextFactory.cpp	/^  void HelpTextFactory::registerExemplar(const string& id, const HelpText& helpText){$/;"	f	class:ProtoMol::HelpTextFactory
registerExemplars	framework/frontend/HelpTextFactory.cpp	/^  void HelpTextFactory::registerExemplars(const Configuration* config){$/;"	f	class:ProtoMol::HelpTextFactory
registerForceExemplars	framework/factories/registerForceExemplars.cpp	/^  void registerForceExemplars(const GenericTopology* topo){$/;"	f	namespace:ProtoMol
registerForceExemplarsBonded	framework/factories/registerForceExemplarsBonded.cpp	/^  void registerForceExemplarsBonded(const PeriodicBoundaryConditions*){$/;"	f	namespace:ProtoMol
registerForceExemplarsBonded	framework/factories/registerForceExemplarsBonded.cpp	/^  void registerForceExemplarsBonded(const VacuumBoundaryConditions*){$/;"	f	namespace:ProtoMol
registerForceExemplarsCutoff	framework/factories/registerForceExemplarsCutoff.cpp	/^  void registerForceExemplarsCutoff(const PeriodicBoundaryConditions*, const CubicCellManager*){$/;"	f	namespace:ProtoMol
registerForceExemplarsCutoff	framework/factories/registerForceExemplarsCutoff.cpp	/^  void registerForceExemplarsCutoff(const VacuumBoundaryConditions*, const CubicCellManager*){$/;"	f	namespace:ProtoMol
registerForceExemplarsDispatch	framework/factories/registerForceExemplars.cpp	/^  inline void registerForceExemplarsDispatch(const Topology<BC,CM>* topo){$/;"	f	namespace:ProtoMol
registerForceExemplarsFastElectrostatic	framework/factories/registerForceExemplarsFastElectrostatic.cpp	/^  void registerForceExemplarsFastElectrostatic(const PeriodicBoundaryConditions*, const CubicCellManager*){$/;"	f	namespace:ProtoMol
registerForceExemplarsFastElectrostatic	framework/factories/registerForceExemplarsFastElectrostatic.cpp	/^  void registerForceExemplarsFastElectrostatic(const VacuumBoundaryConditions*, const CubicCellManager*){ $/;"	f	namespace:ProtoMol
registerForceExemplarsFull	framework/factories/registerForceExemplarsFull.cpp	/^  void registerForceExemplarsFull(const PeriodicBoundaryConditions*){$/;"	f	namespace:ProtoMol
registerForceExemplarsFull	framework/factories/registerForceExemplarsFull.cpp	/^  void registerForceExemplarsFull(const VacuumBoundaryConditions*){$/;"	f	namespace:ProtoMol
registerForceExemplarsOther	framework/factories/registerForceExemplarsOther.cpp	/^  void registerForceExemplarsOther(){ $/;"	f	namespace:ProtoMol
registerForceExemplarsOther	framework/factories/registerForceExemplarsOther.cpp	/^  void registerForceExemplarsOther(const PeriodicBoundaryConditions*){$/;"	f	namespace:ProtoMol
registerForceExemplarsOther	framework/factories/registerForceExemplarsOther.cpp	/^  void registerForceExemplarsOther(const PeriodicBoundaryConditions*, const CubicCellManager*){$/;"	f	namespace:ProtoMol
registerForceExemplarsOther	framework/factories/registerForceExemplarsOther.cpp	/^  void registerForceExemplarsOther(const VacuumBoundaryConditions*){$/;"	f	namespace:ProtoMol
registerForceExemplarsOther	framework/factories/registerForceExemplarsOther.cpp	/^  void registerForceExemplarsOther(const VacuumBoundaryConditions*, const CubicCellManager*){ $/;"	f	namespace:ProtoMol
registerForceExemplarsSimpleFull	framework/factories/registerForceExemplarsSimpleFull.cpp	/^  void registerForceExemplarsSimpleFull(const PeriodicBoundaryConditions*){$/;"	f	namespace:ProtoMol
registerForceExemplarsSimpleFull	framework/factories/registerForceExemplarsSimpleFull.cpp	/^  void registerForceExemplarsSimpleFull(const VacuumBoundaryConditions*){$/;"	f	namespace:ProtoMol
registerHelpText	framework/frontend/Factory.h	/^    static void registerHelpText(){$/;"	f	class:ProtoMol::Factory
registerIntegratorExemplars	framework/factories/registerIntegratorExemplars.cpp	/^  void registerIntegratorExemplars(){$/;"	f	namespace:ProtoMol
registerKeyword	framework/base/Configuration.cpp	/^  void Configuration::registerKeyword(const string& keyword, Value value){$/;"	f	class:ProtoMol::Configuration
registerOutputExemplars	framework/factories/registerOutputExemplars.cpp	/^  void registerOutputExemplars(){$/;"	f	namespace:ProtoMol
registerTopologyExemplars	framework/factories/registerTopologyExemplars.cpp	/^  void registerTopologyExemplars(){$/;"	f	namespace:ProtoMol
removeAngularMomentum	framework/topology/topologyutilities.cpp	/^  Vector3D removeAngularMomentum(const Vector3DBlock *positions, $/;"	f	namespace:ProtoMol
removeBeginEndBlanks	framework/base/stringutilities.cpp	/^  string removeBeginEndBlanks(const string& s){$/;"	f	namespace:ProtoMol
removeLinearMomentum	framework/topology/topologyutilities.cpp	/^  Vector3D removeLinearMomentum(Vector3DBlock *velocities, $/;"	f	namespace:ProtoMol
removeModifier	framework/integrators/Integrator.cpp	/^    bool Integrator::removeModifier( const std::string modifierName ) {$/;"	f	class:ProtoMol::Integrator
removeModifier	framework/integrators/Integrator.cpp	/^  bool Integrator::removeModifier(const Modifier* modifier){$/;"	f	class:ProtoMol::Integrator
rend	framework/base/Vector3DBlock.h	/^    const_reverse_iterator rend() const                          {return vec.rend();}         $/;"	f	class:ProtoMol::Vector3DBlock
rend	framework/base/Vector3DBlock.h	/^    reverse_iterator rend()                                      {return vec.rend();}                    $/;"	f	class:ProtoMol::Vector3DBlock
reopen	framework/frontend/OutputFile.cpp	/^  bool OutputFile::reopen(){$/;"	f	class:ProtoMol::OutputFile
reopen	framework/io/DCDTrajectoryWriter.cpp	/^  bool DCDTrajectoryWriter::reopen(unsigned int numAtoms){$/;"	f	class:ProtoMol::DCDTrajectoryWriter
reopen	framework/io/XYZTrajectoryWriter.cpp	/^  bool XYZTrajectoryWriter::reopen(){$/;"	f	class:ProtoMol::XYZTrajectoryWriter
replicaHistory	framework/frontend/OutputCache.h	/^    const Real        *replicaHistory() const {return myReplicaHistory;}$/;"	f	class:ProtoMol::OutputCache
reportlevel	framework/base/Report.h	/^      reportlevel() : myReportlevel(0) {}$/;"	f	class:ProtoMol::Report::reportlevel
reportlevel	framework/base/Report.h	/^      reportlevel(short l) : myReportlevel(l) {}$/;"	f	class:ProtoMol::Report::reportlevel
reportlevel	framework/base/Report.h	/^    class reportlevel{$/;"	c	namespace:ProtoMol::Report
rescaleVolume	framework/topology/SemiGenericTopology.h	/^    virtual void rescaleVolume(Real fac){$/;"	f	class:ProtoMol::SemiGenericTopology
reserve	framework/base/Vector3DBlock.h	/^    void reserve(size_t n)                                       {       vec.reserve(n);}  $/;"	f	class:ProtoMol::Vector3DBlock
reset	framework/base/Cycles.h	/^    void reset(){myRunningFlag = false;}$/;"	f	class:ProtoMol::Cycles
reset	framework/base/Report.cpp	/^    void MyStreamer::reset(){$/;"	f	class:ProtoMol::Report::MyStreamer
reset	framework/base/Stack.h	/^  void Stack<T>::reset(bool delMem) {$/;"	f	class:ProtoMol::Stack
reset	framework/base/Timer.cpp	/^  void TimeRep::reset()$/;"	f	class:ProtoMol::TimeRep
reset	framework/base/Timer.cpp	/^  void Timer::reset()$/;"	f	class:ProtoMol::Timer
resetHistory	framework/integrators/ModifierShadow.cpp	/^    void ModifierShadow::resetHistory() {$/;"	f	class:ProtoMol::ModifierShadow
resetNext	framework/parallel/Parallel-FD.cpp	/^  void Parallel::resetNext(const vector<int>& blocks){$/;"	f	class:ProtoMol::Parallel
resetNext	framework/parallel/Parallel.cpp	/^  void Parallel::resetNext(const vector<int>& blocks){$/;"	f	class:ProtoMol::Parallel
resetNext	framework/parallel/Parallel.h	/^    static void resetNext(){myNext = 0;myNextRange[0] =0;myNextRange[1]=0;myWorkState = getWorkState();}$/;"	f	class:ProtoMol::Parallel
residueName	framework/base/PDB.h	/^      std::string residueName;     \/\/\/< residue_name	   $/;"	m	struct:ProtoMol::PDB::Atom
residueName	framework/base/PDB.h	/^      std::string residueName;     \/\/\/< residue_name	   $/;"	m	struct:ProtoMol::PDB::Ter
residueNum	framework/base/PDB.h	/^      int         residueNum;	   \/\/\/< residue_sequence   $/;"	m	struct:ProtoMol::PDB::Atom
residueNum	framework/base/PDB.h	/^      int         residueNum;	   \/\/\/< residue_sequence   $/;"	m	struct:ProtoMol::PDB::Ter
residue_name	framework/base/PSF.h	/^      std::string residue_name; \/\/\/< residue name$/;"	m	struct:ProtoMol::PSF::Atom
residue_sequence	framework/base/PSF.h	/^      int residue_sequence;     \/\/\/< residue sequence$/;"	m	struct:ProtoMol::PSF::Atom
resize	compilerTests/pngTest.cpp	/^void PPM::resize(unsigned int width, unsigned int height){$/;"	f	class:PPM
resize	framework/base/Array_NoPartialSpecialization.h	/^    bool resize(const ArraySize<N> & Dimensions, const T & Init=T(), bool PreserveElems=false)$/;"	f	class:ProtoMol::Array
resize	framework/base/Array_NoPartialSpecialization.h	/^    bool resize(const unsigned int * Dimensions, const T & Init=T(), bool PreserveElems=false)$/;"	f	class:ProtoMol::Array
resize	framework/base/PDB.h	/^    void resize(size_t n){coords.resize(n),atoms.resize(n);}$/;"	f	struct:ProtoMol::PDB
resize	framework/base/PGM.cpp	/^  void PGM::resize(unsigned int width, unsigned int height){$/;"	f	class:ProtoMol::PGM
resize	framework/base/PPM.cpp	/^  void PPM::resize(unsigned int width, unsigned int height){$/;"	f	class:ProtoMol::PPM
resize	framework/base/Vector3DBlock.h	/^    void resize(size_type n, Vector3D t = Vector3D(0.0,0.0,0.0)) {       vec.resize(n,t);}                       $/;"	f	class:ProtoMol::Vector3DBlock
resize	framework/base/XYZ.h	/^    void resize(size_t n){coords.resize(n),names.resize(n);}$/;"	f	struct:ProtoMol::XYZ
resize	framework/topology/ExclusionTable.cpp	/^  void ExclusionTable::resize(int count) {$/;"	f	class:ProtoMol::ExclusionTable
resize	framework/topology/LennardJonesParameterTable.cpp	/^  void LennardJonesParameterTable::resize(int count) {$/;"	f	class:ProtoMol::LennardJonesParameterTable
restAngle	framework/topology/Angle.h	/^    Real restAngle;$/;"	m	class:ProtoMol::Angle
restLength	framework/topology/Bond.h	/^      Real restLength;$/;"	m	struct:ProtoMol::Bond::Constraint
restLength	framework/topology/Bond.h	/^    Real restLength;$/;"	m	class:ProtoMol::Bond
restoreForces	framework/integrators/Integrator.cpp	/^    void Integrator::restoreForces() {$/;"	f	class:ProtoMol::Integrator
restoreValues	framework/integrators/DLMCIntegrator.cpp	/^  void DLMCIntegrator::restoreValues(){$/;"	f	class:ProtoMol::DLMCIntegrator
restoreValues	framework/integrators/DihedralHMCIntegrator.cpp	/^  void DihedralHMCIntegrator::restoreValues(){$/;"	f	class:ProtoMol::DihedralHMCIntegrator
restoreValues	framework/integrators/MCIntegrator.cpp	/^  void MCIntegrator::restoreValues() {$/;"	f	class:ProtoMol::MCIntegrator
restoreValues	framework/integrators/ShadowHMCIntegrator.cpp	/^    void ShadowHMCIntegrator::restoreValues() {$/;"	f	class:ProtoMol::ShadowHMCIntegrator
reverse_iterator	framework/base/Vector3DBlock.h	/^    typedef std::vector<Vector3D>::reverse_iterator          reverse_iterator;                           $/;"	t	class:ProtoMol::Vector3DBlock
rint	framework/base/Real.h	14;"	d
rmin	framework/base/PAR.h	/^      Real rmin;         \/\/\/< minimum radius$/;"	m	struct:ProtoMol::PAR::Hbond
rotate	framework/base/Matrix3by3.cpp	/^  void Matrix3by3::rotate(const Vector3D& axis, Real alpha)$/;"	f	class:ProtoMol::Matrix3by3
rotate	framework/base/Matrix3by3.cpp	/^  void Matrix3by3::rotate(const Vector3D& axis, Real sinAlpha, Real cosAlpha)$/;"	f	class:ProtoMol::Matrix3by3
rotate	framework/base/Matrix3by3.cpp	/^  void Matrix3by3::rotate(const Vector3D& from, const Vector3D& to)$/;"	f	class:ProtoMol::Matrix3by3
rotateDihedral	framework/topology/topologyutilities.cpp	/^  void rotateDihedral(const GenericTopology* topology,$/;"	f	namespace:ProtoMol
roughTest	framework/topology/C1SwitchingFunction.h	/^    bool roughTest(Real distSquared) const { return (distSquared <= myCutoff2);}$/;"	f	class:ProtoMol::C1SwitchingFunction
roughTest	framework/topology/C2SwitchingFunction.h	/^    bool roughTest(Real distSquared) const{return (distSquared <= myCutoff2);}$/;"	f	class:ProtoMol::C2SwitchingFunction
roughTest	framework/topology/CmpCnCnSwitchingFunction.h	/^    bool roughTest(Real distSquared) const{return (distSquared <= myCutoff2);}$/;"	f	class:ProtoMol::CmpCnCnSwitchingFunction
roughTest	framework/topology/CnSwitchingFunction.h	/^    bool roughTest(Real distSquared) const{return (distSquared <= myCutoff2);}$/;"	f	class:ProtoMol::CnSwitchingFunction
roughTest	framework/topology/ComplementSwitchingFunction.h	/^    bool roughTest(Real \/*distSquared*\/) const{return true;}$/;"	f	class:ProtoMol::ComplementSwitchingFunction
roughTest	framework/topology/CutoffSwitchingFunction.h	/^    bool roughTest(Real distSquared) const{return (distSquared <= myCutoff2);}$/;"	f	class:ProtoMol::CutoffSwitchingFunction
roughTest	framework/topology/RangeSwitchingFunction.h	/^  inline bool RangeSwitchingFunction<TOriginalSwitchingFunction>::roughTest(Real distSquared) const {$/;"	f	class:ProtoMol::RangeSwitchingFunction
roughTest	framework/topology/ShiftSwitchingFunction.h	/^    bool roughTest(Real distSquared) const{return (distSquared <= myCutoff2);}$/;"	f	class:ProtoMol::ShiftSwitchingFunction
roughTest	framework/topology/UniversalSwitchingFunction.h	/^    bool roughTest(Real \/*distSquared*\/) const {return true;};$/;"	f	class:ProtoMol::UniversalSwitchingFunction
rpos	framework/base/sstream_local.h	/^    std::string::size_type      rpos;$/;"	m	class:std::stringbuf
rtod	framework/base/mathutilities.cpp	/^  vector<Real> rtod(const vector<Real>& rad){$/;"	f	namespace:ProtoMol
rtod	framework/base/mathutilities.h	/^  inline Real rtod(Real rad){ $/;"	f	namespace:ProtoMol
run	framework/frontend/Output.cpp	/^  void Output::run(int step){$/;"	f	class:ProtoMol::Output
run	framework/frontend/OutputCollection.cpp	/^  void OutputCollection::run(int step){$/;"	f	class:ProtoMol::OutputCollection
run	framework/integrators/BBKIntegrator.cpp	/^  void BBKIntegrator::run (int numTimesteps) {$/;"	f	class:ProtoMol::BBKIntegrator
run	framework/integrators/DMDLeapfrogIntegrator.cpp	/^  void DMDLeapfrogIntegrator::run (int numTimesteps) {$/;"	f	class:ProtoMol::DMDLeapfrogIntegrator
run	framework/integrators/DihedralHMCIntegrator.cpp	/^  void DihedralHMCIntegrator::run(int numTimesteps){$/;"	f	class:ProtoMol::DihedralHMCIntegrator
run	framework/integrators/HMCIntegrator.cpp	/^    void HMCIntegrator::run( int numTimesteps ) {$/;"	f	class:ProtoMol::HMCIntegrator
run	framework/integrators/LeapfrogIntegrator.cpp	/^  void LeapfrogIntegrator::run(int numTimesteps) {$/;"	f	class:ProtoMol::LeapfrogIntegrator
run	framework/integrators/MCIntegrator.cpp	/^  void MCIntegrator::run(int numTimesteps) {$/;"	f	class:ProtoMol::MCIntegrator
run	framework/integrators/NPTVerletIntegrator.cpp	/^  void NPTVerletIntegrator::run(int numTimesteps) {$/;"	f	class:ProtoMol::NPTVerletIntegrator
run	framework/integrators/NVTVerletIntegrator.cpp	/^  void NVTVerletIntegrator::run(int numTimesteps) {$/;"	f	class:ProtoMol::NVTVerletIntegrator
run	framework/integrators/PLeapfrogIntegrator.cpp	/^  void PLeapfrogIntegrator::run(int numTimesteps) {$/;"	f	class:ProtoMol::PLeapfrogIntegrator
run	framework/integrators/ShadowHMCIntegrator.cpp	/^    void ShadowHMCIntegrator::run( int numTimesteps ) {$/;"	f	class:ProtoMol::ShadowHMCIntegrator
run	framework/integrators/StandardIntegrator.cpp	/^  void StandardIntegrator::run(int numTimesteps){$/;"	f	class:ProtoMol::StandardIntegrator
run	tools/rem/sequential/replica.cc	/^void Replica::run() {$/;"	f	class:Replica
runPreSteps	framework/integrators/ShadowHMCIntegrator.cpp	/^    void ShadowHMCIntegrator::runPreSteps( int numTimesteps ) {$/;"	f	class:ProtoMol::ShadowHMCIntegrator
saveForces	framework/integrators/Integrator.cpp	/^    void Integrator::saveForces() {$/;"	f	class:ProtoMol::Integrator
saveValues	framework/integrators/DLMCIntegrator.cpp	/^  void DLMCIntegrator::saveValues(){$/;"	f	class:ProtoMol::DLMCIntegrator
saveValues	framework/integrators/DihedralHMCIntegrator.cpp	/^  void DihedralHMCIntegrator::saveValues() {$/;"	f	class:ProtoMol::DihedralHMCIntegrator
saveValues	framework/integrators/MCIntegrator.cpp	/^  void MCIntegrator::saveValues() {$/;"	f	class:ProtoMol::MCIntegrator
saveValues	framework/integrators/ShadowHMCIntegrator.cpp	/^    void ShadowHMCIntegrator::saveValues() {$/;"	f	class:ProtoMol::ShadowHMCIntegrator
savedPE	framework/integrators/ShadowHMCIntegrator.h	/^                 savedPE;$/;"	m	class:ProtoMol::ShadowHMCIntegrator
scalarSum	framework/base/Grid.h	/^  Real Grid<TInterpolation>::scalarSum(ScalarStructure* energies){$/;"	f	class:ProtoMol::Grid
scalarSum	framework/base/Grid.h	/^  Real Grid<TInterpolation>::scalarSum(ScalarStructure* energies, unsigned int block, unsigned int nBlocks){$/;"	f	class:ProtoMol::Grid
scale	framework/base/Matrix3by3.cpp	/^  void Matrix3by3::scale(Real s)$/;"	f	class:ProtoMol::Matrix3by3
scale	framework/base/Matrix3by3.cpp	/^  void Matrix3by3::scale(Real sx, Real sy, Real sz)$/;"	f	class:ProtoMol::Matrix3by3
scale	framework/base/Matrix3by3.cpp	/^  void Matrix3by3::scale(const Vector3D& scaleFactor)$/;"	f	class:ProtoMol::Matrix3by3
scaleToTemperature	tools/rem/sequential/replica.cc	/^void Replica::scaleToTemperature(double newTemp) {$/;"	f	class:Replica
scaledCharge	framework/base/Atom.h	/^    Real scaledCharge;$/;"	m	struct:ProtoMol::Atom
scaledMass	framework/base/Atom.h	/^    Real scaledMass;$/;"	m	struct:ProtoMol::Atom
scope	framework/forces/Force.h	/^    static const std::string scope;$/;"	m	class:ProtoMol::Force
scope	framework/frontend/HelpTextFactory.h	/^    std::string            scope;$/;"	m	struct:ProtoMol::HelpText
scope	framework/frontend/Output.h	/^    static const std::string scope;$/;"	m	class:ProtoMol::Output
scope	framework/integrators/Integrator.h	/^    static const std::string scope;$/;"	m	class:ProtoMol::Integrator
scope	framework/topology/GenericTopology.h	/^    static const std::string scope;$/;"	m	class:ProtoMol::GenericTopology
sd	framework/imd/vmdsock.h	/^      int sd;                  \/\/< socket file descriptor $/;"	m	struct:ProtoMol::IMD::<anonymous>
search	framework/frontend/HelpTextFactory.cpp	/^  string HelpTextFactory::search(const string& id){$/;"	f	class:ProtoMol::HelpTextFactory
second	framework/base/simpleTypes.h	/^    unsigned int first,second;$/;"	m	struct:ProtoMol::PairIntSorted
second	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    struct CellPair {int first; int second;};$/;"	m	struct:ProtoMol::CellListEnumerator::CellPair
second	framework/topology/CellListEnumerator_standard.h	/^    struct CellPair {int first; int second;};$/;"	m	struct:ProtoMol::CellListEnumerator::CellPair
segID	framework/base/PDB.h	/^      std::string segID;	   \/\/\/< seg_id		   $/;"	m	struct:ProtoMol::PDB::Atom
seg_id	framework/base/PSF.h	/^      std::string seg_id;       \/\/\/< segment identifier$/;"	m	struct:ProtoMol::PSF::Atom
send	framework/parallel/Parallel-FD.cpp	/^  void Parallel::send(Real *, int, int) {}$/;"	f	class:ProtoMol::Parallel
send	framework/parallel/Parallel-FD.cpp	/^  void Parallel::send(Real *data, int num, int address) {$/;"	f	class:ProtoMol::Parallel
send	framework/parallel/Parallel-FD.cpp	/^  void Parallel::send(Vector3DBlock *, int) {}$/;"	f	class:ProtoMol::Parallel
send	framework/parallel/Parallel-FD.cpp	/^  void Parallel::send(Vector3DBlock *vect, int address) {$/;"	f	class:ProtoMol::Parallel
send	framework/parallel/Parallel.cpp	/^  void Parallel::send(Real *, int, int) {}$/;"	f	class:ProtoMol::Parallel
send	framework/parallel/Parallel.cpp	/^  void Parallel::send(Real *data, int num, int address) {$/;"	f	class:ProtoMol::Parallel
send	framework/parallel/Parallel.cpp	/^  void Parallel::send(Vector3DBlock *, int) {}$/;"	f	class:ProtoMol::Parallel
send	framework/parallel/Parallel.cpp	/^  void Parallel::send(Vector3DBlock *vect, int address) {$/;"	f	class:ProtoMol::Parallel
send_coords	framework/imd/IMDElf.cpp	/^  int IMDElf::send_coords(const Vector3DBlock &c) {$/;"	f	class:ProtoMol::IMDElf
sendrecv	framework/parallel/Parallel-FD.cpp	/^  void Parallel::sendrecv(Real *, int, int, Real *, int, int) {}$/;"	f	class:ProtoMol::Parallel
sendrecv	framework/parallel/Parallel-FD.cpp	/^  void Parallel::sendrecv(Real *senddata, int sendnum, int sendaddr, Real *recvdata, int recvnum, int recvaddr) {$/;"	f	class:ProtoMol::Parallel
sendrecv	framework/parallel/Parallel.cpp	/^  void Parallel::sendrecv(Real *, int, int, Real *, int, int) {}$/;"	f	class:ProtoMol::Parallel
sendrecv	framework/parallel/Parallel.cpp	/^  void Parallel::sendrecv(Real *senddata, int sendnum, int sendaddr, Real *recvdata, int recvnum, int recvaddr) {$/;"	f	class:ProtoMol::Parallel
sendrecv_replace	framework/parallel/Parallel-FD.cpp	/^  void Parallel::sendrecv_replace(Real *, int, int, int) {}$/;"	f	class:ProtoMol::Parallel
sendrecv_replace	framework/parallel/Parallel-FD.cpp	/^  void Parallel::sendrecv_replace(Real *data, int num, int sendaddr, int recvaddr) {$/;"	f	class:ProtoMol::Parallel
sendrecv_replace	framework/parallel/Parallel-FD.cpp	/^  void Parallel::sendrecv_replace(Vector3DBlock *, int, int) {}$/;"	f	class:ProtoMol::Parallel
sendrecv_replace	framework/parallel/Parallel-FD.cpp	/^  void Parallel::sendrecv_replace(Vector3DBlock *vect, int sendaddr, int recvaddr) {$/;"	f	class:ProtoMol::Parallel
sendrecv_replace	framework/parallel/Parallel.cpp	/^  void Parallel::sendrecv_replace(Real *, int, int, int) {}$/;"	f	class:ProtoMol::Parallel
sendrecv_replace	framework/parallel/Parallel.cpp	/^  void Parallel::sendrecv_replace(Real *data, int num, int sendaddr, int recvaddr) {$/;"	f	class:ProtoMol::Parallel
sendrecv_replace	framework/parallel/Parallel.cpp	/^  void Parallel::sendrecv_replace(Vector3DBlock *, int, int) {}$/;"	f	class:ProtoMol::Parallel
sendrecv_replace	framework/parallel/Parallel.cpp	/^  void Parallel::sendrecv_replace(Vector3DBlock *vect, int sendaddr, int recvaddr) {$/;"	f	class:ProtoMol::Parallel
set	compilerTests/pngTest.cpp	/^  void set(unsigned int i, unsigned int j,unsigned char a){p[(h-i-1)*w*3+j*3] = a;p[(h-i-1)*w*3+j*3+1] = a;p[(h-i-1)*w*3+j*3+2] = a;};$/;"	f	class:PPM
set	compilerTests/pngTest.cpp	/^  void set(unsigned int i, unsigned int j,unsigned char r,unsigned char g,unsigned char b){p[(h-i-1)*w*3+j*3] = r;p[(h-i-1)*w*3+j*3+1] = g;p[(h-i-1)*w*3+j*3+2] = b;};$/;"	f	class:PPM
set	framework/base/BSpline.cpp	/^  void BSpline::set(Real w){$/;"	f	class:ProtoMol::BSpline
set	framework/base/Configuration.cpp	/^  bool Configuration::set(const string& keyword, Value v){$/;"	f	class:ProtoMol::Configuration
set	framework/base/Configuration.cpp	/^  bool Configuration::set(const string& keyword, const string& v){$/;"	f	class:ProtoMol::Configuration
set	framework/base/Configuration.cpp	/^  bool Configuration::set(const string& keyword, const vector<vector<string> >&  values){$/;"	f	class:ProtoMol::Configuration
set	framework/base/Configuration.cpp	/^  bool Configuration::set(const vector<vector<string> >&  values){$/;"	f	class:ProtoMol::Configuration
set	framework/base/Hermite.cpp	/^  void Hermite::set(Real w){$/;"	f	class:ProtoMol::Hermite
set	framework/base/Lagrange.cpp	/^  void Lagrange::set(Real w){$/;"	f	class:ProtoMol::Lagrange
set	framework/base/PGM.h	/^    void set(unsigned int x, unsigned int y,unsigned char a){p[(h-y-1)*w+x] = a;}$/;"	f	class:ProtoMol::PGM
set	framework/base/PGM.h	/^    void set(unsigned int x, unsigned int y,unsigned char r,unsigned char g,unsigned char b){p[(h-y-1)*w+x] = static_cast<unsigned char>((static_cast<unsigned int>(r)+static_cast<unsigned int>(g)+static_cast<unsigned int>(b))\/3);}$/;"	f	class:ProtoMol::PGM
set	framework/base/PPM.h	/^    void set(unsigned int x, unsigned int y,unsigned char a){p[(h-y-1)*w*3+x*3] = a;p[(h-y-1)*w*3+x*3+1] = a;p[(h-y-1)*w*3+x*3+2] = a;}$/;"	f	class:ProtoMol::PPM
set	framework/base/PPM.h	/^    void set(unsigned int x, unsigned int y,unsigned char r,unsigned char g,unsigned char b){p[(h-y-1)*w*3+x*3] = r;p[(h-y-1)*w*3+x*3+1] = g;p[(h-y-1)*w*3+x*3+2] = b;}$/;"	f	class:ProtoMol::PPM
set	framework/base/Timer.cpp	/^  void TimeRep::set(double realTime, double userTime, double sysTime)$/;"	f	class:ProtoMol::TimeRep
set	framework/base/Value.cpp	/^  bool  Value::set(Value v){$/;"	f	class:ProtoMol::Value
set	framework/base/Value.h	/^              bool set(const char* v){return set(std::string(v));}$/;"	f	class:ProtoMol::Value::PlaceHolder
set	framework/base/Value.h	/^      virtual bool set(Real  v)                         { ok = ValueTrait::convert(v,holder) && ValueTrait::check(Constraint(),holder); return ok;}$/;"	f	class:ProtoMol::Value::Holder
set	framework/base/Value.h	/^      virtual bool set(bool  v)                         { ok = ValueTrait::convert(v,holder) && ValueTrait::check(Constraint(),holder); return ok;}$/;"	f	class:ProtoMol::Value::Holder
set	framework/base/Value.h	/^      virtual bool set(const Value& val) {$/;"	f	class:ProtoMol::Value::Holder
set	framework/base/Value.h	/^      virtual bool set(const Vector3D & v)              { ok = ValueTrait::convert(v,holder) && ValueTrait::check(Constraint(),holder); return ok;}$/;"	f	class:ProtoMol::Value::Holder
set	framework/base/Value.h	/^      virtual bool set(const std::string & v)           { ok = ValueTrait::convert(v,holder) && ValueTrait::check(Constraint(),holder); return ok;}$/;"	f	class:ProtoMol::Value::Holder
set	framework/base/Value.h	/^      virtual bool set(const std::vector<Real> & v)     { ok = ValueTrait::convert(v,holder) && ValueTrait::check(Constraint(),holder); return ok;}$/;"	f	class:ProtoMol::Value::Holder
set	framework/base/Value.h	/^      virtual bool set(int  v)                          { ok = ValueTrait::convert(v,holder) && ValueTrait::check(Constraint(),holder); return ok;}$/;"	f	class:ProtoMol::Value::Holder
set	framework/base/Value.h	/^      virtual bool set(unsigned int  v)                 { ok = ValueTrait::convert(v,holder) && ValueTrait::check(Constraint(),holder); return ok;}$/;"	f	class:ProtoMol::Value::Holder
set	framework/base/Value.h	/^    bool set(const T& value){$/;"	f	class:ProtoMol::Value
set	framework/topology/BankLennardJonesParameterTable.h	/^    void set(int i, int j, int type1, int type2, const LennardJonesParameters& paramsij ) {$/;"	f	struct:ProtoMol::BankLennardJonesParameterTable
set	framework/topology/LennardJonesParameterTable.cpp	/^  void LennardJonesParameterTable::set(int type1, int type2, const LennardJonesParameters &params) {$/;"	f	class:ProtoMol::LennardJonesParameterTable
set	framework/topology/PeriodicBoundaryConditions.cpp	/^  void PeriodicBoundaryConditions::set(const Vector3D &e1 ,const Vector3D &e2 ,$/;"	f	class:ProtoMol::PeriodicBoundaryConditions
set	framework/topology/VacuumBoundaryConditions.h	/^    void set(const Vector3D &,const Vector3D &,const Vector3D &,const Vector3D &) const{};$/;"	f	class:ProtoMol::VacuumBoundaryConditions
setAbort	framework/base/Report.cpp	/^    void MyStreamer::setAbort(bool flag){$/;"	f	class:ProtoMol::Report::MyStreamer
setAlias	framework/base/Makeable.cpp	/^  string Makeable::setAlias(const string& id){$/;"	f	class:ProtoMol::Makeable
setAllNodes	framework/base/Report.cpp	/^    void MyStreamer::setAllNodes(bool flag){$/;"	f	class:ProtoMol::Report::MyStreamer
setAngle	framework/topology/AngleInfo.cpp	/^  void AngleInfo::setAngle(Real angle) {$/;"	f	class:ProtoMol::AngleInfo
setAtomID	framework/topology/AngleInfo.cpp	/^  void AngleInfo::setAtomID(unsigned int ID) {$/;"	f	class:ProtoMol::AngleInfo
setAutofit	framework/io/XFigWriter.cpp	/^  bool XFigWriter::setAutofit(bool autofit){$/;"	f	class:ProtoMol::XFigWriter
setAxes	framework/io/XFigWriter.cpp	/^  bool XFigWriter::setAxes(bool axes){$/;"	f	class:ProtoMol::XFigWriter
setBarrier	framework/parallel/Parallel.h	/^    static void setBarrier(bool b)     {myUseBarrier = b;}$/;"	f	class:ProtoMol::Parallel
setCache	framework/frontend/Output.cpp	/^  void Output::setCache(const OutputCache* cache){$/;"	f	class:ProtoMol::Output
setCellSize	framework/topology/CubicCellManager.cpp	/^  void CubicCellManager::setCellSize(Real newSize) {$/;"	f	class:ProtoMol::CubicCellManager
setCharmmType	framework/io/PARReader.h	/^  inline void PARReader::setCharmmType(PAR::CharmmTypeEnum charmmType){$/;"	f	class:ProtoMol::PARReader
setCharmmType	framework/io/PARWriter.cpp	/^  void PARWriter::setCharmmType(PAR::CharmmTypeEnum charmmType){$/;"	f	class:ProtoMol::PARWriter
setColor	framework/io/XFigWriter.cpp	/^  bool XFigWriter::setColor(bool color){$/;"	f	class:ProtoMol::XFigWriter
setComment	framework/io/Writer.cpp	/^  void Writer::setComment(const std::string& comment){$/;"	f	class:ProtoMol::Writer
setCoords	framework/io/XYZTrajectoryWriter.cpp	/^  void XYZTrajectoryWriter::setCoords(const Vector3DBlock& coords){$/;"	f	class:ProtoMol::XYZTrajectoryWriter
setExclusionAtom	framework/topology/AngleInfo.cpp	/^  void AngleInfo::setExclusionAtom() {$/;"	f	class:ProtoMol::AngleInfo
setFilename	framework/frontend/InputPosVel.cpp	/^  void InputPosVel::setFilename(const string& filename){$/;"	f	class:ProtoMol::InputPosVel
setFilename	framework/io/File.h	/^  inline void File::setFilename(const std::string& filename){$/;"	f	class:ProtoMol::File
setFirststep	framework/io/DCDTrajectoryWriter.cpp	/^   void DCDTrajectoryWriter::setFirststep(unsigned int firststep){$/;"	f	class:ProtoMol::DCDTrajectoryWriter
setForce	framework/imd/HapticSystemForce.cpp	/^  void HapticSystemForce::setForce(Vector3DBlock* forces){$/;"	f	class:ProtoMol::HapticSystemForce
setFromZ	framework/io/XFigWriter.cpp	/^  Real XFigWriter::setFromZ(Real fromZ){$/;"	f	class:ProtoMol::XFigWriter
setIAmMaster	framework/base/Report.h	/^      void setIAmMaster(bool master){myIAmMaster = master;}$/;"	f	class:ProtoMol::Report::MyStreamer
setInnerAtom	framework/topology/AngleInfo.cpp	/^  void AngleInfo::setInnerAtom(){$/;"	f	class:ProtoMol::AngleInfo
setLegend	framework/io/XFigWriter.cpp	/^  bool XFigWriter::setLegend(bool legend){$/;"	f	class:ProtoMol::XFigWriter
setLevel	framework/base/Report.h	/^      void setLevel(short level) {myLevel=level;}$/;"	f	class:ProtoMol::Report::MyStreamer
setLittleEndian	framework/io/DCDTrajectoryWriter.cpp	/^  void DCDTrajectoryWriter::setLittleEndian(bool littleEndian){$/;"	f	class:ProtoMol::DCDTrajectoryWriter
setLittleEndian	framework/io/XYZBinWriter.cpp	/^  void XYZBinWriter::setLittleEndian(bool littleEndian){$/;"	f	class:ProtoMol::XYZBinWriter
setMaxPackages	framework/parallel/Parallel-FD.cpp	/^  void Parallel::setMaxPackages(int n)  {$/;"	f	class:ProtoMol::Parallel
setMaxPackages	framework/parallel/Parallel.cpp	/^  void Parallel::setMaxPackages(int n)  {$/;"	f	class:ProtoMol::Parallel
setMode	framework/parallel/Parallel-FD.cpp	/^  void Parallel::setMode(ParallelType mode){$/;"	f	class:ProtoMol::Parallel
setMode	framework/parallel/Parallel.cpp	/^  void Parallel::setMode(ParallelType mode){$/;"	f	class:ProtoMol::Parallel
setMyNumIterMOLLYStepsize	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  void BSplineMOLLYIntegrator::setMyNumIterMOLLYStepsize(){$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
setNames	framework/io/XYZTrajectoryWriter.cpp	/^  void XYZTrajectoryWriter::setNames(const XYZ& xyz){$/;"	f	class:ProtoMol::XYZTrajectoryWriter
setNames	framework/io/XYZTrajectoryWriter.cpp	/^  void XYZTrajectoryWriter::setNames(const std::vector<Atom>& atoms,const std::vector<AtomType>& atomTypes){$/;"	f	class:ProtoMol::XYZTrajectoryWriter
setNames	framework/io/XYZTrajectoryWriter.cpp	/^  void XYZTrajectoryWriter::setNames(const std::vector<std::string>& names){$/;"	f	class:ProtoMol::XYZTrajectoryWriter
setNodeNum	framework/io/TempFileReader.cpp	/^  void TempFileReader::setNodeNum(int num) {$/;"	f	class:ProtoMol::TempFileReader
setNumSteps	tools/rem/sequential/replica.cc	/^void Replica::setNumSteps(int numSteps) {$/;"	f	class:Replica
setOrder	framework/base/BSpline.cpp	/^  void BSpline::setOrder(unsigned int order){$/;"	f	class:ProtoMol::BSpline
setOrder	framework/base/Hermite.cpp	/^  void Hermite::setOrder(unsigned int order){$/;"	f	class:ProtoMol::Hermite
setOrder	framework/base/Lagrange.cpp	/^  void Lagrange::setOrder(unsigned int order){$/;"	f	class:ProtoMol::Lagrange
setParallel	framework/base/TimerStatistic.h	/^    static void setParallel(bool b) {myIsParallel=b;}$/;"	f	class:ProtoMol::TimerStatistic
setParameter	framework/forces/Force.h	/^    void setParameter(std::string& errMsg, const std::string& key, T val){$/;"	f	class:ProtoMol::Force
setParameter	framework/forces/Force.h	/^    void setParameter(std::string& errMsg, unsigned int index, T val){$/;"	f	class:ProtoMol::Force
setParameters	framework/forces/Force.cpp	/^  void Force::setParameters(string& errMsg, vector<Value> values){$/;"	f	class:ProtoMol::Force
setParameters	tools/rem/sequential/replica.cc	/^void Replica::setParameters(const vector<string>& parameters) {$/;"	f	class:Replica
setParametersBySwapping	framework/forces/Force.h	/^    void setParametersBySwapping(T* obj, std::string& errMsg, std::vector<Value> values){$/;"	f	class:ProtoMol::Force
setPipeSize	framework/parallel/Parallel-FD.cpp	/^  void Parallel::setPipeSize(int n){$/;"	f	class:ProtoMol::Parallel
setPipeSize	framework/parallel/Parallel.cpp	/^  void Parallel::setPipeSize(int n){$/;"	f	class:ProtoMol::Parallel
setPointer	framework/topology/AngleInfo.cpp	/^  void AngleInfo::setPointer(unsigned int atom) {$/;"	f	class:ProtoMol::AngleInfo
setProtomolAbort	framework/base/systemutilities.cpp	/^  void setProtomolAbort(void (*abortFunction)()){$/;"	f	namespace:ProtoMol
setProtomolEndSerial	framework/base/systemutilities.cpp	/^  void setProtomolEndSerial(void (*endSerialFunction)(bool)){$/;"	f	namespace:ProtoMol
setProtomolExit	framework/base/systemutilities.cpp	/^  void setProtomolExit(void (*exitFunction)()){$/;"	f	namespace:ProtoMol
setProtomolStartSerial	framework/base/systemutilities.cpp	/^  void setProtomolStartSerial(void (*startSerialFunction)(bool)){$/;"	f	namespace:ProtoMol
setRadius	framework/io/XFigWriter.cpp	/^  Real XFigWriter::setRadius(Real radius){$/;"	f	class:ProtoMol::XFigWriter
setReportLevel	framework/base/Report.h	/^      void setReportLevel(short level) {myReportLevel=level;}$/;"	f	class:ProtoMol::Report::MyStreamer
setSize	framework/io/XYZBinWriter.cpp	/^  void XYZBinWriter::setSize(unsigned int size){$/;"	f	class:ProtoMol::XYZBinWriter
setStream	framework/base/Report.cpp	/^    ostream* MyStreamer::setStream(ostream* a) {$/;"	f	class:ProtoMol::Report::MyStreamer
setTargetTemperature	tools/rem/sequential/replica.cc	/^void Replica::setTargetTemperature (double targetTemp) {$/;"	f	class:Replica
setText	framework/base/Configuration.cpp	/^  bool Configuration::setText(const std::string& keyword, const string& text){$/;"	f	class:ProtoMol::Configuration
setTimestep	framework/integrators/STSIntegrator.h	/^  inline Real STSIntegrator::setTimestep( Real newTimestep ) {$/;"	f	class:ProtoMol::STSIntegrator
setTimestep	framework/io/DCDTrajectoryWriter.cpp	/^  void DCDTrajectoryWriter::setTimestep(Real timestep){$/;"	f	class:ProtoMol::DCDTrajectoryWriter
setToZ	framework/io/XFigWriter.cpp	/^  Real XFigWriter::setToZ(Real toZ){$/;"	f	class:ProtoMol::XFigWriter
setTransformation	framework/io/XFigWriter.cpp	/^  Matrix3by3 XFigWriter::setTransformation(const Matrix3by3& mat){$/;"	f	class:ProtoMol::XFigWriter
setVisited	framework/topology/AngleInfo.cpp	/^  void AngleInfo::setVisited() {$/;"	f	class:ProtoMol::AngleInfo
set_angles	framework/topology/topologyutilities.cpp	/^  void set_angles (Stack<unsigned int> *nodeStack,vector<AngleInfo> *angles, bool lastIsInnerAtom, Real wholeAngle) {$/;"	f	namespace:ProtoMol
setf	framework/base/Report.cpp	/^    void MyStreamer::setf(std::ios::fmtflags flag){$/;"	f	class:ProtoMol::Report::MyStreamer
setf	framework/base/Report.cpp	/^    void MyStreamer::setf(std::ios::fmtflags flag, std::ios::fmtflags mask){$/;"	f	class:ProtoMol::Report::MyStreamer
setupConfig	tools/rem/sequential/replica.cc	/^void Replica::setupConfig() {$/;"	f	class:Replica
setupFirstConfig	tools/rem/sequential/replica.cc	/^void Replica::setupFirstConfig() {$/;"	f	class:Replica
shadowMod	framework/integrators/ShadowHMCIntegrator.h	/^            ModifierShadow *shadowMod;$/;"	m	class:ProtoMol::ShadowHMCIntegrator
shift	framework/base/systemutilities.h	/^  inline void shift(Real &a, Real &b, Real &c, const Real d) { $/;"	f	namespace:ProtoMol
shortRangeTerm	framework/forces/NonbondedMultiGridSystemForce.h	/^				     smooth>::shortRangeTerm(const RealTopologyType* realTopo, $/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
shrink	framework/base/systemutilities.h	/^  void shrink(T& t){$/;"	f	namespace:ProtoMol
sigma	framework/base/PAR.h	/^      Real sigma;          \/\/\/< minimum radius divided by 2$/;"	m	struct:ProtoMol::PAR::Nonbonded
sigma14	framework/base/PAR.h	/^      Real sigma14;         \/\/\/< VDW parameter minimum radius divided by 2$/;"	m	struct:ProtoMol::PAR::Nonbonded
sign	framework/base/mathutilities.h	/^  inline Real sign(Real a, Real b){$/;"	f	namespace:ProtoMol
sign	framework/base/mathutilities.h	/^  inline int sign(T a) {$/;"	f	namespace:ProtoMol
simType	framework/base/XSC.h	/^    std::string simType;$/;"	m	struct:ProtoMol::XSC
sincos	framework/base/mathutilities.cpp	/^  void sincos(Real alpha, Real& sinAlpha, Real& cosAlpha){$/;"	f	namespace:ProtoMol
size	compilerTests/pngTest.cpp	/^  unsigned int size() const{return 3*w*h;}$/;"	f	class:PPM
size	framework/base/Array_Fastest.h	/^    size_type size()       const { return m_nArrayElements; }$/;"	f	class:ProtoMol::Array
size	framework/base/Array_Fastest.h	/^    size_type size()  const { return m_NDimensions*m_SubArrayLen; }$/;"	f	class:ProtoMol::RefArray
size	framework/base/Array_Fastest.h	/^    size_type size()  const { return m_NDimensions; } $/;"	f	class:ProtoMol::RefArray
size	framework/base/Array_Fastest.h	/^    size_type size(size_t Dim) const $/;"	f	class:ProtoMol::Array
size	framework/base/Array_Fastest.h	/^    size_type size(size_t Dim) const $/;"	f	class:ProtoMol::RefArray
size	framework/base/Array_Fastest.h	/^    size_type size(size_t Dim) const$/;"	f	class:ProtoMol::RefArray
size	framework/base/Array_NoPartialSpecialization.h	/^      size_type size()  const { return m_pNDimensions[0]; } $/;"	f	class:ProtoMol::Array::RefArray
size	framework/base/Array_NoPartialSpecialization.h	/^      size_type size() const { return m_pNDimensions[0]*m_pSubArrayLen[0]; }$/;"	f	class:ProtoMol::Array::RefArray
size	framework/base/Array_NoPartialSpecialization.h	/^      size_type size(unsigned int Dim) const $/;"	f	class:ProtoMol::Array::RefArray
size	framework/base/Array_NoPartialSpecialization.h	/^    size_type size()       const { return m_nArrayElements; }$/;"	f	class:ProtoMol::Array
size	framework/base/Array_NoPartialSpecialization.h	/^    size_type size(unsigned int Dim) const $/;"	f	class:ProtoMol::Array
size	framework/base/Molecule.h	/^    size_t size(){return atoms.size();}$/;"	f	struct:ProtoMol::Molecule
size	framework/base/PDB.h	/^    size_t size() const {return coords.size();}$/;"	f	struct:ProtoMol::PDB
size	framework/base/PGM.h	/^    unsigned int size() const{return w*h;}$/;"	f	class:ProtoMol::PGM
size	framework/base/PPM.h	/^    unsigned int size() const{return 3*w*h;}$/;"	f	class:ProtoMol::PPM
size	framework/base/Value.h	/^      virtual unsigned int size() const{ return ValueTrait::size(holder);}$/;"	f	class:ProtoMol::Value::Holder
size	framework/base/Value.h	/^  inline unsigned int Value::size() const{$/;"	f	class:ProtoMol::Value
size	framework/base/ValueType.h	/^    static unsigned int size(RepType){ return 1;}$/;"	f	struct:ProtoMol::ValueTraits
size	framework/base/ValueType.h	/^    static unsigned int size(const RepType& v){ return v.size();}$/;"	f	struct:ProtoMol::ValueTraits
size	framework/base/ValueType.h	/^    static unsigned int size(const RepType&){ return 3;}$/;"	f	struct:ProtoMol::ValueTraits
size	framework/base/Vector3DBlock.h	/^    size_type size() const                                       {return vec.size();}              $/;"	f	class:ProtoMol::Vector3DBlock
size	framework/base/XYZ.h	/^    size_t size() const {return coords.size();}$/;"	f	struct:ProtoMol::XYZ
size	framework/integrators/Integrator.h	/^  inline int Integrator::size() const{$/;"	f	class:ProtoMol::Integrator
size	framework/topology/ArrayCellListStructure.h	/^    size_type      size()  const { return mySize;}$/;"	f	class:ProtoMol::ArrayCellListStructure
size	framework/topology/LennardJonesParameterTable.h	/^    int size() const {return myCurrentSize;}$/;"	f	class:ProtoMol::LennardJonesParameterTable
size_t	framework/base/Array_Fastest.h	/^    ArraySize(const size_t (&Dimensions)[N-1],size_t dim)$/;"	m	class:ProtoMol::ArraySize
size_t	framework/base/Array_Fastest.h	/^    bool resize(const size_t (&Dimensions)[N], const T & Init=T(), bool PreserveElems=false)$/;"	m	class:ProtoMol::Array
size_t	framework/base/Array_Fastest.h	/^    explicit Array<T,N>(const size_t (&Dimensions)[N], const T & Init=T())$/;"	m	class:ProtoMol::Array
size_type	framework/base/Array_Fastest.h	/^    typedef size_t    size_type;$/;"	t	class:ProtoMol::Array
size_type	framework/base/Array_Fastest.h	/^    typedef size_t    size_type;$/;"	t	class:ProtoMol::RefArray
size_type	framework/base/Array_NoPartialSpecialization.h	/^      typedef size_t    size_type;$/;"	t	class:ProtoMol::Array::RefArray
size_type	framework/base/Array_NoPartialSpecialization.h	/^    typedef size_t    size_type;$/;"	t	class:ProtoMol::Array
size_type	framework/base/Vector3DBlock.h	/^    typedef std::vector<Vector3D>::size_type                 size_type;                                  $/;"	t	class:ProtoMol::Vector3DBlock
size_type	framework/topology/ArrayCellListStructure.h	/^    typedef TContainer::size_type         size_type;       $/;"	t	class:ProtoMol::ArrayCellListStructure
slaveComm	framework/parallel/Parallel-FD.cpp	/^  static MPI_Comm  slaveComm  = MPI_COMM_NULL; \/\/ Not data member to avoid dependcies$/;"	v	file:
slaveComm	framework/parallel/Parallel.cpp	/^  static MPI_Comm  slaveComm  = MPI_COMM_NULL; \/\/ Not data member to avoid dependcies$/;"	v	file:
smooth	framework/forces/CoulombForce.h	/^      static Real smooth(Real r,Real \/*c*\/,Real cr)   {r=r*r*cr*cr;return (0.0078125*cr*(315.0-r*(420.0-r*(378.0-r*(180.0-r*35.0)))));}$/;"	f	class:ProtoMol::CoulombForce::C4
smooth	framework/forces/CoulombForce.h	/^      static Real smooth(Real r,Real \/*c*\/,Real cr)   {r=r*r*cr*cr;return (0.0625*cr*(35.0-r*(35.0-r*(21.0-5.0*r))));}$/;"	f	class:ProtoMol::CoulombForce::C3
smooth	framework/forces/CoulombForce.h	/^      static Real smooth(Real r,Real \/*c*\/,Real cr)   {r=r*r*cr*cr;return (cr*(1.875-r*(1.25-0.375*r)));}$/;"	f	class:ProtoMol::CoulombForce::C2
smooth	framework/forces/CoulombForce.h	/^      static Real smooth(Real r,Real \/*c*\/,Real cr)   {return (cr*(1.5-0.5*r*r*cr*cr));}$/;"	f	class:ProtoMol::CoulombForce::C1
smooth0	framework/forces/CoulombForce.h	/^      static Real smooth0(Real \/*c*\/,Real cr)         {return (1.5*cr);}$/;"	f	class:ProtoMol::CoulombForce::C1
smooth0	framework/forces/CoulombForce.h	/^      static Real smooth0(Real \/*c*\/,Real cr)         {return (1.875*cr);}$/;"	f	class:ProtoMol::CoulombForce::C2
smooth0	framework/forces/CoulombForce.h	/^      static Real smooth0(Real \/*c*\/,Real cr)         {return (2.1875*cr);}$/;"	f	class:ProtoMol::CoulombForce::C3
smooth0	framework/forces/CoulombForce.h	/^      static Real smooth0(Real \/*c*\/,Real cr)         {return (2.4609375*cr);}$/;"	f	class:ProtoMol::CoulombForce::C4
smoothKernel	framework/forces/CoulombForce.h	/^      static Real smoothKernel(Real r,Real c,Real cr) {return (r<c ?  smooth(r,c,cr) :  kernel(r));}$/;"	f	class:ProtoMol::CoulombForce::C1
smoothKernel	framework/forces/CoulombForce.h	/^      static Real smoothKernel(Real r,Real c,Real cr) {return (r<c ?  smooth(r,c,cr) :  kernel(r));}$/;"	f	class:ProtoMol::CoulombForce::C2
smoothKernel	framework/forces/CoulombForce.h	/^      static Real smoothKernel(Real r,Real c,Real cr) {return (r<c ?  smooth(r,c,cr) :  kernel(r));}$/;"	f	class:ProtoMol::CoulombForce::C3
smoothKernel	framework/forces/CoulombForce.h	/^      static Real smoothKernel(Real r,Real c,Real cr) {return (r<c ?  smooth(r,c,cr) :  kernel(r));}$/;"	f	class:ProtoMol::CoulombForce::C4
sock	framework/imd/IMDElf.h	/^    void *sock;$/;"	m	class:ProtoMol::IMDElf
sortForceString	framework/frontend/ForceFactoryDetails.cpp	/^  string  ForceFactoryDetails::sortForceString(const string& id) const{$/;"	f	class:ProtoMol::ForceFactoryDetails
splitForceString	framework/frontend/ForceFactoryDetails.cpp	/^  vector<string> ForceFactoryDetails::splitForceString(const string& id) const{$/;"	f	class:ProtoMol::ForceFactoryDetails
splitForceStringSorted	framework/frontend/ForceFactoryDetails.cpp	/^  vector<string> ForceFactoryDetails::splitForceStringSorted(const string& id) const{$/;"	f	class:ProtoMol::ForceFactoryDetails
splitRangeArea	framework/base/mathutilities.cpp	/^  void splitRangeArea(unsigned int p, unsigned int from, unsigned int to, $/;"	f	namespace:ProtoMol
splitRangeQuadratic	framework/base/mathutilities.cpp	/^  void splitRangeQuadratic(unsigned int p, unsigned int from, unsigned int to, $/;"	f	namespace:ProtoMol
splitString	framework/base/stringutilities.cpp	/^  vector<string> splitString(const string& id){$/;"	f	namespace:ProtoMol
springConstant	framework/topology/Bond.h	/^    Real springConstant;$/;"	m	class:ProtoMol::Bond
square	framework/base/mathutilities.h	/^  inline Real square(Real x) {return x*x;}$/;"	f	namespace:ProtoMol
stageNumber	framework/base/Atom.h	/^    int stageNumber;$/;"	m	struct:ProtoMol::Atom
start	framework/base/Cycles.h	/^    void start(){if( myRunningFlag) return;myRunningFlag = true ; myStartTime = Private::getticks();}$/;"	f	class:ProtoMol::Cycles
start	framework/base/Timer.cpp	/^  void Timer::start()$/;"	f	class:ProtoMol::Timer
stateA	framework/frontend/OutputState.h	/^    std::vector< orderParam > stateA;$/;"	m	class:ProtoMol::OutputState
stateB	framework/frontend/OutputState.h	/^    std::vector< orderParam > stateB;$/;"	m	class:ProtoMol::OutputState
std	framework/base/sstream_local.h	/^namespace std$/;"	n
stop	framework/base/Cycles.h	/^    void stop() {if(!myRunningFlag) return;myEndTime = Private::getticks(); myRunningFlag = false; }$/;"	f	class:ProtoMol::Cycles
stop	framework/base/Timer.cpp	/^  void Timer::stop()$/;"	f	class:ProtoMol::Timer
str	framework/base/BSplineType.cpp	/^  const string BSplineEnum::str[static_cast<int>(LAST)-static_cast<int>(FIRST)] = {$/;"	m	class:ProtoMol::BSplineEnum	file:
str	framework/base/BSplineType.h	/^    static const std::string str[];$/;"	m	class:ProtoMol::BSplineEnum
str	framework/base/ConstraintValueType.cpp	/^  const string ConstraintValueEnum::str[static_cast<int>(LAST) - static_cast<int>(FIRST)] = {$/;"	m	class:ProtoMol::ConstraintValueEnum	file:
str	framework/base/ConstraintValueType.h	/^    static const std::string str[];$/;"	m	class:ProtoMol::ConstraintValueEnum
str	framework/base/ValueType.cpp	/^  const string ValueEnum::str[static_cast<int>(LAST) - static_cast<int>(FIRST)] = {$/;"	m	class:ProtoMol::ValueEnum	file:
str	framework/base/ValueType.h	/^      std::string str;$/;"	m	struct:ProtoMol::ValueEnum::Enum2ValueType
str	framework/base/ValueType.h	/^    static const std::string str[];$/;"	m	class:ProtoMol::ValueEnum
str	framework/base/sstream_local.h	/^    std::string str() const$/;"	f	class:std::stringbuf
str	framework/base/sstream_local.h	/^    std::string str() const$/;"	f	class:std::stringstreambase
str	framework/base/sstream_local.h	/^    void str(const std::string& s)$/;"	f	class:std::stringbuf
str	framework/base/sstream_local.h	/^    void str(const std::string& s)$/;"	f	class:std::stringstreambase
str	framework/frontend/InputPosVelType.cpp	/^  const string InputPosVelEnum::str[static_cast<int>(LAST) - static_cast<int>(FIRST)] = {$/;"	m	class:ProtoMol::InputPosVelEnum	file:
str	framework/frontend/InputPosVelType.h	/^    static const std::string str[];$/;"	m	class:ProtoMol::InputPosVelEnum
str	framework/integrators/PaulTrapIntegrator.cpp	/^  const string ThermostatEnum::str[static_cast<int>(LAST)-static_cast<int>(FIRST)] = {$/;"	m	class:ProtoMol::ThermostatEnum	file:
str	framework/integrators/PaulTrapIntegrator.h	/^    static const std::string str[];$/;"	m	class:ProtoMol::ThermostatEnum
str	framework/parallel/ParallelType.cpp	/^  const string ParallelEnum::str[static_cast<int>(LAST)-static_cast<int>(FIRST)] = {$/;"	m	class:ProtoMol::ParallelEnum	file:
str	framework/parallel/ParallelType.h	/^    static const std::string str[];$/;"	m	class:ProtoMol::ParallelEnum
str	framework/topology/ExclusionType.cpp	/^  const string ExclusionEnum::str[static_cast<int>(LAST) - static_cast<int>(FIRST)] = {$/;"	m	class:ProtoMol::ExclusionEnum	file:
str	framework/topology/ExclusionType.h	/^    static const std::string str[];$/;"	m	class:ProtoMol::ExclusionEnum
strReplace	tools/rem/sequential/replica.cc	/^bool Replica::strReplace(string &str, const string& oldStr, const string& newStr) {$/;"	f	class:Replica
stringbuf	framework/base/sstream_local.h	/^    explicit stringbuf(const std::string &s, int which=ios::in|ios::out) :$/;"	f	class:std::stringbuf
stringbuf	framework/base/sstream_local.h	/^    explicit stringbuf(int which=ios::in|ios::out) :$/;"	f	class:std::stringbuf
stringbuf	framework/base/sstream_local.h	/^  class stringbuf : public streambuf$/;"	c	namespace:std
stringstream	framework/base/sstream_local.h	/^    stringstream(const std::string &s, int which=ios::in|ios::out) :$/;"	f	class:std::stringstream
stringstream	framework/base/sstream_local.h	/^    stringstream(int which=ios::in|ios::out) :$/;"	f	class:std::stringstream
stringstream	framework/base/sstream_local.h	/^  class stringstream : public stringstreambase, public iostream {$/;"	c	namespace:std
stringstreambase	framework/base/sstream_local.h	/^    stringstreambase(const std::string& s, int which) :$/;"	f	class:std::stringstreambase
stringstreambase	framework/base/sstream_local.h	/^    stringstreambase(int which) :$/;"	f	class:std::stringstreambase
stringstreambase	framework/base/sstream_local.h	/^  class stringstreambase : virtual public ios {$/;"	c	namespace:std
subtract	framework/base/Vector3D.h	/^    Vector3D subtract(const Vector3D& b) const {return (*this)-b;}$/;"	f	struct:ProtoMol::Vector3D
sum	framework/base/Vector3DBlock.cpp	/^  Vector3D Vector3DBlock::sum() const{$/;"	f	class:ProtoMol::Vector3DBlock
sumItems	framework/base/mathutilities.h	/^    Real sumItems;$/;"	m	class:ProtoMol::WindowAve
sumQ	framework/base/MultiGrid.h	/^  inline Real MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::sumQ(int level){$/;"	f	class:ProtoMol::MultiGrid
sumV	framework/base/MultiGrid.h	/^  inline Real MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::sumV(int level){$/;"	f	class:ProtoMol::MultiGrid
surfaceDipoleTerm	framework/forces/NonbondedFullEwaldSystemForce.h	/^				     TSwitchingFunction>::surfaceDipoleTerm(const RealTopologyType* realTopo,$/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
surfaceDipoleTerm	framework/forces/NonbondedPMEwaldSystemForce.h	/^				   TSwitchingFunction>::surfaceDipoleTerm(const RealTopologyType* realTopo,$/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
swap	framework/base/Array_Fastest.h	/^    void swap(Array<T,N> & A)$/;"	f	class:ProtoMol::Array
swap	framework/base/Array_NoPartialSpecialization.h	/^    void swap(Array<T,N> & A)$/;"	f	class:ProtoMol::Array
swap	framework/base/Value.cpp	/^  Value & Value::swap(Value & rhs){$/;"	f	class:ProtoMol::Value
swap	framework/base/Vector3DBlock.h	/^    void swap(Vector3DBlock& x)                                  {       vec.swap(x.vec);}                    $/;"	f	class:ProtoMol::Vector3DBlock
swap	framework/base/Vector3DBlock.h	/^inline void swap(ProtoMol::Vector3DBlock& a, ProtoMol::Vector3DBlock& b) {a.swap(b);}$/;"	f
swap	framework/frontend/InputValue.h	/^    InputValue & swap(InputValue & rhs){$/;"	f	class:ProtoMol::InputValue
swap4	framework/imd/imd.cpp	/^    static void swap4(char *data, int ndata) {$/;"	f	namespace:ProtoMol::IMD	file:
swapBytes	framework/base/systemutilities.h	/^  void swapBytes(T& t){$/;"	f	namespace:ProtoMol
swap_header	framework/imd/imd.cpp	/^    static void swap_header(IMDheader *header) {$/;"	f	namespace:ProtoMol::IMD	file:
swcoef	framework/topology/CnSwitchingFunction.cpp	/^    Real CnSwitchingFunction::swcoef[][MAXEQNN] = {$/;"	m	class:ProtoMol::CnSwitchingFunction	file:
swcoef	framework/topology/CnSwitchingFunction.h	/^    static Real swcoef[][MAXEQNN],$/;"	m	class:ProtoMol::CnSwitchingFunction
switchingFunction	framework/forces/CoulombEwaldRealTableForce.h	/^    TSwitchingFunction switchingFunction;$/;"	m	class:ProtoMol::CoulombEwaldRealTableForce
switchingFunction	framework/forces/CoulombTableForce.h	/^    TSwitchingFunction switchingFunction;$/;"	m	class:ProtoMol::CoulombTableForce
switchingFunction	framework/forces/ElectricFieldSystemForce.h	/^    TSwitchingFunction switchingFunction;$/;"	m	class:ProtoMol::ElectricFieldSystemForce
switchingFunction	framework/forces/LennardJonesTableForce.h	/^    TSwitchingFunction switchingFunction;$/;"	m	class:ProtoMol::LennardJonesTableForce
switchingFunction	framework/forces/NonbondedFullEwaldSystemForce.h	/^    TSwitchingFunction switchingFunction;$/;"	m	class:ProtoMol::NonbondedFullEwaldSystemForce
switchingFunction	framework/forces/NonbondedPMEwaldSystemForce.h	/^    TSwitchingFunction switchingFunction;$/;"	m	class:ProtoMol::NonbondedPMEwaldSystemForce
switchingFunction	framework/forces/OneAtomPair.h	/^    TSwitchingFunction switchingFunction;$/;"	m	class:ProtoMol::OneAtomPair
switchingFunction	framework/forces/OneAtomPairFull.h	/^    TSwitchingFunction switchingFunction;$/;"	m	class:ProtoMol::OneAtomPairFull
switchingFunction	framework/forces/OneMollyPair.h	/^    TSwitchingFunction switchingFunction;$/;"	m	class:ProtoMol::OneMollyPair
switchingFunctionFirst	framework/forces/OneAtomPairTwo.h	/^    TSwitchingFunctionFirst switchingFunctionFirst;$/;"	m	class:ProtoMol::OneAtomPairTwo
switchingFunctionFirst	framework/forces/OneAtomPairTwoFull.h	/^    TSwitchingFunctionFirst switchingFunctionFirst;$/;"	m	class:ProtoMol::OneAtomPairTwoFull
switchingFunctionFirst	framework/forces/OneMollyPairTwo.h	/^    TSwitchingFunctionFirst switchingFunctionFirst;$/;"	m	class:ProtoMol::OneMollyPairTwo
switchingFunctionSecond	framework/forces/OneAtomPairTwo.h	/^    TSwitchingFunctionSecond switchingFunctionSecond;$/;"	m	class:ProtoMol::OneAtomPairTwo
switchingFunctionSecond	framework/forces/OneAtomPairTwoFull.h	/^    TSwitchingFunctionSecond switchingFunctionSecond;$/;"	m	class:ProtoMol::OneAtomPairTwoFull
switchingFunctionSecond	framework/forces/OneMollyPairTwo.h	/^    TSwitchingFunctionSecond switchingFunctionSecond;$/;"	m	class:ProtoMol::OneMollyPairTwo
symbol	framework/base/PDB.h	/^      std::string symbol;	   \/\/\/< element_symbol	   $/;"	m	struct:ProtoMol::PDB::Atom
symbolName	framework/base/AtomType.h	/^    std::string symbolName; \/\/\/< The symbol untity name of this atom type.$/;"	m	struct:ProtoMol::AtomType
sync	framework/base/sstream_local.h	/^inline int std::stringbuf::sync()$/;"	f	class:std::stringbuf
sync	framework/parallel/Parallel-FD.cpp	/^  void Parallel::sync(){$/;"	f	class:ProtoMol::Parallel
sync	framework/parallel/Parallel.cpp	/^  void Parallel::sync(){$/;"	f	class:ProtoMol::Parallel
syncSlave	framework/parallel/Parallel-FD.cpp	/^  void Parallel::syncSlave(){$/;"	f	class:ProtoMol::Parallel
syncSlave	framework/parallel/Parallel.cpp	/^  void Parallel::syncSlave(){$/;"	f	class:ProtoMol::Parallel
tailString	framework/base/stringutilities.cpp	/^  string tailString(const string& word){$/;"	f	namespace:ProtoMol
tempFactor	framework/base/PDB.h	/^      Real        tempFactor;	   \/\/\/< temp_factor	   $/;"	m	struct:ProtoMol::PDB::Atom
temperature	framework/frontend/OutputCache.cpp	/^  Real OutputCache::temperature() const{$/;"	f	class:ProtoMol::OutputCache
temperature	framework/topology/topologyutilities.cpp	/^  Real temperature(Real kineticEnergy, $/;"	f	namespace:ProtoMol
temperature	framework/topology/topologyutilities.cpp	/^  Real temperature(const GenericTopology* topology,$/;"	f	namespace:ProtoMol
temperatureForAtomType	framework/topology/topologyutilities.cpp	/^  Real temperatureForAtomType(const GenericTopology* topology, $/;"	f	namespace:ProtoMol
temperatureForNonWater	framework/frontend/OutputCache.cpp	/^  Real OutputCache::temperatureForNonWater() const {$/;"	f	class:ProtoMol::OutputCache
temperatureForNonWater	framework/topology/topologyutilities.cpp	/^  Real temperatureForNonWater(const GenericTopology* topology,$/;"	f	namespace:ProtoMol
temperatureForWater	framework/frontend/OutputCache.cpp	/^  Real OutputCache::temperatureForWater() const {$/;"	f	class:ProtoMol::OutputCache
temperatureForWater	framework/topology/topologyutilities.cpp	/^  Real temperatureForWater(const GenericTopology* topology,$/;"	f	namespace:ProtoMol
ters	framework/base/PDB.h	/^    std::vector<Ter> ters;$/;"	m	struct:ProtoMol::PDB
text	framework/base/Parameter.h	/^    std::string text;$/;"	m	struct:ProtoMol::Parameter
text	framework/base/simpleTypes.h	/^    std::string text;$/;"	m	struct:ProtoMol::Text
text	framework/frontend/HelpTextFactory.h	/^    std::string            text;$/;"	m	struct:ProtoMol::HelpText
the_beginning	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    CubicCellManager::CellListStructure::const_iterator i,j,the_beginning,the_end;$/;"	m	class:ProtoMol::CellListEnumerator
the_beginning	framework/topology/CellListEnumerator_standard.h	/^    CubicCellManager::CellListStructure::const_iterator i,j,the_beginning,the_end;$/;"	m	class:ProtoMol::CellListEnumerator
the_counter	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    int the_first, the_last, the_counter;$/;"	m	class:ProtoMol::CellListEnumerator
the_counter	framework/topology/CellListEnumerator_standard.h	/^    int the_first, the_last, the_counter;$/;"	m	class:ProtoMol::CellListEnumerator
the_end	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    CubicCellManager::CellListStructure::const_iterator i,j,the_beginning,the_end;$/;"	m	class:ProtoMol::CellListEnumerator
the_end	framework/topology/CellListEnumerator_standard.h	/^    CubicCellManager::CellListStructure::const_iterator i,j,the_beginning,the_end;$/;"	m	class:ProtoMol::CellListEnumerator
the_first	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    int the_first, the_last, the_counter;$/;"	m	class:ProtoMol::CellListEnumerator
the_first	framework/topology/CellListEnumerator_standard.h	/^    int the_first, the_last, the_counter;$/;"	m	class:ProtoMol::CellListEnumerator
the_last	framework/topology/CellListEnumerator_periodicBoundaries.h	/^    int the_first, the_last, the_counter;$/;"	m	class:ProtoMol::CellListEnumerator
the_last	framework/topology/CellListEnumerator_standard.h	/^    int the_first, the_last, the_counter;$/;"	m	class:ProtoMol::CellListEnumerator
theta	framework/base/BSpline.h	/^    Real* theta; \/\/\/< Bk$/;"	m	class:ProtoMol::BSpline
theta	framework/base/Hermite.h	/^    Real* theta;$/;"	m	class:ProtoMol::Hermite
theta	framework/base/Lagrange.h	/^    Real* theta;  \/\/\/< lk$/;"	m	class:ProtoMol::Lagrange
ticks	framework/base/Cycles.h	/^      typedef LARGE_INTEGER ticks;$/;"	t	namespace:ProtoMol::Private
ticks	framework/base/Cycles.h	/^      typedef ULONG64 ticks;$/;"	t	namespace:ProtoMol::Private
ticks	framework/base/Cycles.h	/^      typedef struct timespec ticks;$/;"	t	namespace:ProtoMol::Private
ticks	framework/base/Cycles.h	/^      typedef timebasestruct_t ticks;$/;"	t	namespace:ProtoMol::Private
ticks	framework/base/Cycles.h	/^      typedef unsigned int ticks;$/;"	t	namespace:ProtoMol::Private
ticks	framework/base/Cycles.h	/^      typedef unsigned long long ticks;$/;"	t	namespace:ProtoMol::Private
ticks	framework/base/Cycles.h	/^      typedef unsigned long ticks;$/;"	t	namespace:ProtoMol::Private
ticks	framework/base/Cycles.h	/^    typedef Private::ticks ticks;$/;"	t	class:ProtoMol::Cycles
ticks	framework/base/Cycles.h	/^    typedef hrtime_t ticks;$/;"	t	namespace:ProtoMol::Private
ticks	framework/base/Cycles.h	/^    typedef long long ticks;$/;"	t	namespace:ProtoMol::Private
ticks	framework/base/Cycles.h	/^    typedef unsigned long long ticks;$/;"	t	namespace:ProtoMol::Private
time	framework/frontend/OutputCache.cpp	/^  Real OutputCache::time() const{$/;"	f	class:ProtoMol::OutputCache
time	framework/topology/GenericTopology.h	/^    mutable Real time;$/;"	m	class:ProtoMol::GenericTopology
timeout	framework/imd/IMDElf.h	/^    int timeout;$/;"	m	class:ProtoMol::IMDElf
timer	framework/base/TimerStatistic.cpp	/^  Timer TimerStatistic::timer[static_cast<int>(LAST)-static_cast<int>(FIRST)];$/;"	m	class:ProtoMol::TimerStatistic	file:
timer	framework/base/TimerStatistic.h	/^    static Timer timer[];$/;"	m	class:ProtoMol::TimerStatistic
toBool	framework/base/stringutilities.cpp	/^  bool toBool(const string& word){$/;"	f	namespace:ProtoMol
toBool	framework/base/stringutilities.cpp	/^  bool toBool(const string& word, bool &b){$/;"	f	namespace:ProtoMol
toInt	framework/base/stringutilities.cpp	/^  bool toInt(const string& word, int &i){$/;"	f	namespace:ProtoMol
toInt	framework/base/stringutilities.cpp	/^  int toInt(const string& word){$/;"	f	namespace:ProtoMol
toReal	framework/base/stringutilities.cpp	/^  Real toReal(const string& word){$/;"	f	namespace:ProtoMol
toReal	framework/base/stringutilities.cpp	/^  bool toReal(const string& word, Real &r){$/;"	f	namespace:ProtoMol
toString	framework/base/stringutilities.cpp	/^  string toString(Real x){$/;"	f	namespace:ProtoMol
toString	framework/base/stringutilities.cpp	/^  string toString(Real x,unsigned int n, unsigned int m){$/;"	f	namespace:ProtoMol
toString	framework/base/stringutilities.cpp	/^  string toString(bool x){$/;"	f	namespace:ProtoMol
toString	framework/base/stringutilities.cpp	/^  string toString(const Vector3D& c){$/;"	f	namespace:ProtoMol
toString	framework/base/stringutilities.cpp	/^  string toString(const vector<Real>& v){$/;"	f	namespace:ProtoMol
toString	framework/base/stringutilities.h	/^  inline const std::string & toString(const std::string& x) {return x;}$/;"	f	namespace:ProtoMol
toString	framework/base/stringutilities.h	/^  inline std::string toString(T x){$/;"	f	namespace:ProtoMol
toStringGeneric	framework/base/stringutilities.cpp	/^  inline string toStringGeneric(T x){$/;"	f	namespace:ProtoMol
toUInt	framework/base/stringutilities.cpp	/^  bool toUInt(const string& word, unsigned int &i){$/;"	f	namespace:ProtoMol
toUInt	framework/base/stringutilities.cpp	/^  unsigned int toUInt(const string& word){$/;"	f	namespace:ProtoMol
toVector	framework/base/stringutilities.cpp	/^  bool toVector(const string& word, vector<Real> &v){$/;"	f	namespace:ProtoMol
toVector	framework/base/stringutilities.cpp	/^  vector<Real> toVector(const string& word){$/;"	f	namespace:ProtoMol
toVector3D	framework/base/stringutilities.cpp	/^  Vector3D toVector3D(const string& word){$/;"	f	namespace:ProtoMol
toVector3D	framework/base/stringutilities.cpp	/^  bool toVector3D(const string& word, Vector3D &c){$/;"	f	namespace:ProtoMol
top	framework/integrators/Integrator.cpp	/^  Integrator* Integrator::top(){$/;"	f	class:ProtoMol::Integrator
top	framework/integrators/Integrator.cpp	/^  const Integrator* Integrator::top() const{$/;"	f	class:ProtoMol::Integrator
totalEnergy	framework/frontend/OutputCache.cpp	/^  Real OutputCache::totalEnergy() const{$/;"	f	class:ProtoMol::OutputCache
trajectory	framework/base/ScalarStructure.cpp	/^  bool ScalarStructure::trajectory(bool doTrajectory){$/;"	f	class:ProtoMol::ScalarStructure
trajectory	framework/base/ScalarStructure.h	/^    bool trajectory() const {return myDoTrajectory;}$/;"	f	class:ProtoMol::ScalarStructure
transpose	framework/base/Matrix3by3.cpp	/^  void Matrix3by3::transpose() $/;"	f	class:ProtoMol::Matrix3by3
transpose	framework/base/Matrix3by3.cpp	/^  void Matrix3by3::transpose(const Matrix3by3& tm) $/;"	f	class:ProtoMol::Matrix3by3
transposed	framework/base/Matrix3by3.cpp	/^  Matrix3by3 Matrix3by3::transposed() const $/;"	f	class:ProtoMol::Matrix3by3
transposed	framework/base/ReducedHessAngle.cpp	/^  ReducedHessAngle ReducedHessAngle::transposed()$/;"	f	class:ProtoMol::ReducedHessAngle
trate	framework/imd/IMDElf.h	/^    int trate;$/;"	m	class:ProtoMol::IMDElf
tryFormat	framework/frontend/InputPosVel.cpp	/^  bool InputPosVel::tryFormat(InputPosVelType::Enum type){$/;"	f	class:ProtoMol::InputPosVel
tryFormat	framework/io/AMBERReader.cpp	/^  bool AMBERReader::tryFormat(){    \/\/tryFormat check file format$/;"	f	class:ProtoMol::AMBERReader
tryFormat	framework/io/CRDReader.cpp	/^  bool CRDReader::tryFormat(){$/;"	f	class:ProtoMol::CRDReader
tryFormat	framework/io/ConfigurationReader.cpp	/^  bool ConfigurationReader::tryFormat(){$/;"	f	class:ProtoMol::ConfigurationReader
tryFormat	framework/io/DCDTrajectoryReader.cpp	/^  bool DCDTrajectoryReader::tryFormat(){$/;"	f	class:ProtoMol::DCDTrajectoryReader
tryFormat	framework/io/PARReader.cpp	/^  bool PARReader::tryFormat(){$/;"	f	class:ProtoMol::PARReader
tryFormat	framework/io/PDBReader.cpp	/^  bool PDBReader::tryFormat(){$/;"	f	class:ProtoMol::PDBReader
tryFormat	framework/io/PGMReader.cpp	/^  bool PGMReader::tryFormat(){$/;"	f	class:ProtoMol::PGMReader
tryFormat	framework/io/PPMReader.cpp	/^  bool PPMReader::tryFormat(){$/;"	f	class:ProtoMol::PPMReader
tryFormat	framework/io/PSFReader.cpp	/^  bool PSFReader::tryFormat(){$/;"	f	class:ProtoMol::PSFReader
tryFormat	framework/io/REMConfigurationReader.cpp	/^  bool REMConfigurationReader::tryFormat(){$/;"	f	class:ProtoMol::REMConfigurationReader
tryFormat	framework/io/TempFileReader.cpp	/^  bool TempFileReader::tryFormat() {$/;"	f	class:ProtoMol::TempFileReader
tryFormat	framework/io/XYZBinReader.cpp	/^  bool XYZBinReader::tryFormat(){$/;"	f	class:ProtoMol::XYZBinReader
tryFormat	framework/io/XYZReader.cpp	/^  bool XYZReader::tryFormat(){$/;"	f	class:ProtoMol::XYZReader
tryFormat	framework/io/XYZTrajectoryReader.cpp	/^  bool XYZTrajectoryReader::tryFormat(){$/;"	f	class:ProtoMol::XYZTrajectoryReader
tstep	framework/imd/imd.h	/^      int32 tstep;$/;"	m	struct:ProtoMol::IMD::<anonymous>
type	framework/base/Atom.h	/^    int type;$/;"	m	struct:ProtoMol::Atom
type	framework/base/Molecule.h	/^    unsigned int type, newtype;$/;"	m	struct:ProtoMol::Molecule
type	framework/base/Value.h	/^      virtual const std::type_info & type() const { return typeid(ValueTrait);}$/;"	f	class:ProtoMol::Value::Holder
type	framework/base/Value.h	/^  inline const std::type_info & Value::type() const{$/;"	f	class:ProtoMol::Value
type	framework/base/typeSelection.h	/^									     Real>::type,size>::type type;$/;"	t	struct:ProtoMol::TypeSelection::Float
type	framework/base/typeSelection.h	/^									     typename Private::SelectType<size,long,long long>::type>::type,size>::type type;$/;"	t	struct:ProtoMol::TypeSelection::Int
type	framework/base/typeSelection.h	/^      typedef  typename SelectTypeCheckHelper<sizeof(A)==size,A>::type type;$/;"	t	struct:ProtoMol::Private::SelectTypeCheck
type	framework/base/typeSelection.h	/^      typedef  typename SelectTypeHelper<sizeof(A)==size,A,B>::type type;$/;"	t	struct:ProtoMol::Private::SelectType
type	framework/base/typeSelection.h	/^      typedef A type;$/;"	t	struct:ProtoMol::Private::SelectTypeCheckHelper
type	framework/base/typeSelection.h	/^      typedef A type;$/;"	t	struct:ProtoMol::Private::SelectTypeHelper
type	framework/base/typeSelection.h	/^      typedef B type;$/;"	t	struct:ProtoMol::Private::SelectTypeHelper
type	framework/imd/imd.cpp	/^      int32 type;$/;"	m	struct:ProtoMol::IMD::<anonymous>	file:
ub_flag	framework/base/PAR.h	/^      bool ub_flag;      $/;"	m	struct:ProtoMol::PAR::Angle
uncache	framework/forces/CompareForce.cpp	/^  void CompareForce::uncache(){$/;"	f	class:ProtoMol::CompareForce
uncache	framework/forces/Force.h	/^    virtual void uncache(){};$/;"	f	class:ProtoMol::Force
uncache	framework/forces/ForceGroup.cpp	/^  void ForceGroup::uncache(){$/;"	f	class:ProtoMol::ForceGroup
uncache	framework/forces/NonbondedFullEwaldSystemForce.h	/^    virtual void uncache(){myCached=false;};$/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
uncache	framework/forces/NonbondedFullSystemForce.h	/^    virtual void uncache(){myCached=false;};$/;"	f	class:ProtoMol::NonbondedFullSystemForce
uncache	framework/forces/NonbondedMultiGridSystemForce.h	/^    virtual void uncache(){myCached=false;};$/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
uncache	framework/forces/NonbondedPMEwaldSystemForce.h	/^    virtual void uncache(){myCached=false;};$/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
uncache	framework/forces/NonbondedSimpleFullSystemForce.h	/^    virtual void uncache(){myCached=false;};$/;"	f	class:ProtoMol::NonbondedSimpleFullSystemForce
uncache	framework/forces/PaulTrapExtendedForce.h	/^    virtual void uncache(){myCached=false;};$/;"	f	class:ProtoMol::PaulTrapExtendedForce
uncache	framework/forces/TimeForce.cpp	/^  void TimeForce::uncache(){$/;"	f	class:ProtoMol::TimeForce
uncache	framework/frontend/OutputCache.cpp	/^  void OutputCache::uncache() const{$/;"	f	class:ProtoMol::OutputCache
uncache	framework/imd/HapticSystemForce.h	/^    virtual void uncache(){myCached=false;};$/;"	f	class:ProtoMol::HapticSystemForce
uncache	framework/integrators/Integrator.cpp	/^  void Integrator::uncache(){$/;"	f	class:ProtoMol::Integrator
uncache	framework/topology/ArrayCellListStructure.h	/^    void uncache(){valid = false;}$/;"	f	class:ProtoMol::ArrayCellListStructure
uncacheCellList	framework/topology/Topology.h	/^    virtual void uncacheCellList(){cellLists.uncache();}$/;"	f	class:ProtoMol::Topology
undefined	framework/base/Value.h	/^    static const Undefined* undefined; \/\/\/< Undefined value$/;"	m	class:ProtoMol::Value
underflow	framework/base/sstream_local.h	/^inline int std::stringbuf::underflow()$/;"	f	class:std::stringbuf
uniqueForceString	framework/frontend/ForceFactoryDetails.cpp	/^  string  ForceFactoryDetails::uniqueForceString(const string& id) const{$/;"	f	class:ProtoMol::ForceFactoryDetails
unpauseCalc	framework/integrators/ModifierShadow.h	/^    inline void ModifierShadow::unpauseCalc() {$/;"	f	class:ProtoMol::ModifierShadow
unregisterAllExemplars	framework/frontend/Factory.h	/^    static void unregisterAllExemplars(){$/;"	f	class:ProtoMol::Factory
unregisterAllExemplars	framework/frontend/HelpTextFactory.cpp	/^  void HelpTextFactory::unregisterAllExemplars(){$/;"	f	class:ProtoMol::HelpTextFactory
unregisterExemplar	framework/frontend/Factory.h	/^    static bool unregisterExemplar(const std::string& id){$/;"	f	class:ProtoMol::Factory
unregisterExemplar	framework/frontend/HelpTextFactory.cpp	/^  bool HelpTextFactory::unregisterExemplar(const string& id){$/;"	f	class:ProtoMol::HelpTextFactory
unregisterKeyword	framework/base/Configuration.cpp	/^  void Configuration::unregisterKeyword(const std::string& keyword){$/;"	f	class:ProtoMol::Configuration
updateB_Bx	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  void BSplineMOLLYIntegrator::updateB_Bx() {$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
updateB_Bx_Px_for1Kick	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  void BSplineMOLLYIntegrator::updateB_Bx_Px_for1Kick() {$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
updateB_Bx_Px_for1stHalfKick	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  void BSplineMOLLYIntegrator::updateB_Bx_Px_for1stHalfKick(){$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
updateBeta	framework/integrators/ImpulseIntegrator.cpp	/^    void ImpulseIntegrator::updateBeta( Real dt ) {$/;"	f	class:ProtoMol::ImpulseIntegrator
updateBeta	framework/integrators/Integrator.h	/^  inline void Integrator::updateBeta( Real timestep ) {};$/;"	f	class:ProtoMol::Integrator
updateBeta	framework/integrators/LeapfrogIntegrator.cpp	/^    void LeapfrogIntegrator::updateBeta( Real dt ) {$/;"	f	class:ProtoMol::LeapfrogIntegrator
updateCache	framework/frontend/ForceFactoryDetails.cpp	/^  void ForceFactoryDetails::updateCache() const{$/;"	f	class:ProtoMol::ForceFactoryDetails
updateCache	framework/topology/ArrayCellListStructure.cpp	/^  void ArrayCellListStructure::updateCache(){    $/;"	f	class:ProtoMol::ArrayCellListStructure
updateCache	framework/topology/CubicCellManager.cpp	/^  void CubicCellManager::updateCache(CellListStructure& cellList) const{$/;"	f	class:ProtoMol::CubicCellManager
updateCellLists	framework/topology/Topology.h	/^    void updateCellLists(const Vector3DBlock* positions) const{$/;"	f	class:ProtoMol::Topology
updateSize	framework/base/MultiGrid.h	/^  void MultiGrid<TInterpolation,TKernel,pbcX,pbcY,pbcZ>::updateSize(Vector3D min, Vector3D max){$/;"	f	class:ProtoMol::MultiGrid
updateXx	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  void BSplineMOLLYIntegrator::updateXx() {$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
uppercase	framework/base/stringutilities.cpp	/^  string uppercase (const string& word){$/;"	f	namespace:ProtoMol
ureyBradleyConstant	framework/topology/Angle.h	/^    Real ureyBradleyConstant;$/;"	m	class:ProtoMol::Angle
ureyBradleyRestLength	framework/topology/Angle.h	/^    Real ureyBradleyRestLength;$/;"	m	class:ProtoMol::Angle
v	compilerTests/glutTest.cpp	/^static GLfloat v[8][3];  \/* Will be filled in with X,Y,Z vertexes. *\/$/;"	v	file:
v	tools/bccAnalyzer.cpp	/^  Vector3D v;  $/;"	m	class:Vector3DIdx	file:
v0	tools/bccAnalyzer.cpp	/^  Vector3DIdx v0,c,v1;$/;"	m	class:PairVector3D	file:
v1	tools/bccAnalyzer.cpp	/^  Vector3DIdx v0,c,v1;$/;"	m	class:PairVector3D	file:
valid	framework/base/AbstractEnumType.h	/^    bool valid() const {return (myType>T::FIRST && myType<T::LAST);}$/;"	f	class:ProtoMol::AbstractEnumType
valid	framework/base/AbstractEnumType.h	/^    static bool valid(Enum e){return (e>T::FIRST && e<T::LAST);}$/;"	f	class:ProtoMol::AbstractEnumType
valid	framework/base/Configuration.cpp	/^  bool Configuration::valid(const string& keyword) const{$/;"	f	class:ProtoMol::Configuration
valid	framework/base/Value.h	/^      virtual bool valid() const {return ok;}$/;"	f	class:ProtoMol::Value::Holder
valid	framework/base/Value.h	/^  inline bool Value::valid() const { $/;"	f	class:ProtoMol::Value
valid	framework/frontend/InputValue.h	/^    bool valid() const{return myValue.valid();}$/;"	f	class:ProtoMol::InputValue
valid	framework/topology/ArrayCellListStructure.h	/^    bool        valid;$/;"	m	class:ProtoMol::ArrayCellListStructure
validConfiguration	framework/base/Configuration.cpp	/^  bool Configuration::validConfiguration() const{$/;"	f	class:ProtoMol::Configuration
validConfiguration	framework/base/Configuration.cpp	/^  bool Configuration::validConfiguration(string& errMsg) const{$/;"	f	class:ProtoMol::Configuration
value	framework/base/ConstraintValueType.h	/^      enum { value = e};$/;"	e	enum:ProtoMol::ConstraintValueEnum::Enum2Type::<anonymous>
value	framework/base/Parameter.h	/^    Value       value;$/;"	m	struct:ProtoMol::Parameter
value	framework/base/ValueType.h	/^      enum { value = e};$/;"	e	enum:ProtoMol::ValueEnum::Enum2ValueType::<anonymous>
value	framework/base/ValueType.h	/^    enum { value = ValueType::BOOL};$/;"	e	enum:ProtoMol::ValueTraits::<anonymous>
value	framework/base/ValueType.h	/^    enum { value = ValueType::FORCE};$/;"	e	enum:ProtoMol::ValueTraits::<anonymous>
value	framework/base/ValueType.h	/^    enum { value = ValueType::INTEGRATOR};$/;"	e	enum:ProtoMol::ValueTraits::<anonymous>
value	framework/base/ValueType.h	/^    enum { value = ValueType::INT};$/;"	e	enum:ProtoMol::ValueTraits::<anonymous>
value	framework/base/ValueType.h	/^    enum { value = ValueType::REAL};$/;"	e	enum:ProtoMol::ValueTraits::<anonymous>
value	framework/base/ValueType.h	/^    enum { value = ValueType::UINT};$/;"	e	enum:ProtoMol::ValueTraits::<anonymous>
value	framework/base/ValueType.h	/^    enum { value = ValueType::VECTOR3D};$/;"	e	enum:ProtoMol::ValueTraits::<anonymous>
value	framework/base/ValueType.h	/^    enum { value = ValueType::VECTOR};$/;"	e	enum:ProtoMol::ValueTraits::<anonymous>
value	framework/base/ValueType.h	/^    enum {value = ValueType::STRING};  \/\/ Enum value$/;"	e	enum:ProtoMol::ValueTraits::<anonymous>
value_type	framework/base/Array_Fastest.h	/^    typedef T         value_type;$/;"	t	class:ProtoMol::Array
value_type	framework/base/Array_Fastest.h	/^    typedef T         value_type;$/;"	t	class:ProtoMol::RefArray
value_type	framework/base/Array_NoPartialSpecialization.h	/^      typedef T         value_type;$/;"	t	class:ProtoMol::Array::RefArray
value_type	framework/base/Array_NoPartialSpecialization.h	/^    typedef T         value_type;$/;"	t	class:ProtoMol::Array
value_type	framework/base/Vector3DBlock.h	/^    typedef std::vector<Vector3D>::value_type                value_type;            $/;"	t	class:ProtoMol::Vector3DBlock
value_type	framework/topology/ArrayCellListStructure.h	/^    typedef TContainer::value_type        value_type;$/;"	t	class:ProtoMol::ArrayCellListStructure
values	framework/frontend/IntegratorFactoryDetails.h	/^      std::vector<Value> values;$/;"	m	struct:ProtoMol::IntegratorFactoryDetails::IntegratorInput
vdw	framework/base/PAR.h	/^      bool vdw; $/;"	m	struct:ProtoMol::PAR::Nonbonded
vec	framework/base/Vector3DBlock.h	/^    std::vector<Vector3D> vec; $/;"	m	class:ProtoMol::Vector3DBlock
velocityVirial	framework/topology/topologyutilities.cpp	/^  ScalarStructure velocityVirial(const GenericTopology* topology,$/;"	f	namespace:ProtoMol
view	framework/frontend/OutputBSDL.cpp	/^  string OutputBSDL::view(const Vector3DBlock* pos) const{$/;"	f	class:ProtoMol::OutputBSDL
virial	framework/base/ScalarStructure.cpp	/^  bool ScalarStructure::virial(bool doVirial){$/;"	f	class:ProtoMol::ScalarStructure
virial	framework/base/ScalarStructure.h	/^    bool virial() const {return myDoVirial;}$/;"	f	class:ProtoMol::ScalarStructure
vmd_atoms	framework/imd/IMDElf.h	/^    IMD::int32* vmd_atoms;$/;"	m	class:ProtoMol::IMDElf
vmd_forces	framework/imd/IMDElf.h	/^    float* vmd_forces;$/;"	m	class:ProtoMol::IMDElf
vmdsock_accept	framework/imd/vmdsock.cpp	/^    void *vmdsock_accept(void * v) { return 0; }$/;"	f	namespace:ProtoMol::IMD
vmdsock_accept	framework/imd/vmdsock.cpp	/^    void *vmdsock_accept(void * v) {$/;"	f	namespace:ProtoMol::IMD
vmdsock_bind	framework/imd/vmdsock.cpp	/^    int vmdsock_bind(void * v, int port) { return 0; }$/;"	f	namespace:ProtoMol::IMD
vmdsock_bind	framework/imd/vmdsock.cpp	/^    int vmdsock_bind(void * v, int port) {$/;"	f	namespace:ProtoMol::IMD
vmdsock_connect	framework/imd/vmdsock.cpp	/^    int  vmdsock_connect(void *v, const char *host, int port) { return 0; }$/;"	f	namespace:ProtoMol::IMD
vmdsock_connect	framework/imd/vmdsock.cpp	/^    int  vmdsock_connect(void *v, const char *host, int port) {$/;"	f	namespace:ProtoMol::IMD
vmdsock_create	framework/imd/vmdsock.cpp	/^    void * vmdsock_create(void) { return 0; }$/;"	f	namespace:ProtoMol::IMD
vmdsock_create	framework/imd/vmdsock.cpp	/^    void * vmdsock_create(void) {$/;"	f	namespace:ProtoMol::IMD
vmdsock_destroy	framework/imd/vmdsock.cpp	/^    void vmdsock_destroy(void * v) { return; }$/;"	f	namespace:ProtoMol::IMD
vmdsock_destroy	framework/imd/vmdsock.cpp	/^    void vmdsock_destroy(void * v) {$/;"	f	namespace:ProtoMol::IMD
vmdsock_init	framework/imd/vmdsock.cpp	/^    int vmdsock_init(void) { return -1; }$/;"	f	namespace:ProtoMol::IMD
vmdsock_init	framework/imd/vmdsock.cpp	/^    int vmdsock_init(void) {$/;"	f	namespace:ProtoMol::IMD
vmdsock_listen	framework/imd/vmdsock.cpp	/^    int vmdsock_listen(void * v) { return 0; }$/;"	f	namespace:ProtoMol::IMD
vmdsock_listen	framework/imd/vmdsock.cpp	/^    int vmdsock_listen(void * v) {$/;"	f	namespace:ProtoMol::IMD
vmdsock_read	framework/imd/vmdsock.cpp	/^    int  vmdsock_read(void * v, void *buf, int len) { return 0; }$/;"	f	namespace:ProtoMol::IMD
vmdsock_read	framework/imd/vmdsock.cpp	/^    int  vmdsock_read(void * v, void *buf, int len) {$/;"	f	namespace:ProtoMol::IMD
vmdsock_selread	framework/imd/vmdsock.cpp	/^    int vmdsock_selread(void *v, int sec) { return 0; }$/;"	f	namespace:ProtoMol::IMD
vmdsock_selread	framework/imd/vmdsock.cpp	/^    int vmdsock_selread(void *v, int sec) {$/;"	f	namespace:ProtoMol::IMD
vmdsock_selwrite	framework/imd/vmdsock.cpp	/^    int vmdsock_selwrite(void *v, int sec) { return 0; }$/;"	f	namespace:ProtoMol::IMD
vmdsock_selwrite	framework/imd/vmdsock.cpp	/^    int vmdsock_selwrite(void *v, int sec) {$/;"	f	namespace:ProtoMol::IMD
vmdsock_write	framework/imd/vmdsock.cpp	/^    int  vmdsock_write(void * v, const void *buf, int len) { return 0; }$/;"	f	namespace:ProtoMol::IMD
vmdsock_write	framework/imd/vmdsock.cpp	/^    int  vmdsock_write(void * v, const void *buf, int len) {$/;"	f	namespace:ProtoMol::IMD
vmdsocket	framework/imd/vmdsock.h	/^    } vmdsocket;$/;"	t	namespace:ProtoMol::IMD
volum	framework/forces/MagneticDipoleForce.h	/^    Real volum, expfactor, realChi, kappa;$/;"	m	class:ProtoMol::MagneticDipoleForce
volume	framework/frontend/OutputCache.cpp	/^  Real OutputCache::volume() const{$/;"	f	class:ProtoMol::OutputCache
w	compilerTests/pngTest.cpp	/^  unsigned int w,h;$/;"	m	class:PPM	file:
w	framework/base/PGM.h	/^    unsigned int w,h;$/;"	m	class:ProtoMol::PGM
w	framework/base/PPM.h	/^    unsigned int w,h;$/;"	m	class:ProtoMol::PPM
wait_imd	framework/imd/IMDElf.h	/^    int wait_imd;$/;"	m	class:ProtoMol::IMDElf
walk	framework/integrators/MCIntegrator.cpp	/^  void MCIntegrator::walk(int steps){$/;"	f	class:ProtoMol::MCIntegrator
warning	framework/base/Report.cpp	/^    MyStreamer& warning(MyStreamer& stream){$/;"	f	namespace:ProtoMol::Report
water	framework/base/Molecule.h	/^    bool water;$/;"	m	struct:ProtoMol::Molecule
waterOption	framework/topology/topologyutilities.h	/^  enum waterOption {IGNORE_WATER, ONLY_WATER, ALL};$/;"	g	namespace:ProtoMol
width	compilerTests/pngTest.cpp	/^  unsigned int width() const{return w;}$/;"	f	class:PPM
width	framework/base/PGM.h	/^    unsigned int width() const{return w;}$/;"	f	class:ProtoMol::PGM
width	framework/base/PPM.h	/^    unsigned int width() const{return w;}$/;"	f	class:ProtoMol::PPM
width	framework/base/Report.cpp	/^    void MyStreamer::width(int wide){$/;"	f	class:ProtoMol::Report::MyStreamer
write	framework/io/DCDTrajectoryWriter.cpp	/^  bool DCDTrajectoryWriter::write(const Vector3DBlock& coords){$/;"	f	class:ProtoMol::DCDTrajectoryWriter
write	framework/io/PARWriter.cpp	/^  bool PARWriter::write(const PAR& par){$/;"	f	class:ProtoMol::PARWriter
write	framework/io/PDBWriter.cpp	/^  bool PDBWriter::write(const PDB& pdb){$/;"	f	class:ProtoMol::PDBWriter
write	framework/io/PDBWriter.cpp	/^  bool PDBWriter::write(const Vector3DBlock& coords, const PDB& pdb){$/;"	f	class:ProtoMol::PDBWriter
write	framework/io/PDBWriter.cpp	/^  bool PDBWriter::write(const Vector3DBlock& coords, const vector<PDB::Atom>& atoms){$/;"	f	class:ProtoMol::PDBWriter
write	framework/io/PDBWriter.cpp	/^  bool PDBWriter::write(const Vector3DBlock& coords, const vector<PDB::Atom>& atoms, const vector<PDB::Ter>& ters){$/;"	f	class:ProtoMol::PDBWriter
write	framework/io/PGMWriter.cpp	/^  bool PGMWriter::write(const PGM& pgm){$/;"	f	class:ProtoMol::PGMWriter
write	framework/io/PGMWriter.cpp	/^  bool PGMWriter::write(const PPM& ppm){$/;"	f	class:ProtoMol::PGMWriter
write	framework/io/PNGWriter.cpp	/^  bool PNGWriter::write(const PGM& pgm){$/;"	f	class:ProtoMol::PNGWriter
write	framework/io/PNGWriter.cpp	/^  bool PNGWriter::write(const PPM& ppm){$/;"	f	class:ProtoMol::PNGWriter
write	framework/io/PPMWriter.cpp	/^  bool PPMWriter::write(const PGM& pgm){$/;"	f	class:ProtoMol::PPMWriter
write	framework/io/PPMWriter.cpp	/^  bool PPMWriter::write(const PPM& ppm){$/;"	f	class:ProtoMol::PPMWriter
write	framework/io/PSFWriter.cpp	/^  bool PSFWriter::write(const PSF& psf){$/;"	f	class:ProtoMol::PSFWriter
write	framework/io/XFigWriter.cpp	/^  bool XFigWriter::write(const Vector3DBlock& coords, const std::vector<std::string>& names){$/;"	f	class:ProtoMol::XFigWriter
write	framework/io/XFigWriter.cpp	/^  bool XFigWriter::write(const XYZ& xyz){$/;"	f	class:ProtoMol::XFigWriter
write	framework/io/XYZBinWriter.cpp	/^  bool XYZBinWriter::write(const Vector3DBlock& coords){$/;"	f	class:ProtoMol::XYZBinWriter
write	framework/io/XYZBinWriter.cpp	/^  bool XYZBinWriter::write(const Vector3DBlock& coords, bool isLittleEndian, unsigned int size){$/;"	f	class:ProtoMol::XYZBinWriter
write	framework/io/XYZBinWriter.cpp	/^  bool XYZBinWriter::write(const XYZ& xyz){$/;"	f	class:ProtoMol::XYZBinWriter
write	framework/io/XYZBinWriter.cpp	/^  bool XYZBinWriter::write(const XYZ& xyz, bool isLittleEndian, unsigned int size){$/;"	f	class:ProtoMol::XYZBinWriter
write	framework/io/XYZTrajectoryWriter.cpp	/^  bool XYZTrajectoryWriter::write(){$/;"	f	class:ProtoMol::XYZTrajectoryWriter
write	framework/io/XYZTrajectoryWriter.cpp	/^  bool XYZTrajectoryWriter::write(const Vector3DBlock& coords){$/;"	f	class:ProtoMol::XYZTrajectoryWriter
write	framework/io/XYZTrajectoryWriter.cpp	/^  bool XYZTrajectoryWriter::write(const Vector3DBlock& coords, const std::vector<Atom>& atoms,$/;"	f	class:ProtoMol::XYZTrajectoryWriter
write	framework/io/XYZTrajectoryWriter.cpp	/^  bool XYZTrajectoryWriter::write(const Vector3DBlock& coords, const std::vector<std::string>& names){$/;"	f	class:ProtoMol::XYZTrajectoryWriter
write	framework/io/XYZTrajectoryWriter.cpp	/^  bool XYZTrajectoryWriter::write(const XYZ& xyz){$/;"	f	class:ProtoMol::XYZTrajectoryWriter
write	framework/io/XYZWriter.cpp	/^  bool XYZWriter::write(const Vector3DBlock& coords, $/;"	f	class:ProtoMol::XYZWriter
write	framework/io/XYZWriter.cpp	/^  bool XYZWriter::write(const Vector3DBlock& coords, const std::vector<std::string>& names){$/;"	f	class:ProtoMol::XYZWriter
write	framework/io/XYZWriter.cpp	/^  bool XYZWriter::write(const XYZ& xyz){$/;"	f	class:ProtoMol::XYZWriter
writeData	framework/io/AMBERReader.cpp	/^  void AMBERReader::writeData() {$/;"	f	class:ProtoMol::AMBERReader
writeData	framework/io/CRDReader.cpp	/^ void CRDReader::writeData()$/;"	f	class:ProtoMol::CRDReader
x	framework/base/Grid.h	/^      TInterpolation x;$/;"	m	struct:ProtoMol::Grid::Interpolation3D
x	framework/base/Grid.h	/^    struct Int3D {int x; int y; int z;};$/;"	m	struct:ProtoMol::Grid::Int3D
x	framework/base/MultiGrid.h	/^      TInterpolation x;$/;"	m	struct:ProtoMol::MultiGrid::Interpolation3D
x	framework/base/MultiGrid.h	/^    struct Int3D  {int x, y, z;};$/;"	m	struct:ProtoMol::MultiGrid::Int3D
x	framework/base/Vector3D.h	/^    Real x,y,z;$/;"	m	struct:ProtoMol::Vector3D
x	framework/parallel/Parallel-FD.cpp	/^  int x = -1;$/;"	v
x	framework/topology/CubicCellLocation.h	/^    int x;$/;"	m	class:ProtoMol::CubicCellLocation
xFigBW1	framework/io/XFigWriter.cpp	/^  static const std::string xFigBW1[xFigBWN] ={"1 3 0 1 7 0",$/;"	v	file:
xFigBW2	framework/io/XFigWriter.cpp	/^  static const std::string xFigBW2[xFigBWN] ={"0 20 0.000 1 0.0000",$/;"	v	file:
xFigBWN	framework/io/XFigWriter.cpp	/^  static const int xFigBWN = 4;$/;"	v	file:
xFigColors	framework/io/XFigWriter.cpp	/^  static const int xFigColors[xFigColorsN] = {0,20,13,10,31,1,2,3,4,5,6,7,8,9,11,12,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30};$/;"	v	file:
xFigColorsN	framework/io/XFigWriter.cpp	/^  static const int xFigColorsN = 32;$/;"	v	file:
xFigXMax	framework/io/XFigWriter.cpp	/^  static const int xFigXMax = 12500;$/;"	v	file:
xFigYMax	framework/io/XFigWriter.cpp	/^  static const int xFigYMax = 9700;$/;"	v	file:
y	framework/base/Grid.h	/^      TInterpolation y;$/;"	m	struct:ProtoMol::Grid::Interpolation3D
y	framework/base/Grid.h	/^    struct Int3D {int x; int y; int z;};$/;"	m	struct:ProtoMol::Grid::Int3D
y	framework/base/MultiGrid.h	/^      TInterpolation y;$/;"	m	struct:ProtoMol::MultiGrid::Interpolation3D
y	framework/base/MultiGrid.h	/^    struct Int3D  {int x, y, z;};$/;"	m	struct:ProtoMol::MultiGrid::Int3D
y	framework/base/Vector3D.h	/^    Real x,y,z;$/;"	m	struct:ProtoMol::Vector3D
y	framework/parallel/Parallel-FD.cpp	/^  int y = -1;$/;"	v
y	framework/topology/CubicCellLocation.h	/^    int y;$/;"	m	class:ProtoMol::CubicCellLocation
z	framework/base/Grid.h	/^      TInterpolation z;$/;"	m	struct:ProtoMol::Grid::Interpolation3D
z	framework/base/Grid.h	/^    struct Int3D {int x; int y; int z;};$/;"	m	struct:ProtoMol::Grid::Int3D
z	framework/base/MultiGrid.h	/^      TInterpolation z;$/;"	m	struct:ProtoMol::MultiGrid::Interpolation3D
z	framework/base/MultiGrid.h	/^    struct Int3D  {int x, y, z;};$/;"	m	struct:ProtoMol::MultiGrid::Int3D
z	framework/base/Vector3D.h	/^    Real x,y,z;$/;"	m	struct:ProtoMol::Vector3D
z	framework/topology/CubicCellLocation.h	/^    int z;$/;"	m	class:ProtoMol::CubicCellLocation
zero	framework/base/Matrix3by3.cpp	/^  bool Matrix3by3::zero() const$/;"	f	class:ProtoMol::Matrix3by3
zero	framework/base/Vector3DBlock.h	/^    void zero(int n=-1) {$/;"	f	class:ProtoMol::Vector3DBlock
zeroMatrix	framework/base/Matrix3by3.cpp	/^  void Matrix3by3::zeroMatrix() $/;"	f	class:ProtoMol::Matrix3by3
zfft2d	framework/base/fft.c	/^int zfft2d( int sign, int n1, int n2, zomplex *array, int ld, zomplex *save)$/;"	f
zfft2d_	framework/base/fft.c	/^int zfft2d_(int *sign, int *x, int *y, zomplex *a, int *lda, zomplex *coeff)$/;"	f
zfft2di	framework/base/fft.c	/^zomplex *zfft2di( int n1, int n2, zomplex *save)$/;"	f
zfft2di_	framework/base/fft.c	/^int zfft2di_(int *x, int *y,zomplex * coeff)$/;"	f
zfft3d	framework/base/fft.c	/^int zfft3d( int sign, int n1, int n2, int n3, zomplex *array, int ld1, int ld2, zomplex *save)$/;"	f
zfft3d_	framework/base/fft.c	/^int zfft3d_(int *sign,int * x, int *y, int *z__,zomplex * a, int *la1, int *la2,zomplex * coeff)$/;"	f
zfft3di	framework/base/fft.c	/^zomplex *zfft3di( int n1, int n2, int n3, zomplex *save)$/;"	f
zfft3di_	framework/base/fft.c	/^int zfft3di_(int *x, int *y, int *z__,zomplex * coeff)$/;"	f
zfftcopyin_	framework/base/fft.c	/^void zfftcopyin_(int *n,int * b,int * bdim,zomplex * a,int *  inc ,int * lda,int * rindex,zomplex * w,int * lpref)$/;"	f
zfftcopyout_	framework/base/fft.c	/^void zfftcopyout_(int *n, int *b, zomplex *a, int *inc, int *lda,zomplex  *w)$/;"	f
zfftm1big_	framework/base/fft.c	/^int zfftm1big_(int *sign,int * n,int * p,zomplex * a,int * inc,int * lda,int * lpref,int * nf,int * f,zomplex *coeff,int *rindex)$/;"	f
zfftm1d	framework/base/fft.c	/^int zfftm1d( int sign, int m, int n, zomplex *array, int incI, int incJ, zomplex *save)$/;"	f
zfftm1d_	framework/base/fft.c	/^int zfftm1d_(int *sign,int * n,int * p, zomplex* a, int *inc,int * lda, zomplex *coeff, int *lpref)$/;"	f
zfftm1di	framework/base/fft.c	/^zomplex *zfftm1di( int m, zomplex *save)$/;"	f
zfftm1di_	framework/base/fft.c	/^int zfftm1di_(int *n,zomplex * coeff)$/;"	f
zfftm1rowb_	framework/base/fft.c	/^int zfftm1rowb_(int *n, int *b, int *bdim,zomplex *w, int *nf, int *f, double *coeff, zomplex *a, int *inc, int *lda, $/;"	f
zfftm1rowf_	framework/base/fft.c	/^int zfftm1rowf_(int *n, int *b, int *bdim,zomplex * w, int *nf, int *f, double *coeff, zomplex *a, int *inc, int *lda, $/;"	f
zfftrev_	framework/base/fft.c	/^int zfftrev_(int *n, int *inc, int *nf, int *f, int * nmax , int *rindex,int * ipadok)$/;"	f
zomplex	framework/base/FFTComplex.h	/^  } zomplex;$/;"	t
zomplex	framework/base/fft.c	/^} zomplex;$/;"	t	file:
~AMBERReader	framework/io/AMBERReader.cpp	/^  AMBERReader::~AMBERReader(){$/;"	f	class:ProtoMol::AMBERReader
~AngleInfo	framework/topology/AngleInfo.cpp	/^  AngleInfo::~AngleInfo() {$/;"	f	class:ProtoMol::AngleInfo
~AngleSystemForceBase	framework/forces/AngleSystemForceBase.h	/^    virtual ~AngleSystemForceBase(){}$/;"	f	class:ProtoMol::AngleSystemForceBase
~Array	framework/base/Array_Fastest.h	/^    ~Array<T,N>() $/;"	f	class:ProtoMol::Array
~Array	framework/base/Array_NoPartialSpecialization.h	/^    ~Array<T,N>() $/;"	f	class:ProtoMol::Array
~BSpline	framework/base/BSpline.cpp	/^  BSpline::~BSpline(){$/;"	f	class:ProtoMol::BSpline
~BSplineEnum	framework/base/BSplineType.h	/^    virtual ~BSplineEnum(){}$/;"	f	class:ProtoMol::BSplineEnum
~BSplineMOLLYIntegrator	framework/integrators/BSplineMOLLYIntegrator.cpp	/^  BSplineMOLLYIntegrator::~BSplineMOLLYIntegrator() {$/;"	f	class:ProtoMol::BSplineMOLLYIntegrator
~BondSystemForceBase	framework/forces/BondSystemForceBase.h	/^    virtual ~BondSystemForceBase(){}$/;"	f	class:ProtoMol::BondSystemForceBase
~CRDReader	framework/io/CRDReader.cpp	/^  CRDReader::~CRDReader(){$/;"	f	class:ProtoMol::CRDReader
~CompareForce	framework/forces/CompareForce.cpp	/^  CompareForce::~CompareForce(){$/;"	f	class:ProtoMol::CompareForce
~ConfigurationReader	framework/io/ConfigurationReader.cpp	/^  ConfigurationReader::~ConfigurationReader(){$/;"	f	class:ProtoMol::ConfigurationReader
~ConstraintValueEnum	framework/base/ConstraintValueType.h	/^    virtual ~ConstraintValueEnum(){}$/;"	f	class:ProtoMol::ConstraintValueEnum
~DCDTrajectoryReader	framework/io/DCDTrajectoryReader.cpp	/^  DCDTrajectoryReader::~DCDTrajectoryReader(){$/;"	f	class:ProtoMol::DCDTrajectoryReader
~DMDLeapfrogIntegrator	framework/integrators/DMDLeapfrogIntegrator.cpp	/^  DMDLeapfrogIntegrator::~DMDLeapfrogIntegrator()$/;"	f	class:ProtoMol::DMDLeapfrogIntegrator
~DihedralHMCIntegrator	framework/integrators/DihedralHMCIntegrator.cpp	/^  DihedralHMCIntegrator::~DihedralHMCIntegrator(){$/;"	f	class:ProtoMol::DihedralHMCIntegrator
~DihedralSystemForceBase	framework/forces/DihedralSystemForceBase.h	/^    virtual ~DihedralSystemForceBase(){}$/;"	f	class:ProtoMol::DihedralSystemForceBase
~ElectricFieldSystemForceBase	framework/forces/ElectricFieldSystemForceBase.h	/^    virtual ~ElectricFieldSystemForceBase(){}$/;"	f	class:ProtoMol::ElectricFieldSystemForceBase
~EquilibriumMOLLYIntegrator	framework/integrators/EquilibriumMOLLYIntegrator.cpp	/^  EquilibriumMOLLYIntegrator::~EquilibriumMOLLYIntegrator(){$/;"	f	class:ProtoMol::EquilibriumMOLLYIntegrator
~ExclusionEnum	framework/topology/ExclusionType.h	/^    virtual ~ExclusionEnum(){}$/;"	f	class:ProtoMol::ExclusionEnum
~ExclusionTable	framework/topology/ExclusionTable.cpp	/^  ExclusionTable::~ExclusionTable(){$/;"	f	class:ProtoMol::ExclusionTable
~ExtendedForce	framework/forces/ExtendedForce.h	/^    virtual ~ExtendedForce(){}$/;"	f	class:ProtoMol::ExtendedForce
~FFTComplex	framework/base/FFTComplex.cpp	/^  FFTComplex::~FFTComplex(){$/;"	f	class:ProtoMol::FFTComplex
~FFTInternal	framework/base/FFTComplex.cpp	/^  FFTInternal::~FFTInternal(){$/;"	f	class:ProtoMol::FFTInternal
~Factory	framework/frontend/Factory.h	/^    virtual ~Factory(){$/;"	f	class:ProtoMol::Factory
~FactoryBase	framework/frontend/Factory.h	/^    virtual ~FactoryBase(){$/;"	f	class:ProtoMol::FactoryBase
~File	framework/io/File.cpp	/^  File::~File(){$/;"	f	class:ProtoMol::File
~Force	framework/forces/Force.h	/^    virtual ~Force(){}$/;"	f	class:ProtoMol::Force
~ForceFactoryDetails	framework/frontend/ForceFactoryDetails.cpp	/^  ForceFactoryDetails::~ForceFactoryDetails(){$/;"	f	class:ProtoMol::ForceFactoryDetails
~ForceGroup	framework/forces/ForceGroup.cpp	/^  ForceGroup::~ForceGroup() {$/;"	f	class:ProtoMol::ForceGroup
~GenericTopology	framework/topology/GenericTopology.h	/^    virtual ~GenericTopology(){};$/;"	f	class:ProtoMol::GenericTopology
~Grid	framework/base/Grid.h	/^  Grid<TInterpolation>::~Grid(){$/;"	f	class:ProtoMol::Grid
~HapticSystemForce	framework/imd/HapticSystemForce.cpp	/^  HapticSystemForce::~HapticSystemForce(){$/;"	f	class:ProtoMol::HapticSystemForce
~HarmDihedralSystemForceBase	framework/forces/HarmDihedralSystemForceBase.h	/^    virtual ~HarmDihedralSystemForceBase(){}$/;"	f	class:ProtoMol::HarmDihedralSystemForceBase
~HelpTextFactory	framework/frontend/HelpTextFactory.cpp	/^  HelpTextFactory::~HelpTextFactory(){}$/;"	f	class:ProtoMol::HelpTextFactory
~Hermite	framework/base/Hermite.cpp	/^  Hermite::~Hermite(){$/;"	f	class:ProtoMol::Hermite
~IMDElf	framework/imd/IMDElf.cpp	/^  IMDElf::~IMDElf() {$/;"	f	class:ProtoMol::IMDElf
~ImproperSystemForceBase	framework/forces/ImproperSystemForceBase.h	/^    virtual ~ImproperSystemForceBase(){}$/;"	f	class:ProtoMol::ImproperSystemForceBase
~InputPosVelEnum	framework/frontend/InputPosVelType.h	/^    virtual ~InputPosVelEnum(){}$/;"	f	class:ProtoMol::InputPosVelEnum
~InputValue	framework/frontend/InputValue.h	/^    virtual ~InputValue(){}$/;"	f	class:ProtoMol::InputValue
~Integrator	framework/integrators/Integrator.cpp	/^  Integrator::~Integrator(){$/;"	f	class:ProtoMol::Integrator
~IntegratorFactoryDetails	framework/frontend/IntegratorFactoryDetails.cpp	/^  IntegratorFactoryDetails::~IntegratorFactoryDetails(){$/;"	f	class:ProtoMol::IntegratorFactoryDetails
~Lagrange	framework/base/Lagrange.cpp	/^  Lagrange::~Lagrange(){$/;"	f	class:ProtoMol::Lagrange
~LeapfrogIntegrator	framework/integrators/LeapfrogIntegrator.cpp	/^  LeapfrogIntegrator::~LeapfrogIntegrator() {}$/;"	f	class:ProtoMol::LeapfrogIntegrator
~LennardJonesParameterTable	framework/topology/LennardJonesParameterTable.cpp	/^  LennardJonesParameterTable::~LennardJonesParameterTable(){$/;"	f	class:ProtoMol::LennardJonesParameterTable
~LookUpTableBase	framework/base/LookUpTableBase.h	/^    virtual ~LookUpTableBase(){$/;"	f	class:ProtoMol::LookUpTableBase
~MCIntegrator	framework/integrators/MCIntegrator.cpp	/^  MCIntegrator::~MCIntegrator(){$/;"	f	class:ProtoMol::MCIntegrator
~MOLLYIntegrator	framework/integrators/MOLLYIntegrator.cpp	/^  MOLLYIntegrator::~MOLLYIntegrator(){}$/;"	f	class:ProtoMol::MOLLYIntegrator
~MTSIntegrator	framework/integrators/MTSIntegrator.cpp	/^  MTSIntegrator::~MTSIntegrator(){$/;"	f	class:ProtoMol::MTSIntegrator
~Makeable	framework/base/Makeable.h	/^    virtual ~Makeable(){};$/;"	f	class:ProtoMol::Makeable
~MetaForce	framework/forces/MetaForce.h	/^    virtual ~MetaForce(){}$/;"	f	class:ProtoMol::MetaForce
~Modifier	framework/integrators/Modifier.h	/^    virtual ~Modifier(){}$/;"	f	class:ProtoMol::Modifier
~MollyForce	framework/forces/MollyForce.h	/^    virtual ~MollyForce(){}$/;"	f	class:ProtoMol::MollyForce
~MultiGrid	framework/base/MultiGrid.h	/^    ~MultiGrid(){$/;"	f	class:ProtoMol::MultiGrid
~NonbondedCutoffForceBase	framework/forces/NonbondedCutoffForceBase.h	/^    virtual ~NonbondedCutoffForceBase(){}$/;"	f	class:ProtoMol::NonbondedCutoffForceBase
~NonbondedFullEwaldSystemForce	framework/forces/NonbondedFullEwaldSystemForce.h	/^				TSwitchingFunction>::~NonbondedFullEwaldSystemForce(){$/;"	f	class:ProtoMol::NonbondedFullEwaldSystemForce
~NonbondedFullSystemForce	framework/forces/NonbondedFullSystemForce.h	/^    virtual ~NonbondedFullSystemForce(){};$/;"	f	class:ProtoMol::NonbondedFullSystemForce
~NonbondedMultiGridSystemForce	framework/forces/NonbondedMultiGridSystemForce.h	/^				smooth>::~NonbondedMultiGridSystemForce(){$/;"	f	class:ProtoMol::NonbondedMultiGridSystemForce
~NonbondedPMEwaldSystemForce	framework/forces/NonbondedPMEwaldSystemForce.h	/^			      TSwitchingFunction>::~NonbondedPMEwaldSystemForce(){$/;"	f	class:ProtoMol::NonbondedPMEwaldSystemForce
~NonbondedSimpleFullSystemForce	framework/forces/NonbondedSimpleFullSystemForce.h	/^    virtual ~NonbondedSimpleFullSystemForce(){}; $/;"	f	class:ProtoMol::NonbondedSimpleFullSystemForce
~NonbondedSimpleFullSystemForceBase	framework/forces/NonbondedSimpleFullSystemForceBase.h	/^    virtual ~NonbondedSimpleFullSystemForceBase(){}$/;"	f	class:ProtoMol::NonbondedSimpleFullSystemForceBase
~OutputBSDL	framework/frontend/OutputBSDL.cpp	/^  OutputBSDL::~OutputBSDL(){$/;"	f	class:ProtoMol::OutputBSDL
~OutputCache	framework/frontend/OutputCache.cpp	/^  OutputCache::~OutputCache(){$/;"	f	class:ProtoMol::OutputCache
~OutputCollection	framework/frontend/OutputCollection.cpp	/^  OutputCollection::~OutputCollection(){$/;"	f	class:ProtoMol::OutputCollection
~OutputDCDTrajectory	framework/frontend/OutputDCDTrajectory.cpp	/^  OutputDCDTrajectory::~OutputDCDTrajectory(){$/;"	f	class:ProtoMol::OutputDCDTrajectory
~OutputDihedrals	framework/frontend/OutputDihedrals.cpp	/^  OutputDihedrals::~OutputDihedrals(){$/;"	f	class:ProtoMol::OutputDihedrals
~OutputFactoryDetails	framework/frontend/OutputFactoryDetails.cpp	/^  OutputFactoryDetails::~OutputFactoryDetails(){$/;"	f	class:ProtoMol::OutputFactoryDetails
~OutputFile	framework/frontend/OutputFile.cpp	/^  OutputFile::~OutputFile(){$/;"	f	class:ProtoMol::OutputFile
~OutputREMExchangeRate	framework/frontend/OutputREMExchangeRate.cpp	/^  OutputREMExchangeRate::~OutputREMExchangeRate() {}$/;"	f	class:ProtoMol::OutputREMExchangeRate
~OutputREMHistoryFile	framework/frontend/OutputREMHistory.cpp	/^  OutputREMHistoryFile::~OutputREMHistoryFile() {}$/;"	f	class:ProtoMol::OutputREMHistoryFile
~OutputState	framework/frontend/OutputState.cpp	/^  OutputState::~OutputState(){$/;"	f	class:ProtoMol::OutputState
~OutputTemperatures	framework/frontend/OutputTemperatures.cpp	/^  OutputTemperatures::~OutputTemperatures(){}$/;"	f	class:ProtoMol::OutputTemperatures
~OutputXYZBinTrajectoryPos	framework/frontend/OutputXYZBinTrajectoryPos.cpp	/^  OutputXYZBinTrajectoryPos::~OutputXYZBinTrajectoryPos(){$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryPos
~OutputXYZBinTrajectoryVel	framework/frontend/OutputXYZBinTrajectoryVel.cpp	/^  OutputXYZBinTrajectoryVel::~OutputXYZBinTrajectoryVel(){$/;"	f	class:ProtoMol::OutputXYZBinTrajectoryVel
~OutputXYZTrajectoryForce	framework/frontend/OutputXYZTrajectoryForce.cpp	/^  OutputXYZTrajectoryForce::~OutputXYZTrajectoryForce(){$/;"	f	class:ProtoMol::OutputXYZTrajectoryForce
~OutputXYZTrajectoryPos	framework/frontend/OutputXYZTrajectoryPos.cpp	/^  OutputXYZTrajectoryPos::~OutputXYZTrajectoryPos(){$/;"	f	class:ProtoMol::OutputXYZTrajectoryPos
~OutputXYZTrajectoryVel	framework/frontend/OutputXYZTrajectoryVel.cpp	/^  OutputXYZTrajectoryVel::~OutputXYZTrajectoryVel(){$/;"	f	class:ProtoMol::OutputXYZTrajectoryVel
~PARReader	framework/io/PARReader.cpp	/^  PARReader::~PARReader(){$/;"	f	class:ProtoMol::PARReader
~PDBReader	framework/io/PDBReader.cpp	/^  PDBReader::~PDBReader(){$/;"	f	class:ProtoMol::PDBReader
~PGM	framework/base/PGM.cpp	/^  PGM::~PGM(){delete [] p;}$/;"	f	class:ProtoMol::PGM
~PGMReader	framework/io/PGMReader.cpp	/^  PGMReader::~PGMReader(){$/;"	f	class:ProtoMol::PGMReader
~PLeapfrogIntegrator	framework/integrators/PLeapfrogIntegrator.cpp	/^  PLeapfrogIntegrator::~PLeapfrogIntegrator() {$/;"	f	class:ProtoMol::PLeapfrogIntegrator
~PPM	compilerTests/pngTest.cpp	/^PPM::~PPM(){delete [] p;}$/;"	f	class:PPM
~PPM	framework/base/PPM.cpp	/^  PPM::~PPM(){delete [] p;}$/;"	f	class:ProtoMol::PPM
~PPMReader	framework/io/PPMReader.cpp	/^  PPMReader::~PPMReader(){$/;"	f	class:ProtoMol::PPMReader
~PSFReader	framework/io/PSFReader.cpp	/^  PSFReader::~PSFReader(){$/;"	f	class:ProtoMol::PSFReader
~PSFWriter	framework/io/PSFWriter.cpp	/^  PSFWriter::~PSFWriter(){}$/;"	f	class:ProtoMol::PSFWriter
~Parallel	framework/parallel/Parallel-FD.cpp	/^  Parallel::~Parallel(){$/;"	f	class:ProtoMol::Parallel
~Parallel	framework/parallel/Parallel.cpp	/^  Parallel::~Parallel(){$/;"	f	class:ProtoMol::Parallel
~ParallelEnum	framework/parallel/ParallelType.h	/^    virtual ~ParallelEnum(){}$/;"	f	class:ProtoMol::ParallelEnum
~PaulTrapExtendedForceBase	framework/forces/PaulTrapExtendedForceBase.h	/^    virtual ~PaulTrapExtendedForceBase(){}$/;"	f	class:ProtoMol::PaulTrapExtendedForceBase
~PlaceHolder	framework/base/Value.h	/^      virtual ~PlaceHolder(){}$/;"	f	class:ProtoMol::Value::PlaceHolder
~Proxy	framework/base/Proxy.h	/^    virtual ~Proxy(){}$/;"	f	class:ProtoMol::Proxy
~REMConfigurationReader	framework/io/REMConfigurationReader.cpp	/^  REMConfigurationReader::~REMConfigurationReader(){$/;"	f	class:ProtoMol::REMConfigurationReader
~Reader	framework/io/Reader.cpp	/^  Reader::~Reader(){}$/;"	f	class:ProtoMol::Reader
~ReducedHessAngle	framework/base/ReducedHessAngle.h	/^    ~ReducedHessAngle(){}$/;"	f	class:ProtoMol::ReducedHessAngle
~SemiGenericTopology	framework/topology/SemiGenericTopology.h	/^    virtual ~SemiGenericTopology(){};$/;"	f	class:ProtoMol::SemiGenericTopology
~ShadowHMCIntegrator	framework/integrators/ShadowHMCIntegrator.cpp	/^    ShadowHMCIntegrator::~ShadowHMCIntegrator() {}$/;"	f	class:ProtoMol::ShadowHMCIntegrator
~Stack	framework/base/Stack.h	/^  Stack<T>::~Stack() {$/;"	f	class:ProtoMol::Stack
~SystemForce	framework/forces/SystemForce.h	/^    virtual ~SystemForce(){}$/;"	f	class:ProtoMol::SystemForce
~SystemTimeForce	framework/forces/SystemTimeForce.h	/^    virtual ~SystemTimeForce(){};$/;"	f	class:ProtoMol::SystemTimeForce
~TempFileReader	framework/io/TempFileReader.h	/^    virtual ~TempFileReader() {}$/;"	f	class:ProtoMol::TempFileReader
~TimeForce	framework/forces/TimeForce.cpp	/^  TimeForce::~TimeForce(){$/;"	f	class:ProtoMol::TimeForce
~Topology	framework/topology/Topology.h	/^    virtual ~Topology(){};$/;"	f	class:ProtoMol::Topology
~TopologyFactoryDetails	framework/frontend/TopologyFactoryDetails.cpp	/^  TopologyFactoryDetails::~TopologyFactoryDetails(){$/;"	f	class:ProtoMol::TopologyFactoryDetails
~UniversalSwitchingFunctionBase	framework/topology/UniversalSwitchingFunctionBase.h	/^    virtual ~UniversalSwitchingFunctionBase(){}$/;"	f	class:ProtoMol::UniversalSwitchingFunctionBase
~Value	framework/base/Value.cpp	/^  Value::~Value(){if(myValue != NULL) delete myValue;myValue=NULL;}$/;"	f	class:ProtoMol::Value
~ValueEnum	framework/base/ValueType.h	/^    virtual ~ValueEnum(){}$/;"	f	class:ProtoMol::ValueEnum
~WrapperMetaForce	framework/forces/WrapperMetaForce.cpp	/^  WrapperMetaForce::~WrapperMetaForce(){$/;"	f	class:ProtoMol::WrapperMetaForce
~Writer	framework/io/Writer.cpp	/^  Writer::~Writer(){}$/;"	f	class:ProtoMol::Writer
~XYZBinReader	framework/io/XYZBinReader.cpp	/^  XYZBinReader::~XYZBinReader(){$/;"	f	class:ProtoMol::XYZBinReader
~XYZReader	framework/io/XYZReader.cpp	/^  XYZReader::~XYZReader(){$/;"	f	class:ProtoMol::XYZReader
~XYZTrajectoryReader	framework/io/XYZTrajectoryReader.cpp	/^  XYZTrajectoryReader::~XYZTrajectoryReader(){$/;"	f	class:ProtoMol::XYZTrajectoryReader
~XYZTrajectoryWriter	framework/io/XYZTrajectoryWriter.cpp	/^  XYZTrajectoryWriter::~XYZTrajectoryWriter(){}$/;"	f	class:ProtoMol::XYZTrajectoryWriter
